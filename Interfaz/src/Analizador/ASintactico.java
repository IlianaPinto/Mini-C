
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\011\012\000\002" +
    "\005\006\000\002\005\002\000\002\010\011\000\002\006" +
    "\013\000\002\007\003\000\002\012\010\000\002\013\004" +
    "\000\002\013\002\000\002\014\012\000\002\015\003\000" +
    "\002\015\002\000\002\024\005\000\002\004\004\000\002" +
    "\016\004\000\002\017\005\000\002\017\002\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\010\000\002\021\002\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\044\003\000\002\044\002\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\025\004\000\002\025" +
    "\004\000\002\026\003\000\002\026\002\000\002\027\004" +
    "\000\002\046\004\000\002\046\002\000\002\030\006\000" +
    "\002\030\004\000\002\036\003\000\002\036\003\000\002" +
    "\033\003\000\002\033\002\000\002\034\004\000\002\035" +
    "\004\000\002\035\005\000\002\035\003\000\002\035\002" +
    "\000\002\045\003\000\002\045\002\000\002\031\004\000" +
    "\002\032\004\000\002\032\002\000\002\041\003\000\002" +
    "\041\004\000\002\040\005\000\002\040\003\000\002\042" +
    "\006\000\002\042\003\000\002\037\006\000\002\037\004" +
    "\000\002\047\006\000\002\047\002\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\003\014\004\006\005\005\006\011\001" +
    "\002\000\014\002\000\003\014\004\006\005\005\006\011" +
    "\001\002\000\012\021\uffc9\022\uffc9\026\uffc9\031\037\001" +
    "\002\000\012\021\uffc9\022\uffc9\026\uffc9\031\037\001\002" +
    "\000\014\002\uffb5\003\uffb5\004\uffb5\005\uffb5\006\uffb5\001" +
    "\002\000\004\002\250\001\002\000\004\026\uffc3\001\002" +
    "\000\004\026\015\001\002\000\004\026\uffc2\001\002\000" +
    "\014\002\uffb2\003\uffb2\004\uffb2\005\uffb2\006\uffb2\001\002" +
    "\000\010\020\020\022\uffac\023\uffac\001\002\000\006\022" +
    "\244\023\245\001\002\000\014\002\uffb3\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\001\002\000\010\004\006\005\005\021" +
    "\uffc0\001\002\000\010\021\uffbb\022\236\026\237\001\002" +
    "\000\004\021\uffc1\001\002\000\004\021\024\001\002\000" +
    "\006\016\027\023\025\001\002\000\014\002\uffb0\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\001\002\000\014\002\uffaf\003" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\001\002\000\030\003\uffc6" +
    "\004\006\005\005\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\015\uffc6\017\uffc6\026\uffc6\001\002\000\004\026\235" +
    "\001\002\000\024\003\055\007\060\010\046\011\043\012" +
    "\053\014\044\015\050\017\ufff7\026\047\001\002\000\030" +
    "\003\uffc6\004\006\005\005\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\026\uffc6\001\002\000\006" +
    "\022\034\023\035\001\002\000\006\026\uffc9\031\037\001" +
    "\002\000\030\003\uffc8\004\uffc8\005\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\014\uffc8\015\uffc8\017\uffc8\026\uffc8\001" +
    "\002\000\004\026\040\001\002\000\010\021\uffca\022\uffca" +
    "\026\uffca\001\002\000\006\022\uffc5\023\uffc5\001\002\000" +
    "\024\003\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\026\uffc7\001\002\000\024\003\055\007" +
    "\060\010\046\011\043\012\053\014\044\015\050\017\ufff7" +
    "\026\047\001\002\000\004\020\226\001\002\000\004\020" +
    "\217\001\002\000\024\003\055\007\060\010\046\011\043" +
    "\012\053\014\044\015\050\017\ufff7\026\047\001\002\000" +
    "\004\020\205\001\002\000\004\035\203\001\002\000\004" +
    "\020\173\001\002\000\024\003\055\007\060\010\046\011" +
    "\043\012\053\014\044\015\050\017\ufff7\026\047\001\002" +
    "\000\024\003\055\007\060\010\046\011\043\012\053\014" +
    "\044\015\050\017\ufff7\026\047\001\002\000\004\020\156" +
    "\001\002\000\024\003\055\007\060\010\046\011\043\012" +
    "\053\014\044\015\050\017\ufff7\026\047\001\002\000\024" +
    "\003\055\007\060\010\046\011\043\012\053\014\044\015" +
    "\050\017\ufff7\026\047\001\002\000\004\017\153\001\002" +
    "\000\024\003\055\007\060\010\046\011\043\012\053\014" +
    "\044\015\050\017\ufff7\026\047\001\002\000\020\020\073" +
    "\025\061\026\063\027\067\031\071\034\062\047\072\001" +
    "\002\000\044\021\uffda\022\uffda\023\uffda\024\uffda\031\uffda" +
    "\032\uffda\033\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda\001\002" +
    "\000\004\026\151\001\002\000\050\020\140\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\031\uffd6\032\uffd6\033\uffd6\034\141" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\050\uffd6\001\002\000\044\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\031\uffdb\032\uffdb\033\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\050\uffdb\001\002\000\042\021\uffe0\022" +
    "\uffe0\023\uffe0\031\117\032\121\033\uffe0\036\120\037\115" +
    "\040\112\041\106\042\113\043\114\044\122\045\107\046" +
    "\123\050\111\001\002\000\004\017\ufff9\001\002\000\044" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\050\uffd9\001\002\000\012\021" +
    "\uffe6\022\uffe6\023\uffe6\033\103\001\002\000\004\026\101" +
    "\001\002\000\004\026\100\001\002\000\020\020\073\025" +
    "\061\026\063\027\067\031\071\034\062\047\072\001\002" +
    "\000\004\023\075\001\002\000\040\003\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\031\uffe9\034\uffe9\047\uffe9\001" +
    "\002\000\004\021\077\001\002\000\044\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\031\uffd8\032\uffd8\033\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\050\uffd8\001\002\000\044\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\031\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\050\uffdd\001\002\000\044\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\050\uffdc\001\002\000\010\021\uffe8\022\uffe8\023\uffe8\001" +
    "\002\000\020\020\073\025\061\026\063\027\067\031\071" +
    "\034\062\047\072\001\002\000\012\021\uffe6\022\uffe6\023" +
    "\uffe6\033\103\001\002\000\010\021\uffe7\022\uffe7\023\uffe7" +
    "\001\002\000\020\020\uffd3\025\uffd3\026\uffd3\027\uffd3\031" +
    "\uffd3\034\uffd3\047\uffd3\001\002\000\020\020\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\031\uffcf\034\uffcf\047\uffcf\001\002\000" +
    "\020\020\073\025\061\026\063\027\067\031\071\034\062" +
    "\047\072\001\002\000\020\020\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\034\uffcd\047\uffcd\001\002\000\020\020\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\031\uffd5\034\uffd5\047\uffd5\001" +
    "\002\000\020\020\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4" +
    "\034\uffd4\047\uffd4\001\002\000\020\020\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\031\uffd2\034\uffd2\047\uffd2\001\002\000\020" +
    "\020\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\034\uffd1\047" +
    "\uffd1\001\002\000\012\021\uffe5\022\uffe5\023\uffe5\033\uffe5" +
    "\001\002\000\020\020\073\025\061\026\063\027\067\031" +
    "\071\034\062\047\072\001\002\000\020\020\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\031\uffd0\034\uffd0\047\uffd0\001\002\000" +
    "\020\020\073\025\061\026\063\027\067\031\071\034\062" +
    "\047\072\001\002\000\020\020\073\025\061\026\063\027" +
    "\067\031\071\034\062\047\072\001\002\000\020\020\uffce" +
    "\025\uffce\026\uffce\027\uffce\031\uffce\034\uffce\047\uffce\001" +
    "\002\000\034\024\uffe0\031\117\032\121\036\120\037\115" +
    "\040\112\041\106\042\113\043\114\044\122\045\107\046" +
    "\123\050\111\001\002\000\004\024\126\001\002\000\020" +
    "\020\073\025\061\026\063\027\067\031\071\034\062\047" +
    "\072\001\002\000\044\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\031\117\032\121\033\uffe0\036\120\037\115\040\112\041" +
    "\106\042\113\043\114\044\122\045\107\046\123\050\111" +
    "\001\002\000\014\021\uffe1\022\uffe1\023\uffe1\024\uffe1\033" +
    "\uffe1\001\002\000\044\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\031\117\032\121\033\uffe0\036\120\037\115\040\112\041" +
    "\106\042\113\043\114\044\122\045\107\046\123\050\111" +
    "\001\002\000\014\021\uffe3\022\uffe3\023\uffe3\024\uffe3\033" +
    "\uffe3\001\002\000\044\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\031\117\032\121\033\uffe0\036\120\037\115\040\112\041" +
    "\106\042\113\043\114\044\122\045\107\046\123\050\111" +
    "\001\002\000\014\021\uffe4\022\uffe4\023\uffe4\024\uffe4\033" +
    "\uffe4\001\002\000\044\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\031\117\032\121\033\uffe0\036\120\037\115\040\112\041" +
    "\106\042\113\043\114\044\122\045\107\046\123\050\111" +
    "\001\002\000\014\021\uffe2\022\uffe2\023\uffe2\024\uffe2\033" +
    "\uffe2\001\002\000\044\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf" +
    "\001\002\000\022\020\073\021\uffb9\025\061\026\063\027" +
    "\067\031\071\034\062\047\072\001\002\000\044\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\031\uffd7\032\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\050\uffd7\001\002\000\004\021\uffba\001" +
    "\002\000\004\021\150\001\002\000\006\021\uffb6\022\145" +
    "\001\002\000\020\020\073\025\061\026\063\027\067\031" +
    "\071\034\062\047\072\001\002\000\004\021\uffb8\001\002" +
    "\000\004\021\uffb7\001\002\000\044\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\050\uffab\001\002\000\044\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\031\uffde\032\uffde\033\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\050\uffde\001\002\000\004\017\ufffc\001\002\000\014\002" +
    "\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\001\002\000\004" +
    "\017\ufff8\001\002\000\004\017\ufffd\001\002\000\020\020" +
    "\073\025\061\026\063\027\067\031\071\034\062\047\072" +
    "\001\002\000\004\021\160\001\002\000\004\016\161\001" +
    "\002\000\024\003\055\007\060\010\046\011\043\012\053" +
    "\014\044\015\050\017\ufff7\026\047\001\002\000\004\017" +
    "\163\001\002\000\026\003\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\164\014\ufff4\015\ufff4\017\ufff4\026\ufff4\001" +
    "\002\000\004\016\166\001\002\000\024\003\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\017\ufff6\026" +
    "\ufff6\001\002\000\024\003\055\007\060\010\046\011\043" +
    "\012\053\014\044\015\050\017\ufff7\026\047\001\002\000" +
    "\004\017\170\001\002\000\024\003\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\015\ufff5\017\ufff5\026\ufff5\001" +
    "\002\000\004\017\ufffa\001\002\000\004\017\ufffe\001\002" +
    "\000\004\030\174\001\002\000\004\022\175\001\002\000" +
    "\006\026\uffeb\047\176\001\002\000\004\026\uffec\001\002" +
    "\000\004\026\200\001\002\000\004\021\201\001\002\000" +
    "\004\023\202\001\002\000\024\003\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\014\uffed\015\uffed\017\uffed\026\uffed\001" +
    "\002\000\020\020\073\025\061\026\063\027\067\031\071" +
    "\034\062\047\072\001\002\000\040\003\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\025\uffea\026\uffea\027\uffea\031\uffea\034\uffea\047\uffea\001" +
    "\002\000\004\026\047\001\002\000\020\020\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\031\ufff1\034\ufff1\047\ufff1\001\002\000" +
    "\020\020\073\025\061\026\063\027\067\031\071\034\062" +
    "\047\072\001\002\000\020\020\073\025\061\026\063\027" +
    "\067\031\071\034\062\047\072\001\002\000\004\021\212" +
    "\001\002\000\004\016\213\001\002\000\024\003\055\007" +
    "\060\010\046\011\043\012\053\014\044\015\050\017\ufff7" +
    "\026\047\001\002\000\004\017\215\001\002\000\024\003" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\017\ufff2\026\ufff2\001\002\000\004\017\ufffb\001\002\000" +
    "\004\030\220\001\002\000\006\021\uffee\022\221\001\002" +
    "\000\020\020\073\025\061\026\063\027\067\031\071\034" +
    "\062\047\072\001\002\000\004\021\223\001\002\000\004" +
    "\023\224\001\002\000\024\003\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\026\ufff0\001\002" +
    "\000\004\021\uffef\001\002\000\020\020\073\025\061\026" +
    "\063\027\067\031\071\034\062\047\072\001\002\000\004" +
    "\021\230\001\002\000\004\016\231\001\002\000\024\003" +
    "\055\007\060\010\046\011\043\012\053\014\044\015\050" +
    "\017\ufff7\026\047\001\002\000\004\017\233\001\002\000" +
    "\024\003\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\026\ufff3\001\002\000\004\017\uffff\001" +
    "\002\000\006\022\uffc4\023\uffc4\001\002\000\006\004\006" +
    "\005\005\001\002\000\006\021\uffbc\022\241\001\002\000" +
    "\004\021\uffbf\001\002\000\006\004\006\005\005\001\002" +
    "\000\004\021\uffbd\001\002\000\004\021\uffbe\001\002\000" +
    "\006\026\uffc9\031\037\001\002\000\014\002\uffae\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\001\002\000\004\026\247\001" +
    "\002\000\006\022\uffad\023\uffad\001\002\000\004\002\001" +
    "\001\002\000\010\021\uffcc\022\uffcc\026\uffcc\001\002\000" +
    "\010\021\uffcb\022\uffcb\026\uffcb\001\002\000\014\002\uffb4" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\007\025\012\036\011\040\006\041" +
    "\003\001\001\000\010\025\012\036\011\040\252\001\001" +
    "\000\004\026\251\001\001\000\004\026\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\016\047\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\020\033\022\034\021\001\001\000\004\035" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\027\027\031\030\032\046\030\001\001\000\002" +
    "\001\001\000\020\003\055\006\053\010\050\011\041\012" +
    "\044\014\051\024\056\001\001\000\012\025\027\027\031" +
    "\030\032\046\040\001\001\000\002\001\001\000\004\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\233\006\053\010\050\011\041\012\044\014\051\024\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\215\006\053\010\050\011\041\012\044\014\051\024\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\171\006\053\010\050\011\041\012\044" +
    "\014\051\024\056\001\001\000\020\003\170\006\053\010" +
    "\050\011\041\012\044\014\051\024\056\001\001\000\002" +
    "\001\001\000\020\003\154\006\053\010\050\011\041\012" +
    "\044\014\051\024\056\001\001\000\020\003\153\006\053" +
    "\010\050\011\041\012\044\014\051\024\056\001\001\000" +
    "\002\001\001\000\020\003\151\006\053\010\050\011\041" +
    "\012\044\014\051\024\056\001\001\000\014\004\065\016" +
    "\073\020\067\022\064\043\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\136\001\001\000\002\001" +
    "\001\000\006\021\115\023\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\075\020\067\022\064" +
    "\043\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\103\022\064\043" +
    "\063\001\001\000\004\017\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\134\043" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\132\043\063\001\001\000\002\001\001" +
    "\000\006\022\130\043\063\001\001\000\006\022\123\043" +
    "\063\001\001\000\002\001\001\000\006\021\124\023\107" +
    "\001\001\000\002\001\001\000\006\022\126\043\063\001" +
    "\001\000\006\021\127\023\107\001\001\000\002\001\001" +
    "\000\006\021\131\023\107\001\001\000\002\001\001\000" +
    "\006\021\133\023\107\001\001\000\002\001\001\000\006" +
    "\021\135\023\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\143\020\067\022\064\031\141\043\063" +
    "\045\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\145\001\001\000\014\016\143" +
    "\020\067\022\064\031\146\043\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\156\020\067\022\064\043\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\161\006\053\010\050\011\041\012\044\014\051\024\056" +
    "\001\001\000\002\001\001\000\004\005\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\166\006\053" +
    "\010\050\011\041\012\044\014\051\024\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\203\016\073\020\067\022\064\043\063\001\001\000\002" +
    "\001\001\000\006\007\206\024\205\001\001\000\002\001" +
    "\001\000\014\004\207\016\073\020\067\022\064\043\063" +
    "\001\001\000\012\016\210\020\067\022\064\043\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\213" +
    "\006\053\010\050\011\041\012\044\014\051\024\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\221\001\001\000\012\016" +
    "\224\020\067\022\064\043\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\226\020\067\022\064\043\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\231\006\053\010" +
    "\050\011\041\012\044\014\051\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\020\034\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\020\034\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    TreeNode Tree;
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token }";
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    }

    public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.KEYINIT:
                return "{";
            case Sym.KEYFIN:
                return "}";
            case Sym.PARINIT:
                return "(";
            case Sym.PARFIN:
                return ")";
            default:
                return value;
        }
    }   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {


    Nodo arbol = new Nodo();
    int token = 0;
    int parNum = 0;


  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcs 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
        //arbol.crearArchivo();
        token++;
        TreeNode tn = new TreeNode("Inicio", null, token);
        tn.agregarHijo(f);
        /*for(TreeNode h : f.getHijos()){
            tn.agregarHijo(h);
        }*/
        tn.print();
        tn.escribirArchivo("}");
        for(int i = 0; i < errores.size(); i++){
            System.out.println("Error: " + errores.get(i));
        }
        Tree = tn;
        RESULT = tn;
    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(i);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              TreeNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode w = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(w);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;        

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= for statement 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= asig statement 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(a);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= printf statement 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(p);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= scanf statement 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(s);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= RETURN exp 
            {
              TreeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    token++;
    TreeNode rt = new TreeNode(r, null, token);
    rt.agregarHijo(e);
    tn.agregarHijo(rt);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= error statement 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    tn.agregarHijo(st);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("IF", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(s);
    tn.agregarHijo(t1);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Else", null, token);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("While", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode fe = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("For", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(e);
    tn.agregarHijo(fe);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // forid ::= asig 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = e;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // printf ::= PRINTF PARINIT CONSTSTR printfp PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode pf = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Printf", null, token);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(pf);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // printfp ::= COMMA finalexpression 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printfp",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // printfp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printfp",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scanf ::= SCANF PARINIT CONSTSTR COMMA amp IDE PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Scanf", null, token);
    token++;
    tn.agregarHijo(cs, token);
    tn.agregarHijo(a);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("scanf",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // amp ::= AMP 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(a, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // amp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asig ::= IDE OPASIG exp 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Asig", null, token);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(e);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asig",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= finalexpression SEMICOLON 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // finalexpression ::= ta arp 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Exp", null, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arp ::= OPSUM ta arp 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(s, null, token);
    //token++;
    //tn.agregarHijo(s, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ta ::= fa tap 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("T", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tap ::= OPMULT fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tap ::= OPDIV fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tap ::= oprel fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode o = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o.getVal(), null, token);
    //tn.agregarHijo(o);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tap ::= OPCOND fa tap COLON fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(f1);
    tn.agregarHijo(t1);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fa ::= IDE increment 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode in = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(in);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fa ::= OPINC IDE 
            {
              TreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(in, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fa ::= AMP IDE 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(a, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fa ::= OPMULT IDE 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(o, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fa ::= funccall 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fa ::= NUM 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Num", null, token);
    token++;
    tn.agregarHijo(n, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fa ::= CONSTCHAR 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ConstChar", null, token);
    token++;
    tn.agregarHijo(c, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fa ::= PARINIT finalexpression PARFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // increment ::= OPINC 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // increment ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // oprel ::= OPGRA 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // oprel ::= OPGRAEP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // oprel ::= OPLESS 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // oprel ::= OPLESSEQ 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // oprel ::= OPDIF 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // oprel ::= OPCOMP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // oprel ::= AND 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // oprel ::= OR 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // oprel ::= MOD 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= INTEGER typeap 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(ty);
    RESULT =  tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= CHARACTER typeap 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo",null, token);
    token++;
    tn.agregarHijo(ch, token);
    tn.agregarHijo(ty);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeap ::= OPMULT 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= decid SEMICOLON 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Declaracion", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declarations ::= declaration declarations 
            {
              TreeNode RESULT =null;
		int declaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int declaright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode decla = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Dec", null, token);
    tn.agregarHijo(decla);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declarations",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declarations ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declarations",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decid ::= decid COMMA typeap IDE 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Dec", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    //
    tn.agregarHijo(a);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    //tn.agregarHijo(de);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decid ::= type IDE 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("D", null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    //tn.agregarHijo(d);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typev ::= VOID 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(v, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typev ::= type 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT = t;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par ::= paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    parNum++;
    RESULT = p;


              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramst ::= type paramst2 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
        token++;
        TreeNode tn = new TreeNode("p", null, parNum);
        tn.agregarHijo(t);
        tn.agregarHijo(p);
        RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramst2 ::= COMMA paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT =  p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramst2 ::= IDE COMMA paramst 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("p", null, parNum);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paramst2 ::= IDE 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramst2 ::= 
            {
              TreeNode RESULT =null;
		 
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsI ::= params 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    parNum++;
    RESULT = p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsI",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsI ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsI",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // params ::= finalexpression paramsb 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("par", null, parNum);
    tn.agregarHijo(f);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramsb ::= COMMA params 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramsb ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funcs ::= func 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    token++;
    TreeNode tn = new TreeNode("Funciones", null, 0);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funcs ::= funcs func 
            {
              TreeNode RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode fs = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("Funciones", null, 0);
    
    tn.agregarHijo(fs);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // func ::= typev IDE funcdec 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode id =  new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    f.agregarHijoInicio(id);
    f.agregarHijoInicio(t);
    
    //tn.agregarHijo(p);

    //tn.agregarHijo(fb);
    /*for(TreeNode h : fb.getHijos()){
        tn.agregarHijo(h);
    }*/
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // func ::= error 
            {
              TreeNode RESULT =null;
		
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funcb ::= KEYINIT declarations statement KEYFIN 
            {
              TreeNode RESULT =null;
		int declaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int declaright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode decla = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Fn", null, token);
    //tn.agregarHijo(decla);
    for(TreeNode h : decla.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funcb ::= SEMICOLON 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funcdec ::= PARINIT par PARFIN funcb 
            {
              TreeNode RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode fb = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn;
    if(fb.getHijos().size() > 0){
        tn = new TreeNode("Funcion", null, token);
    }else{
        tn = new TreeNode("DecFuncion", null, token);
    }
    tn.agregarHijo(p);
    for(TreeNode h : fb.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcdec",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funcdec ::= declaration2 SEMICOLON 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("DecGlobal", null, token);
    for(TreeNode hijo : d.getHijos()){
        tn.agregarHijo(hijo);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcdec",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaration2 ::= declaration2 COMMA typeap IDE 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode ta = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Dec", null, token);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    token++;
    TreeNode id =  new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(ta);
    tn.agregarHijo(id);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration2",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaration2 ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration2",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funccall ::= IDE PARINIT paramsI PARFIN 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Funccall", null, token);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funccall",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
