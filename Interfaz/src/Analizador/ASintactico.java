
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\011\012\000\002\005\004\000\002\005" +
    "\006\000\002\005\002\000\002\010\011\000\002\006\013" +
    "\000\002\007\004\000\002\007\003\000\002\012\011\000" +
    "\002\013\012\000\002\014\003\000\002\014\002\000\002" +
    "\004\004\000\002\015\004\000\002\016\005\000\002\016" +
    "\002\000\002\017\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\010\000\002\020\002\000" +
    "\002\021\004\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\043\003\000\002\043" +
    "\002\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\024\004\000\002\024\004\000\002\025\003\000\002\025" +
    "\002\000\002\026\004\000\002\027\006\000\002\027\005" +
    "\000\002\030\004\000\002\030\002\000\002\036\003\000" +
    "\002\036\003\000\002\033\003\000\002\033\002\000\002" +
    "\034\004\000\002\035\004\000\002\035\005\000\002\035" +
    "\003\000\002\035\002\000\002\031\004\000\002\032\004" +
    "\000\002\032\002\000\002\040\004\000\002\040\002\000" +
    "\002\037\010\000\002\041\005\000\002\041\003\000\002" +
    "\042\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\012\002\uffb8\004\004\005\007\006\013\001" +
    "\002\000\012\021\uffcb\022\uffcb\026\uffcb\031\017\001\002" +
    "\000\004\026\020\001\002\000\004\002\000\001\002\000" +
    "\012\021\uffcb\022\uffcb\026\uffcb\031\017\001\002\000\004" +
    "\026\uffc4\001\002\000\012\002\uffb8\004\004\005\007\006" +
    "\013\001\002\000\004\002\014\001\002\000\004\026\uffc5" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffb9\001" +
    "\002\000\010\021\uffcd\022\uffcd\026\uffcd\001\002\000\010" +
    "\021\uffcc\022\uffcc\026\uffcc\001\002\000\004\020\021\001" +
    "\002\000\010\004\004\005\007\021\uffc2\001\002\000\004" +
    "\021\033\001\002\000\010\021\uffbd\022\025\026\026\001" +
    "\002\000\004\021\uffc3\001\002\000\006\004\004\005\007" +
    "\001\002\000\006\021\uffbe\022\030\001\002\000\004\021" +
    "\uffc1\001\002\000\006\004\004\005\007\001\002\000\004" +
    "\021\uffbf\001\002\000\004\021\uffc0\001\002\000\006\016" +
    "\036\023\034\001\002\000\012\002\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\001\002\000\012\002\uffb7\004\uffb7\005\uffb7\006" +
    "\uffb7\001\002\000\036\004\004\005\007\007\050\010\067" +
    "\011\044\012\054\014\055\015\047\017\ufff5\020\051\025" +
    "\057\026\040\027\065\034\043\001\002\000\036\004\004" +
    "\005\007\007\050\010\067\011\044\012\054\014\055\015" +
    "\047\017\ufff5\020\051\025\057\026\040\027\065\034\043" +
    "\001\002\000\042\020\235\023\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\106\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002\000" +
    "\004\017\234\001\002\000\006\022\230\023\231\001\002" +
    "\000\004\026\227\001\002\000\004\020\221\001\002\000" +
    "\004\023\220\001\002\000\004\026\214\001\002\000\004" +
    "\020\204\001\002\000\014\020\051\025\057\026\076\027" +
    "\065\034\043\001\002\000\014\020\051\025\057\026\076" +
    "\027\065\034\043\001\002\000\036\004\004\005\007\007" +
    "\050\010\067\011\044\012\054\014\055\015\047\017\ufff5" +
    "\020\051\025\057\026\040\027\065\034\043\001\002\000" +
    "\036\004\004\005\007\007\050\010\067\011\044\012\054" +
    "\014\055\015\047\017\ufff5\020\051\025\057\026\040\027" +
    "\065\034\043\001\002\000\004\020\163\001\002\000\004" +
    "\020\151\001\002\000\012\021\uffe5\022\uffe5\023\uffe5\033" +
    "\146\001\002\000\044\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\001\002\000\036\004\004\005\007\007\050\010\067\011" +
    "\044\012\054\014\055\015\047\017\ufff5\020\051\025\057" +
    "\026\040\027\065\034\043\001\002\000\036\004\004\005" +
    "\007\007\050\010\067\011\044\012\054\014\055\015\047" +
    "\017\ufff5\020\051\025\057\026\040\027\065\034\043\001" +
    "\002\000\036\004\004\005\007\007\050\010\067\011\044" +
    "\012\054\014\055\015\047\017\ufff5\020\051\025\057\026" +
    "\040\027\065\034\043\001\002\000\004\017\ufff8\001\002" +
    "\000\042\021\uffdf\022\uffdf\023\uffdf\031\121\032\123\033" +
    "\uffdf\035\124\036\122\037\120\040\114\041\112\042\115" +
    "\043\116\044\126\045\111\046\125\001\002\000\044\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\036\004\004" +
    "\005\007\007\050\010\067\011\044\012\054\014\055\015" +
    "\047\017\ufff5\020\051\025\057\026\040\027\065\034\043" +
    "\001\002\000\004\020\072\001\002\000\036\004\004\005" +
    "\007\007\050\010\067\011\044\012\054\014\055\015\047" +
    "\017\ufff5\020\051\025\057\026\040\027\065\034\043\001" +
    "\002\000\004\017\ufff9\001\002\000\010\004\004\005\007" +
    "\026\073\001\002\000\004\023\107\001\002\000\014\020" +
    "\051\025\057\026\076\027\065\034\043\001\002\000\014" +
    "\020\uffed\025\uffed\026\uffed\027\uffed\034\uffed\001\002\000" +
    "\046\021\uffd8\022\uffd8\023\uffd8\024\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\106\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002" +
    "\000\014\020\051\025\057\026\076\027\065\034\043\001" +
    "\002\000\004\021\101\001\002\000\004\016\102\001\002" +
    "\000\036\004\004\005\007\007\050\010\067\011\044\012" +
    "\054\014\055\015\047\017\ufff5\020\051\025\057\026\040" +
    "\027\065\034\043\001\002\000\004\017\104\001\002\000" +
    "\036\004\uffef\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\014\uffef\015\uffef\017\uffef\020\uffef\025\uffef\026\uffef\027" +
    "\uffef\034\uffef\001\002\000\044\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\031\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\001\002\000\044\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\001\002\000\014\020\uffee\025\uffee\026\uffee\027\uffee" +
    "\034\uffee\001\002\000\004\017\ufffb\001\002\000\014\020" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\034\uffd0\001\002\000\014" +
    "\020\uffd5\025\uffd5\026\uffd5\027\uffd5\034\uffd5\001\002\000" +
    "\014\020\051\025\057\026\076\027\065\034\043\001\002" +
    "\000\014\020\uffd7\025\uffd7\026\uffd7\027\uffd7\034\uffd7\001" +
    "\002\000\014\020\uffd6\025\uffd6\026\uffd6\027\uffd6\034\uffd6" +
    "\001\002\000\014\020\uffd4\025\uffd4\026\uffd4\027\uffd4\034" +
    "\uffd4\001\002\000\012\021\uffe4\022\uffe4\023\uffe4\033\uffe4" +
    "\001\002\000\014\020\uffd2\025\uffd2\026\uffd2\027\uffd2\034" +
    "\uffd2\001\002\000\014\020\051\025\057\026\076\027\065" +
    "\034\043\001\002\000\014\020\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\034\uffd1\001\002\000\014\020\051\025\057\026\076" +
    "\027\065\034\043\001\002\000\014\020\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\034\uffd3\001\002\000\014\020\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\034\uffcf\001\002\000\014\020\051\025" +
    "\057\026\076\027\065\034\043\001\002\000\034\024\uffdf" +
    "\031\121\032\123\035\124\036\122\037\120\040\114\041" +
    "\112\042\115\043\116\044\126\045\111\046\125\001\002" +
    "\000\004\024\131\001\002\000\014\020\051\025\057\026" +
    "\076\027\065\034\043\001\002\000\044\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\031\121\032\123\033\uffdf\035\124\036" +
    "\122\037\120\040\114\041\112\042\115\043\116\044\126" +
    "\045\111\046\125\001\002\000\014\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\033\uffe0\001\002\000\044\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\031\121\032\123\033\uffdf\035\124\036" +
    "\122\037\120\040\114\041\112\042\115\043\116\044\126" +
    "\045\111\046\125\001\002\000\014\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\033\uffe2\001\002\000\044\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\031\121\032\123\033\uffdf\035\124\036" +
    "\122\037\120\040\114\041\112\042\115\043\116\044\126" +
    "\045\111\046\125\001\002\000\014\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\033\uffe3\001\002\000\044\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\031\121\032\123\033\uffdf\035\124\036" +
    "\122\037\120\040\114\041\112\042\115\043\116\044\126" +
    "\045\111\046\125\001\002\000\014\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\033\uffe1\001\002\000\004\017\ufffe\001\002" +
    "\000\004\017\ufffa\001\002\000\004\017\uffff\001\002\000" +
    "\010\021\uffe7\022\uffe7\023\uffe7\001\002\000\014\020\051" +
    "\025\057\026\076\027\065\034\043\001\002\000\012\021" +
    "\uffe5\022\uffe5\023\uffe5\033\146\001\002\000\010\021\uffe6" +
    "\022\uffe6\023\uffe6\001\002\000\004\030\152\001\002\000" +
    "\004\022\153\001\002\000\014\020\051\025\057\026\076" +
    "\027\065\034\043\001\002\000\004\021\161\001\002\000" +
    "\006\021\uffba\022\156\001\002\000\014\020\051\025\057" +
    "\026\076\027\065\034\043\001\002\000\004\021\uffbc\001" +
    "\002\000\004\021\uffbb\001\002\000\004\023\162\001\002" +
    "\000\036\004\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\017\uffec\020\uffec\025\uffec\026\uffec" +
    "\027\uffec\034\uffec\001\002\000\014\020\051\025\057\026" +
    "\076\027\065\034\043\001\002\000\004\021\165\001\002" +
    "\000\004\016\166\001\002\000\036\004\004\005\007\007" +
    "\050\010\067\011\044\012\054\014\055\015\047\017\ufff5" +
    "\020\051\025\057\026\040\027\065\034\043\001\002\000" +
    "\004\017\170\001\002\000\040\004\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\171\014\ufff1\015\ufff1\017" +
    "\ufff1\020\ufff1\025\ufff1\026\ufff1\027\ufff1\034\ufff1\001\002" +
    "\000\006\012\054\016\174\001\002\000\036\004\ufff4\005" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\025\ufff4\026\ufff4\027\ufff4\034\ufff4\001" +
    "\002\000\036\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\034\ufff3\001\002\000\036\004\004\005\007" +
    "\007\050\010\067\011\044\012\054\014\055\015\047\017" +
    "\ufff5\020\051\025\057\026\040\027\065\034\043\001\002" +
    "\000\004\017\176\001\002\000\036\004\ufff2\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\020\ufff2\025\ufff2\026\ufff2\027\ufff2\034\ufff2\001\002\000" +
    "\004\017\ufff6\001\002\000\004\017\ufffd\001\002\000\004" +
    "\021\202\001\002\000\044\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\001\002\000\004\017\ufff7\001\002\000\004\030\205" +
    "\001\002\000\004\022\206\001\002\000\006\026\uffe9\047" +
    "\207\001\002\000\004\026\uffea\001\002\000\004\026\211" +
    "\001\002\000\004\021\212\001\002\000\004\023\213\001" +
    "\002\000\004\017\uffeb\001\002\000\010\022\uffc6\023\uffc6" +
    "\035\216\001\002\000\006\022\uffc8\023\uffc8\001\002\000" +
    "\014\020\051\025\057\026\076\027\065\034\043\001\002" +
    "\000\006\022\uffc7\023\uffc7\001\002\000\036\004\uffe8\005" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\025\uffe8\026\uffe8\027\uffe8\034\uffe8\001" +
    "\002\000\014\020\051\025\057\026\076\027\065\034\043" +
    "\001\002\000\004\021\223\001\002\000\004\016\224\001" +
    "\002\000\036\004\004\005\007\007\050\010\067\011\044" +
    "\012\054\014\055\015\047\017\ufff5\020\051\025\057\026" +
    "\040\027\065\034\043\001\002\000\004\017\226\001\002" +
    "\000\036\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\034\ufff0\001\002\000\044\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\001\002\000\004\026\232\001\002\000\036" +
    "\004\uffca\005\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014" +
    "\uffca\015\uffca\017\uffca\020\uffca\025\uffca\026\uffca\027\uffca" +
    "\034\uffca\001\002\000\010\022\uffc6\023\uffc6\035\216\001" +
    "\002\000\006\022\uffc9\023\uffc9\001\002\000\012\002\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\001\002\000\014\020\051\025" +
    "\057\026\076\027\065\034\043\001\002\000\004\021\237" +
    "\001\002\000\004\023\240\001\002\000\036\004\uffb4\005" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\017\uffb4\020\uffb4\025\uffb4\026\uffb4\027\uffb4\034\uffb4\001" +
    "\002\000\004\017\ufffc\001\002\000\010\021\uffce\022\uffce" +
    "\026\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\014\002\011\024\007\036\004\037\010\040" +
    "\005\001\001\000\004\025\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\015\001\001\000\002\001" +
    "\001\000\012\024\007\036\004\037\010\040\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\022\033\021\034\023\001\001\000" +
    "\002\001\001\000\004\035\026\001\001\000\002\001\001" +
    "\000\006\024\022\034\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\022\034\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\040\004\051" +
    "\006\065\010\061\011\057\012\067\013\062\015\044\017" +
    "\055\021\063\023\060\024\045\026\036\027\041\042\052" +
    "\001\001\000\040\003\240\004\051\006\065\010\061\011" +
    "\057\012\067\013\062\015\044\017\055\021\063\023\060" +
    "\024\045\026\036\027\041\042\052\001\001\000\004\043" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\202\015\044\017\055" +
    "\021\063\001\001\000\010\015\200\017\055\021\063\001" +
    "\001\000\040\003\177\004\051\006\065\010\061\011\057" +
    "\012\067\013\062\015\044\017\055\021\063\023\060\024" +
    "\045\026\036\027\041\042\052\001\001\000\040\003\176" +
    "\004\051\006\065\010\061\011\057\012\067\013\062\015" +
    "\044\017\055\021\063\023\060\024\045\026\036\027\041" +
    "\042\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\144\001\001\000\002\001\001\000\040\003\143" +
    "\004\051\006\065\010\061\011\057\012\067\013\062\015" +
    "\044\017\055\021\063\023\060\024\045\026\036\027\041" +
    "\042\052\001\001\000\040\003\142\004\051\006\065\010" +
    "\061\011\057\012\067\013\062\015\044\017\055\021\063" +
    "\023\060\024\045\026\036\027\041\042\052\001\001\000" +
    "\040\003\141\004\051\006\065\010\061\011\057\012\067" +
    "\013\062\015\044\017\055\021\063\023\060\024\045\026" +
    "\036\027\041\042\052\001\001\000\002\001\001\000\006" +
    "\020\116\022\112\001\001\000\002\001\001\000\040\003" +
    "\107\004\051\006\065\010\061\011\057\012\067\013\062" +
    "\015\044\017\055\021\063\023\060\024\045\026\036\027" +
    "\041\042\052\001\001\000\002\001\001\000\040\003\070" +
    "\004\051\006\065\010\061\011\057\012\067\013\062\015" +
    "\044\017\055\021\063\023\060\024\045\026\036\027\041" +
    "\042\052\001\001\000\002\001\001\000\012\007\073\024" +
    "\045\026\074\027\041\001\001\000\002\001\001\000\012" +
    "\004\076\015\044\017\055\021\063\001\001\000\002\001" +
    "\001\000\004\043\104\001\001\000\010\015\077\017\055" +
    "\021\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\102\004\051\006\065\010\061\011\057\012\067" +
    "\013\062\015\044\017\055\021\063\023\060\024\045\026" +
    "\036\027\041\042\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\135\001\001\000\002\001\001\000\004\021" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\126\001\001\000\006\020\127\022\112\001\001\000" +
    "\002\001\001\000\004\021\131\001\001\000\006\020\132" +
    "\022\112\001\001\000\002\001\001\000\006\020\134\022" +
    "\112\001\001\000\002\001\001\000\006\020\136\022\112" +
    "\001\001\000\002\001\001\000\006\020\140\022\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\146\021" +
    "\063\001\001\000\004\016\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\154\017" +
    "\055\021\063\031\153\001\001\000\002\001\001\000\004" +
    "\032\156\001\001\000\012\015\154\017\055\021\063\031" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\163\017\055\021" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\166\004\051\006\065\010\061\011\057\012\067\013" +
    "\062\015\044\017\055\021\063\023\060\024\045\026\036" +
    "\027\041\042\052\001\001\000\002\001\001\000\004\005" +
    "\171\001\001\000\004\011\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\174\004\051\006\065\010" +
    "\061\011\057\012\067\013\062\015\044\017\055\021\063" +
    "\023\060\024\045\026\036\027\041\042\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\214" +
    "\001\001\000\002\001\001\000\010\015\216\017\055\021" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\221\017\055\021\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\224\004\051\006\065\010\061" +
    "\011\057\012\067\013\062\015\044\017\055\021\063\023" +
    "\060\024\045\026\036\027\041\042\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\154\017\055\021" +
    "\063\031\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {




  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcs 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= exp statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= declaration statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= asig statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= printf statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= scanf 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= RETURN exp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= funccall statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t ::= ELSE if 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // forid ::= IDE SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // forid ::= declaration 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // printf ::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // scanf ::= SCANF PARINIT CONSTSTR COMMA amp IDE PARFIN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("scanf",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // amp ::= AMP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // amp ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= finalexpression SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // finalexpression ::= ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arp ::= OPSUM ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arp ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ta ::= fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tap ::= OPMULT fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tap ::= OPDIV fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tap ::= oprel fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tap ::= OPCOND fa tap COLON fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tap ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fa ::= IDE increment 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fa ::= OPINC IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fa ::= NUM 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fa ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fa ::= PARINIT finalexpression PARFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // increment ::= OPINC 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // increment ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // oprel ::= OPGRA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // oprel ::= OPGRAEP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // oprel ::= OPLESS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // oprel ::= OPLESSEQ 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // oprel ::= OPASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // oprel ::= OPDIF 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // oprel ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // oprel ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // oprel ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= INTEGER typeap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= CHARACTER typeap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typeap ::= OPMULT 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typeap ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= decid SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decid ::= decid COMMA IDE decasig 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decid ::= type IDE decasig 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decasig ::= OPASIG finalexpression 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decasig ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typev ::= VOID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typev ::= type 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // par ::= paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramst ::= type paramst2 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramst2 ::= COMMA paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramst2 ::= IDE COMMA paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramst2 ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramst2 ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // params ::= finalexpression paramsb 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramsb ::= COMMA params 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsb ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcs ::= func funcs 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcs ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func ::= typev IDE PARINIT par PARFIN funcb 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funcb ::= KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funcb ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funccall ::= IDE PARINIT params PARFIN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funccall",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
