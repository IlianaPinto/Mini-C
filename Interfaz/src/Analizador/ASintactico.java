
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\002\000\002\011\012\000\002\005" +
    "\004\000\002\005\006\000\002\005\002\000\002\010\011" +
    "\000\002\006\013\000\002\007\004\000\002\007\003\000" +
    "\002\012\010\000\002\013\004\000\002\013\002\000\002" +
    "\014\012\000\002\015\003\000\002\015\002\000\002\004" +
    "\004\000\002\016\004\000\002\017\005\000\002\017\002" +
    "\000\002\020\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\010\000\002\021\002\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\044\003\000\002\044\002" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\025" +
    "\004\000\002\025\004\000\002\026\003\000\002\026\002" +
    "\000\002\027\004\000\002\030\006\000\002\030\005\000" +
    "\002\031\004\000\002\031\002\000\002\037\003\000\002" +
    "\037\003\000\002\034\003\000\002\034\002\000\002\035" +
    "\004\000\002\036\004\000\002\036\005\000\002\036\003" +
    "\000\002\036\002\000\002\045\003\000\002\045\002\000" +
    "\002\032\004\000\002\033\004\000\002\033\002\000\002" +
    "\041\003\000\002\041\004\000\002\040\010\000\002\040" +
    "\003\000\002\042\005\000\002\042\003\000\002\043\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\012\003\014\004\006\005\005\006\011\001" +
    "\002\000\014\002\000\003\014\004\006\005\005\006\011" +
    "\001\002\000\012\021\uffc8\022\uffc8\026\uffc8\031\246\001" +
    "\002\000\012\021\uffc8\022\uffc8\026\uffc8\031\246\001\002" +
    "\000\014\002\uffb4\003\uffb4\004\uffb4\005\uffb4\006\uffb4\001" +
    "\002\000\004\002\244\001\002\000\004\026\uffc2\001\002" +
    "\000\004\026\015\001\002\000\004\026\uffc1\001\002\000" +
    "\014\002\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\001\002" +
    "\000\004\020\016\001\002\000\010\004\006\005\005\021" +
    "\uffbf\001\002\000\004\021\030\001\002\000\010\021\uffba" +
    "\022\022\026\023\001\002\000\004\021\uffc0\001\002\000" +
    "\006\004\006\005\005\001\002\000\006\021\uffbb\022\025" +
    "\001\002\000\004\021\uffbe\001\002\000\006\004\006\005" +
    "\005\001\002\000\004\021\uffbc\001\002\000\004\021\uffbd" +
    "\001\002\000\006\016\033\023\031\001\002\000\014\002" +
    "\uffaf\003\uffaf\004\uffaf\005\uffaf\006\uffaf\001\002\000\014" +
    "\002\uffb2\003\uffb2\004\uffb2\005\uffb2\006\uffb2\001\002\000" +
    "\040\003\063\004\006\005\005\007\045\010\065\011\043" +
    "\012\051\014\052\015\044\017\ufff4\020\046\025\054\026" +
    "\035\027\062\034\040\001\002\000\040\003\063\004\006" +
    "\005\005\007\045\010\065\011\043\012\051\014\052\015" +
    "\044\017\ufff4\020\046\025\054\026\035\027\062\034\040" +
    "\001\002\000\042\020\232\023\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\104\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000" +
    "\004\017\231\001\002\000\006\022\225\023\226\001\002" +
    "\000\004\026\224\001\002\000\004\023\223\001\002\000" +
    "\004\026\217\001\002\000\004\020\211\001\002\000\004" +
    "\020\201\001\002\000\014\020\046\025\054\026\074\027" +
    "\062\034\040\001\002\000\014\020\046\025\054\026\074" +
    "\027\062\034\040\001\002\000\040\003\063\004\006\005" +
    "\005\007\045\010\065\011\043\012\051\014\052\015\044" +
    "\017\ufff4\020\046\025\054\026\035\027\062\034\040\001" +
    "\002\000\040\003\063\004\006\005\005\007\045\010\065" +
    "\011\043\012\051\014\052\015\044\017\ufff4\020\046\025" +
    "\054\026\035\027\062\034\040\001\002\000\004\020\160" +
    "\001\002\000\004\020\151\001\002\000\012\021\uffe2\022" +
    "\uffe2\023\uffe2\033\146\001\002\000\044\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\001\002\000\040\003\063\004\006\005" +
    "\005\007\045\010\065\011\043\012\051\014\052\015\044" +
    "\017\ufff4\020\046\025\054\026\035\027\062\034\040\001" +
    "\002\000\040\003\063\004\006\005\005\007\045\010\065" +
    "\011\043\012\051\014\052\015\044\017\ufff4\020\046\025" +
    "\054\026\035\027\062\034\040\001\002\000\040\003\063" +
    "\004\006\005\005\007\045\010\065\011\043\012\051\014" +
    "\052\015\044\017\ufff4\020\046\025\054\026\035\027\062" +
    "\034\040\001\002\000\040\003\063\004\006\005\005\007" +
    "\045\010\065\011\043\012\051\014\052\015\044\017\ufff4" +
    "\020\046\025\054\026\035\027\062\034\040\001\002\000" +
    "\042\021\uffdc\022\uffdc\023\uffdc\031\120\032\122\033\uffdc" +
    "\035\123\036\121\037\117\040\113\041\111\042\114\043" +
    "\115\044\125\045\110\046\124\001\002\000\044\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\031\uffd8\032\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\001\002\000\040\003\063\004" +
    "\006\005\005\007\045\010\065\011\043\012\051\014\052" +
    "\015\044\017\ufff4\020\046\025\054\026\035\027\062\034" +
    "\040\001\002\000\040\003\063\004\006\005\005\007\045" +
    "\010\065\011\043\012\051\014\052\015\044\017\ufff4\020" +
    "\046\025\054\026\035\027\062\034\040\001\002\000\004" +
    "\020\070\001\002\000\040\003\063\004\006\005\005\007" +
    "\045\010\065\011\043\012\051\014\052\015\044\017\ufff4" +
    "\020\046\025\054\026\035\027\062\034\040\001\002\000" +
    "\004\017\ufff9\001\002\000\010\004\006\005\005\026\071" +
    "\001\002\000\004\023\105\001\002\000\014\020\046\025" +
    "\054\026\074\027\062\034\040\001\002\000\014\020\uffec" +
    "\025\uffec\026\uffec\027\uffec\034\uffec\001\002\000\046\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\104\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\014" +
    "\020\046\025\054\026\074\027\062\034\040\001\002\000" +
    "\004\021\077\001\002\000\004\016\100\001\002\000\040" +
    "\003\063\004\006\005\005\007\045\010\065\011\043\012" +
    "\051\014\052\015\044\017\ufff4\020\046\025\054\026\035" +
    "\027\062\034\040\001\002\000\004\017\102\001\002\000" +
    "\040\003\uffee\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\014\uffee\015\uffee\017\uffee\020\uffee\025\uffee\026" +
    "\uffee\027\uffee\034\uffee\001\002\000\044\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\001\002\000\044\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\001\002\000\014\020\uffed\025\uffed\026\uffed" +
    "\027\uffed\034\uffed\001\002\000\004\017\ufffb\001\002\000" +
    "\004\017\ufff5\001\002\000\014\020\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\034\uffcd\001\002\000\014\020\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\034\uffd2\001\002\000\014\020\046\025\054" +
    "\026\074\027\062\034\040\001\002\000\014\020\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\034\uffd4\001\002\000\014\020\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\034\uffd3\001\002\000\014\020" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\034\uffd1\001\002\000\012" +
    "\021\uffe1\022\uffe1\023\uffe1\033\uffe1\001\002\000\014\020" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\034\uffcf\001\002\000\014" +
    "\020\046\025\054\026\074\027\062\034\040\001\002\000" +
    "\014\020\uffce\025\uffce\026\uffce\027\uffce\034\uffce\001\002" +
    "\000\014\020\046\025\054\026\074\027\062\034\040\001" +
    "\002\000\014\020\uffd0\025\uffd0\026\uffd0\027\uffd0\034\uffd0" +
    "\001\002\000\014\020\uffcc\025\uffcc\026\uffcc\027\uffcc\034" +
    "\uffcc\001\002\000\014\020\046\025\054\026\074\027\062" +
    "\034\040\001\002\000\034\024\uffdc\031\120\032\122\035" +
    "\123\036\121\037\117\040\113\041\111\042\114\043\115" +
    "\044\125\045\110\046\124\001\002\000\004\024\130\001" +
    "\002\000\014\020\046\025\054\026\074\027\062\034\040" +
    "\001\002\000\044\021\uffdc\022\uffdc\023\uffdc\024\uffdc\031" +
    "\120\032\122\033\uffdc\035\123\036\121\037\117\040\113" +
    "\041\111\042\114\043\115\044\125\045\110\046\124\001" +
    "\002\000\014\021\uffdd\022\uffdd\023\uffdd\024\uffdd\033\uffdd" +
    "\001\002\000\044\021\uffdc\022\uffdc\023\uffdc\024\uffdc\031" +
    "\120\032\122\033\uffdc\035\123\036\121\037\117\040\113" +
    "\041\111\042\114\043\115\044\125\045\110\046\124\001" +
    "\002\000\014\021\uffdf\022\uffdf\023\uffdf\024\uffdf\033\uffdf" +
    "\001\002\000\044\021\uffdc\022\uffdc\023\uffdc\024\uffdc\031" +
    "\120\032\122\033\uffdc\035\123\036\121\037\117\040\113" +
    "\041\111\042\114\043\115\044\125\045\110\046\124\001" +
    "\002\000\014\021\uffe0\022\uffe0\023\uffe0\024\uffe0\033\uffe0" +
    "\001\002\000\044\021\uffdc\022\uffdc\023\uffdc\024\uffdc\031" +
    "\120\032\122\033\uffdc\035\123\036\121\037\117\040\113" +
    "\041\111\042\114\043\115\044\125\045\110\046\124\001" +
    "\002\000\014\021\uffde\022\uffde\023\uffde\024\uffde\033\uffde" +
    "\001\002\000\004\017\ufff8\001\002\000\004\017\ufffe\001" +
    "\002\000\004\017\ufffa\001\002\000\004\017\uffff\001\002" +
    "\000\010\021\uffe4\022\uffe4\023\uffe4\001\002\000\014\020" +
    "\046\025\054\026\074\027\062\034\040\001\002\000\012" +
    "\021\uffe2\022\uffe2\023\uffe2\033\146\001\002\000\010\021" +
    "\uffe3\022\uffe3\023\uffe3\001\002\000\004\030\152\001\002" +
    "\000\006\021\uffe9\022\153\001\002\000\014\020\046\025" +
    "\054\026\074\027\062\034\040\001\002\000\004\021\155" +
    "\001\002\000\004\023\156\001\002\000\040\003\uffeb\004" +
    "\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\025\uffeb\026\uffeb\027\uffeb\034" +
    "\uffeb\001\002\000\004\021\uffea\001\002\000\014\020\046" +
    "\025\054\026\074\027\062\034\040\001\002\000\004\021" +
    "\162\001\002\000\004\016\163\001\002\000\040\003\063" +
    "\004\006\005\005\007\045\010\065\011\043\012\051\014" +
    "\052\015\044\017\ufff4\020\046\025\054\026\035\027\062" +
    "\034\040\001\002\000\004\017\165\001\002\000\042\003" +
    "\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\166\014\ufff0\015\ufff0\017\ufff0\020\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\034\ufff0\001\002\000\006\012\051\016\171" +
    "\001\002\000\040\003\ufff3\004\ufff3\005\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\034\ufff3\001\002\000\040\003" +
    "\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\015\ufff2\017\ufff2\020\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\034\ufff2\001\002\000\040\003\063\004\006\005\005" +
    "\007\045\010\065\011\043\012\051\014\052\015\044\017" +
    "\ufff4\020\046\025\054\026\035\027\062\034\040\001\002" +
    "\000\004\017\173\001\002\000\040\003\ufff1\004\ufff1\005" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\025\ufff1\026\ufff1\027\ufff1\034\ufff1\001" +
    "\002\000\004\017\ufff6\001\002\000\004\017\ufffd\001\002" +
    "\000\004\021\177\001\002\000\044\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\001\002\000\004\017\ufff7\001\002\000\004" +
    "\030\202\001\002\000\004\022\203\001\002\000\006\026" +
    "\uffe6\047\204\001\002\000\004\026\uffe7\001\002\000\004" +
    "\026\206\001\002\000\004\021\207\001\002\000\004\023" +
    "\210\001\002\000\040\003\uffe8\004\uffe8\005\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\034\uffe8\001\002\000\014" +
    "\020\046\025\054\026\074\027\062\034\040\001\002\000" +
    "\004\021\213\001\002\000\004\016\214\001\002\000\040" +
    "\003\063\004\006\005\005\007\045\010\065\011\043\012" +
    "\051\014\052\015\044\017\ufff4\020\046\025\054\026\035" +
    "\027\062\034\040\001\002\000\004\017\216\001\002\000" +
    "\040\003\uffef\004\uffef\005\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\017\uffef\020\uffef\025\uffef\026" +
    "\uffef\027\uffef\034\uffef\001\002\000\010\022\uffc3\023\uffc3" +
    "\035\221\001\002\000\006\022\uffc5\023\uffc5\001\002\000" +
    "\014\020\046\025\054\026\074\027\062\034\040\001\002" +
    "\000\006\022\uffc4\023\uffc4\001\002\000\040\003\uffe5\004" +
    "\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\017\uffe5\020\uffe5\025\uffe5\026\uffe5\027\uffe5\034" +
    "\uffe5\001\002\000\044\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\001\002\000\004\026\227\001\002\000\040\003\uffc7\004" +
    "\uffc7\005\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\025\uffc7\026\uffc7\027\uffc7\034" +
    "\uffc7\001\002\000\010\022\uffc3\023\uffc3\035\221\001\002" +
    "\000\006\022\uffc6\023\uffc6\001\002\000\014\002\uffb0\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\001\002\000\016\020\046" +
    "\021\uffb8\025\054\026\074\027\062\034\040\001\002\000" +
    "\004\021\uffb9\001\002\000\004\021\241\001\002\000\006" +
    "\021\uffb5\022\236\001\002\000\014\020\046\025\054\026" +
    "\074\027\062\034\040\001\002\000\004\021\uffb7\001\002" +
    "\000\004\021\uffb6\001\002\000\004\023\242\001\002\000" +
    "\040\003\uffae\004\uffae\005\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\014\uffae\015\uffae\017\uffae\020\uffae\025\uffae\026" +
    "\uffae\027\uffae\034\uffae\001\002\000\004\017\ufffc\001\002" +
    "\000\004\002\001\001\002\000\010\021\uffcb\022\uffcb\026" +
    "\uffcb\001\002\000\010\021\uffc9\022\uffc9\026\uffc9\001\002" +
    "\000\010\021\uffca\022\uffca\026\uffca\001\002\000\014\002" +
    "\uffb3\003\uffb3\004\uffb3\005\uffb3\006\uffb3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\014\002\007\025\012\037\011\040\006\041" +
    "\003\001\001\000\010\025\012\037\011\040\247\001\001" +
    "\000\004\026\246\001\001\000\004\026\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\017\034\016\035\020\001\001\000\002" +
    "\001\001\000\004\036\023\001\001\000\002\001\001\000" +
    "\006\025\017\035\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\017\035\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\035\004\046\006" +
    "\063\010\056\011\054\012\065\014\057\016\040\020\052" +
    "\022\060\024\055\025\041\027\033\030\036\043\047\001" +
    "\001\000\040\003\242\004\046\006\063\010\056\011\054" +
    "\012\065\014\057\016\040\020\052\022\060\024\055\025" +
    "\041\027\033\030\036\043\047\001\001\000\004\044\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\177\016\040\020\052\022" +
    "\060\001\001\000\010\016\175\020\052\022\060\001\001" +
    "\000\040\003\174\004\046\006\063\010\056\011\054\012" +
    "\065\014\057\016\040\020\052\022\060\024\055\025\041" +
    "\027\033\030\036\043\047\001\001\000\040\003\173\004" +
    "\046\006\063\010\056\011\054\012\065\014\057\016\040" +
    "\020\052\022\060\024\055\025\041\027\033\030\036\043" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\144\001\001\000\002\001\001\000\040\003\143\004" +
    "\046\006\063\010\056\011\054\012\065\014\057\016\040" +
    "\020\052\022\060\024\055\025\041\027\033\030\036\043" +
    "\047\001\001\000\040\003\142\004\046\006\063\010\056" +
    "\011\054\012\065\014\057\016\040\020\052\022\060\024" +
    "\055\025\041\027\033\030\036\043\047\001\001\000\040" +
    "\003\141\004\046\006\063\010\056\011\054\012\065\014" +
    "\057\016\040\020\052\022\060\024\055\025\041\027\033" +
    "\030\036\043\047\001\001\000\040\003\140\004\046\006" +
    "\063\010\056\011\054\012\065\014\057\016\040\020\052" +
    "\022\060\024\055\025\041\027\033\030\036\043\047\001" +
    "\001\000\006\021\115\023\111\001\001\000\002\001\001" +
    "\000\040\003\106\004\046\006\063\010\056\011\054\012" +
    "\065\014\057\016\040\020\052\022\060\024\055\025\041" +
    "\027\033\030\036\043\047\001\001\000\040\003\105\004" +
    "\046\006\063\010\056\011\054\012\065\014\057\016\040" +
    "\020\052\022\060\024\055\025\041\027\033\030\036\043" +
    "\047\001\001\000\002\001\001\000\040\003\066\004\046" +
    "\006\063\010\056\011\054\012\065\014\057\016\040\020" +
    "\052\022\060\024\055\025\041\027\033\030\036\043\047" +
    "\001\001\000\002\001\001\000\012\007\071\025\041\027" +
    "\072\030\036\001\001\000\002\001\001\000\012\004\074" +
    "\016\040\020\052\022\060\001\001\000\002\001\001\000" +
    "\004\044\102\001\001\000\010\016\075\020\052\022\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\100\004\046\006\063\010\056\011\054\012\065\014\057" +
    "\016\040\020\052\022\060\024\055\025\041\027\033\030" +
    "\036\043\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\134\001\001\000\002\001\001\000" +
    "\004\022\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\125\001\001\000\006\021\126\023\111\001" +
    "\001\000\002\001\001\000\004\022\130\001\001\000\006" +
    "\021\131\023\111\001\001\000\002\001\001\000\006\021" +
    "\133\023\111\001\001\000\002\001\001\000\006\021\135" +
    "\023\111\001\001\000\002\001\001\000\006\021\137\023" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\146\022\060\001\001\000\004\017\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\153\001\001\000\010\016\156\020\052\022\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\160\020\052\022\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\163\004" +
    "\046\006\063\010\056\011\054\012\065\014\057\016\040" +
    "\020\052\022\060\024\055\025\041\027\033\030\036\043" +
    "\047\001\001\000\002\001\001\000\004\005\166\001\001" +
    "\000\004\011\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\171\004\046\006\063\010\056\011\054" +
    "\012\065\014\057\016\040\020\052\022\060\024\055\025" +
    "\041\027\033\030\036\043\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\211\020\052\022" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\214\004\046\006\063\010\056\011\054\012\065\014" +
    "\057\016\040\020\052\022\060\024\055\025\041\027\033" +
    "\030\036\043\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\217\001\001\000\002\001\001\000\010" +
    "\016\221\020\052\022\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\234\020\052\022\060\032\232" +
    "\045\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\236\001\001\000\012\016\234\020\052\022\060" +
    "\032\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token }";
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    }

    public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.KEYINIT:
                return "{";
            case Sym.KEYFIN:
                return "}";
            case Sym.PARINIT:
                return "(";
            case Sym.PARFIN:
                return ")";
            default:
                return value;
        }
    }   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {


    Nodo arbol = new Nodo();
    int token = 0;
    int parNum = 0;


  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcs 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
        //arbol.crearArchivo();
        token++;
        TreeNode tn = new TreeNode("Inicio", null, token);
        tn.agregarHijo(f);
        /*for(TreeNode h : f.getHijos()){
            tn.agregarHijo(h);
        }*/
        tn.print();
        for(int i = 0; i < errores.size(); i++){
            System.out.println("Error: " + errores.get(i));
        }
        RESULT = tn;
    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(i);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              TreeNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode w = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(w);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;        

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= exp statement 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(e);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= declaration statement 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(d);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for statement 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= asig statement 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(a);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= printf statement 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(p);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= scanf statement 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(s);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= RETURN exp 
            {
              TreeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    token++;
    tn.agregarHijo(r, token);
    tn.agregarHijo(e);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= funccall statement 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= error statement 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    tn.agregarHijo(st);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("IF", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(s);
    tn.agregarHijo(t1);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t ::= ELSE if 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Else", null, token);
    tn.agregarHijo(i);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Else", null, token);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("While", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode fe = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("For", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(e);
    tn.agregarHijo(fe);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // forid ::= IDE SEMICOLON 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // forid ::= declaration 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = d;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printf ::= PRINTF PARINIT CONSTSTR printfp PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode pf = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Printf", null, token);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(pf);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printfp ::= COMMA finalexpression 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printfp",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // printfp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printfp",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scanf ::= SCANF PARINIT CONSTSTR COMMA amp IDE PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Scanf", null, token);
    token++;
    tn.agregarHijo(cs, token);
    tn.agregarHijo(a);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("scanf",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // amp ::= AMP 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(a, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // amp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= finalexpression SEMICOLON 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // finalexpression ::= ta arp 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Exp", null, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arp ::= OPSUM ta arp 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(s, null, token);
    //token++;
    //tn.agregarHijo(s, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ta ::= fa tap 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("T", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tap ::= OPMULT fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tap ::= OPDIV fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tap ::= oprel fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode o = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o.getVal(), null, token);
    //tn.agregarHijo(o);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tap ::= OPCOND fa tap COLON fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(f1);
    tn.agregarHijo(t1);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fa ::= IDE increment 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode in = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(in);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fa ::= OPINC IDE 
            {
              TreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(in, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fa ::= NUM 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Num", null, token);
    token++;
    tn.agregarHijo(n, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fa ::= CONSTCHAR 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ConstChar", null, token);
    token++;
    tn.agregarHijo(c, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fa ::= PARINIT finalexpression PARFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // increment ::= OPINC 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // increment ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // oprel ::= OPGRA 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // oprel ::= OPGRAEP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // oprel ::= OPLESS 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // oprel ::= OPLESSEQ 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // oprel ::= OPASIG 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // oprel ::= OPDIF 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // oprel ::= OPCOMP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // oprel ::= AND 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // oprel ::= OR 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= INTEGER typeap 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(ty);
    RESULT =  tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHARACTER typeap 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo",null, token);
    token++;
    tn.agregarHijo(ch, token);
    tn.agregarHijo(ty);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeap ::= OPMULT 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= decid SEMICOLON 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("Declaracion", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decid ::= decid COMMA IDE decasig 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode de = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Dec", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    //
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(de);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decid ::= type IDE decasig 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("D", null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(d);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decasig ::= OPASIG finalexpression 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decasig ::= 
            {
              TreeNode RESULT =null;
		 
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typev ::= VOID 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(v, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typev ::= type 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT = t;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par ::= paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    parNum++;
    RESULT = p;


              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramst ::= type paramst2 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
        token++;
        TreeNode tn = new TreeNode("p", null, parNum);
        tn.agregarHijo(t);
        tn.agregarHijo(p);
        RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramst2 ::= COMMA paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT =  p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paramst2 ::= IDE COMMA paramst 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("p", null, parNum);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramst2 ::= IDE 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramst2 ::= 
            {
              TreeNode RESULT =null;
		 
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsI ::= params 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    parNum++;
    RESULT = p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsI",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramsI ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsI",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // params ::= finalexpression paramsb 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("par", null, parNum);
    tn.agregarHijo(f);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramsb ::= COMMA params 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    RESULT = p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramsb ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funcs ::= func 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    token++;
    TreeNode tn = new TreeNode("Funciones", null, 0);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funcs ::= funcs func 
            {
              TreeNode RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode fs = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("Funciones", null, 0);
    
    tn.agregarHijo(fs);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // func ::= typev IDE PARINIT par PARFIN funcb 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode fb = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Funcion",null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id =  new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    tn.agregarHijo(fb);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func ::= error 
            {
              TreeNode RESULT =null;
		
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funcb ::= KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = st;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funcb ::= SEMICOLON 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funccall ::= IDE PARINIT paramsI PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Funccall", null, token);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funccall",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
