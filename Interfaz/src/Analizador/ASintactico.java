
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\013\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\002\000\002\011\012\000\002" +
    "\005\004\000\002\005\006\000\002\005\002\000\002\010" +
    "\011\000\002\006\013\000\002\007\004\000\002\007\003" +
    "\000\002\012\011\000\002\004\004\000\002\014\004\000" +
    "\002\015\005\000\002\015\002\000\002\016\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\002\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\023\004\000\002\023\004\000\002\024\003" +
    "\000\002\024\002\000\002\025\005\000\002\026\004\000" +
    "\002\026\003\000\002\027\004\000\002\027\004\000\002" +
    "\030\005\000\002\030\003\000\002\036\003\000\002\036" +
    "\004\000\002\033\003\000\002\033\002\000\002\034\004" +
    "\000\002\035\004\000\002\035\005\000\002\035\003\000" +
    "\002\035\002\000\002\031\004\000\002\032\004\000\002" +
    "\032\002\000\002\040\004\000\002\040\002\000\002\037" +
    "\010\000\002\041\005\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\010\004\uffbf\005\006\007\011\001\002\000" +
    "\004\027\201\001\002\000\004\004\016\001\002\000\006" +
    "\027\uffd4\032\015\001\002\000\012\002\uffbf\004\uffbf\005" +
    "\006\007\011\001\002\000\004\002\012\001\002\000\004" +
    "\027\uffcc\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffc0\004\uffc0\001\002\000\004\027\uffcb\001\002\000\010" +
    "\022\uffd5\023\uffd5\027\uffd5\001\002\000\004\006\017\001" +
    "\002\000\004\021\020\001\002\000\004\022\021\001\002" +
    "\000\004\017\022\001\002\000\032\004\047\005\030\010" +
    "\032\011\050\012\031\013\035\015\036\020\ufff7\021\033" +
    "\026\040\027\024\030\045\001\002\000\032\004\047\005" +
    "\030\010\032\011\050\012\031\013\035\015\036\020\ufff7" +
    "\021\033\026\040\027\024\030\045\001\002\000\040\022" +
    "\uffe4\023\uffe4\024\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\001\002\000\004\020\176\001\002\000\004" +
    "\024\175\001\002\000\004\027\162\001\002\000\012\022" +
    "\uffd4\023\uffd4\027\uffd4\032\015\001\002\000\004\021\153" +
    "\001\002\000\004\020\ufff8\001\002\000\012\021\033\026" +
    "\040\027\024\030\045\001\002\000\032\004\047\005\030" +
    "\010\032\011\050\012\031\013\035\015\036\020\ufff7\021" +
    "\033\026\040\027\024\030\045\001\002\000\004\021\134" +
    "\001\002\000\004\021\122\001\002\000\012\022\uffea\023" +
    "\uffea\024\uffea\034\117\001\002\000\040\022\uffe3\023\uffe3" +
    "\024\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3" +
    "\001\002\000\032\004\047\005\030\010\032\011\050\012" +
    "\031\013\035\015\036\020\ufff7\021\033\026\040\027\024" +
    "\030\045\001\002\000\032\004\047\005\030\010\032\011" +
    "\050\012\031\013\035\015\036\020\ufff7\021\033\026\040" +
    "\027\024\030\045\001\002\000\032\004\047\005\030\010" +
    "\032\011\050\012\031\013\035\015\036\020\ufff7\021\033" +
    "\026\040\027\024\030\045\001\002\000\040\022\uffe5\023" +
    "\uffe5\024\uffe5\032\100\033\102\034\uffe5\035\104\036\101" +
    "\037\076\040\073\041\070\042\074\043\075\045\071\046" +
    "\103\001\002\000\040\022\uffe2\023\uffe2\024\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\001\002\000\032" +
    "\004\047\005\030\010\032\011\050\012\031\013\035\015" +
    "\036\020\ufff7\021\033\026\040\027\024\030\045\001\002" +
    "\000\012\022\uffd4\023\uffd4\027\uffd4\032\015\001\002\000" +
    "\004\021\053\001\002\000\032\004\047\005\030\010\032" +
    "\011\050\012\031\013\035\015\036\020\ufff7\021\033\026" +
    "\040\027\024\030\045\001\002\000\004\020\ufff9\001\002" +
    "\000\010\004\047\005\030\027\054\001\002\000\004\024" +
    "\065\001\002\000\012\021\033\026\040\027\024\030\045" +
    "\001\002\000\012\021\uffef\026\uffef\027\uffef\030\uffef\001" +
    "\002\000\012\021\033\026\040\027\024\030\045\001\002" +
    "\000\004\022\061\001\002\000\004\017\062\001\002\000" +
    "\032\004\047\005\030\010\032\011\050\012\031\013\035" +
    "\015\036\020\ufff7\021\033\026\040\027\024\030\045\001" +
    "\002\000\004\020\064\001\002\000\032\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\020\ufff1\021" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\001\002\000\012\021\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\001\002\000\010\022\uffd7\023" +
    "\uffd7\027\uffd7\001\002\000\004\020\ufffb\001\002\000\012" +
    "\021\uffde\026\uffde\027\uffde\030\uffde\001\002\000\012\021" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\001\002\000\012\021\033" +
    "\026\040\027\024\030\045\001\002\000\012\021\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\001\002\000\012\021\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\001\002\000\012\021\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\001\002\000\012\021\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\001\002\000\012\022\uffe9\023\uffe9\024\uffe9\034" +
    "\uffe9\001\002\000\012\021\033\026\040\027\024\030\045" +
    "\001\002\000\012\021\uffda\026\uffda\027\uffda\030\uffda\001" +
    "\002\000\012\021\033\026\040\027\024\030\045\001\002" +
    "\000\012\021\uffd8\026\uffd8\027\uffd8\030\uffd8\001\002\000" +
    "\012\021\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\040" +
    "\022\uffe5\023\uffe5\024\uffe5\032\100\033\102\034\uffe5\035" +
    "\104\036\101\037\076\040\073\041\070\042\074\043\075" +
    "\045\071\046\103\001\002\000\012\022\uffe7\023\uffe7\024" +
    "\uffe7\034\uffe7\001\002\000\040\022\uffe5\023\uffe5\024\uffe5" +
    "\032\100\033\102\034\uffe5\035\104\036\101\037\076\040" +
    "\073\041\070\042\074\043\075\045\071\046\103\001\002" +
    "\000\012\022\uffe8\023\uffe8\024\uffe8\034\uffe8\001\002\000" +
    "\040\022\uffe5\023\uffe5\024\uffe5\032\100\033\102\034\uffe5" +
    "\035\104\036\101\037\076\040\073\041\070\042\074\043" +
    "\075\045\071\046\103\001\002\000\012\022\uffe6\023\uffe6" +
    "\024\uffe6\034\uffe6\001\002\000\004\020\ufffe\001\002\000" +
    "\004\020\ufffa\001\002\000\004\020\uffff\001\002\000\010" +
    "\022\uffec\023\uffec\024\uffec\001\002\000\012\021\033\026" +
    "\040\027\024\030\045\001\002\000\012\022\uffea\023\uffea" +
    "\024\uffea\034\117\001\002\000\010\022\uffeb\023\uffeb\024" +
    "\uffeb\001\002\000\004\031\123\001\002\000\004\023\124" +
    "\001\002\000\004\027\125\001\002\000\006\022\uffc1\023" +
    "\131\001\002\000\004\022\127\001\002\000\004\024\130" +
    "\001\002\000\032\004\uffee\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\020\uffee\021\uffee\026\uffee\027\uffee" +
    "\030\uffee\001\002\000\004\027\125\001\002\000\004\022" +
    "\uffc3\001\002\000\004\022\uffc2\001\002\000\012\021\033" +
    "\026\040\027\024\030\045\001\002\000\004\022\136\001" +
    "\002\000\004\017\137\001\002\000\032\004\047\005\030" +
    "\010\032\011\050\012\031\013\035\015\036\020\ufff7\021" +
    "\033\026\040\027\024\030\045\001\002\000\004\020\141" +
    "\001\002\000\034\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\142\015\ufff3\020\ufff3\021\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\001\002\000\006\013\035\017\145\001" +
    "\002\000\032\004\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\020\ufff6\021\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\001\002\000\032\004\ufff5\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\020\ufff5\021\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\001\002\000\032\004\047\005\030\010\032" +
    "\011\050\012\031\013\035\015\036\020\ufff7\021\033\026" +
    "\040\027\024\030\045\001\002\000\004\020\147\001\002" +
    "\000\032\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\020\ufff4\021\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\001\002\000\004\020\ufffd\001\002\000\004\022\152\001" +
    "\002\000\040\022\uffe1\023\uffe1\024\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\045\uffe1\046\uffe1\001\002\000\012\021\033" +
    "\026\040\027\024\030\045\001\002\000\004\022\155\001" +
    "\002\000\004\017\156\001\002\000\032\004\047\005\030" +
    "\010\032\011\050\012\031\013\035\015\036\020\ufff7\021" +
    "\033\026\040\027\024\030\045\001\002\000\004\020\160" +
    "\001\002\000\032\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\020\ufff2\021\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\001\002\000\010\022\uffd6\023\uffd6\027\uffd6\001" +
    "\002\000\010\023\166\024\uffd1\035\167\001\002\000\004" +
    "\024\164\001\002\000\032\004\uffd3\005\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\015\uffd3\020\uffd3\021\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\001\002\000\004\024\uffd2\001\002\000" +
    "\004\027\162\001\002\000\012\021\033\026\040\027\024" +
    "\030\045\001\002\000\004\024\uffcf\001\002\000\006\023" +
    "\172\024\uffcd\001\002\000\004\027\162\001\002\000\004" +
    "\024\uffce\001\002\000\004\024\uffd0\001\002\000\032\004" +
    "\uffed\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\020\uffed\021\uffed\026\uffed\027\uffed\030\uffed\001\002\000" +
    "\010\002\uffbf\005\006\007\011\001\002\000\004\002\000" +
    "\001\002\000\004\020\ufffc\001\002\000\004\021\202\001" +
    "\002\000\010\004\047\005\030\022\uffc9\001\002\000\004" +
    "\022\uffca\001\002\000\004\022\214\001\002\000\010\022" +
    "\uffc4\023\206\027\207\001\002\000\006\004\047\005\030" +
    "\001\002\000\006\022\uffc5\023\211\001\002\000\004\022" +
    "\uffc8\001\002\000\006\004\047\005\030\001\002\000\004" +
    "\022\uffc6\001\002\000\004\022\uffc7\001\002\000\006\017" +
    "\217\024\215\001\002\000\012\002\uffbc\004\uffbc\005\uffbc" +
    "\007\uffbc\001\002\000\012\002\uffbe\004\uffbe\005\uffbe\007" +
    "\uffbe\001\002\000\032\004\047\005\030\010\032\011\050" +
    "\012\031\013\035\015\036\020\ufff7\021\033\026\040\027" +
    "\024\030\045\001\002\000\004\020\221\001\002\000\012" +
    "\002\uffbd\004\uffbd\005\uffbd\007\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\012\002\007\036\003\037\006\040\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\013" +
    "\001\001\000\010\036\003\037\006\040\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\024\004\033\006\045\010\042\011\040\012" +
    "\050\014\025\016\036\020\043\022\041\023\026\025\022" +
    "\001\001\000\032\003\177\004\033\006\045\010\042\011" +
    "\040\012\050\014\025\016\036\020\043\022\041\023\026" +
    "\025\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\162\001\001\000\004\024\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\150\016\036\020\043\001\001\000\032\003\147\004\033" +
    "\006\045\010\042\011\040\012\050\014\025\016\036\020" +
    "\043\022\041\023\026\025\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\115\001\001\000\002\001" +
    "\001\000\032\003\114\004\033\006\045\010\042\011\040" +
    "\012\050\014\025\016\036\020\043\022\041\023\026\025" +
    "\022\001\001\000\032\003\113\004\033\006\045\010\042" +
    "\011\040\012\050\014\025\016\036\020\043\022\041\023" +
    "\026\025\022\001\001\000\032\003\112\004\033\006\045" +
    "\010\042\011\040\012\050\014\025\016\036\020\043\022" +
    "\041\023\026\025\022\001\001\000\006\017\076\021\071" +
    "\001\001\000\002\001\001\000\032\003\066\004\033\006" +
    "\045\010\042\011\040\012\050\014\025\016\036\020\043" +
    "\022\041\023\026\025\022\001\001\000\004\024\065\001" +
    "\001\000\002\001\001\000\032\003\051\004\033\006\045" +
    "\010\042\011\040\012\050\014\025\016\036\020\043\022" +
    "\041\023\026\025\022\001\001\000\002\001\001\000\010" +
    "\007\054\023\026\025\055\001\001\000\002\001\001\000" +
    "\012\004\056\014\025\016\036\020\043\001\001\000\002" +
    "\001\001\000\010\014\057\016\036\020\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\062\004\033" +
    "\006\045\010\042\011\040\012\050\014\025\016\036\020" +
    "\043\022\041\023\026\025\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\106\001\001\000\002\001\001\000\004\020\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\105" +
    "\021\071\001\001\000\002\001\001\000\006\017\107\021" +
    "\071\001\001\000\002\001\001\000\006\017\111\021\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\117" +
    "\020\043\001\001\000\004\015\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\125" +
    "\001\001\000\004\032\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\134\016" +
    "\036\020\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\137\004\033\006\045\010\042\011\040\012" +
    "\050\014\025\016\036\020\043\022\041\023\026\025\022" +
    "\001\001\000\002\001\001\000\004\005\142\001\001\000" +
    "\004\011\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\145\004\033\006\045\010\042\011\040\012" +
    "\050\014\025\016\036\020\043\022\041\023\026\025\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\153" +
    "\016\036\020\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\156\004\033\006\045\010\042\011\040" +
    "\012\050\014\025\016\036\020\043\022\041\023\026\025" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\173\001\001" +
    "\000\012\014\170\016\036\020\043\030\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\003\037\006\040\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\204\033" +
    "\203\034\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\207\001\001\000\006\023\204\034\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\204" +
    "\034\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\217\004\033\006\045\010\042\011\040\012" +
    "\050\014\025\016\036\020\043\022\041\023\026\025\022" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {




  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcs INTEGER MAIN PARINIT PARFIN KEYINIT statement KEYFIN funcs 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= exp statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= declaration statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= asig statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= printf statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t ::= ELSE if 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // forid ::= IDE SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // forid ::= declaration 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // printf ::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= finalexpression SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // finalexpression ::= ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arp ::= OPSUM ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arp ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ta ::= fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tap ::= OPMULT fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tap ::= OPDIV fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tap ::= oprel fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tap ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fa ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fa ::= NUM 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fa ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fa ::= PARINIT finalexpression PARFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // oprel ::= OPGRA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // oprel ::= OPGRAEP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oprel ::= OPLESS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // oprel ::= OPLESSEQ 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // oprel ::= OPASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // oprel ::= OPDIF 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // oprel ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // oprel ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // oprel ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= INTEGER typeap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= CHARACTER typeap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // typeap ::= OPMULT 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // typeap ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= type decid SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decid ::= IDE decasig 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decid ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decasig ::= COMMA decid 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decasig ::= OPASIG decright 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decright ::= finalexpression COMMA decid 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decright",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decright ::= finalexpression 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decright",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typev ::= VOID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typev ::= CHARACTER typeap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // par ::= paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // par ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramst ::= type paramst2 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramst2 ::= COMMA paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramst2 ::= IDE COMMA paramst 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramst2 ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramst2 ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // params ::= IDE paramsb 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramsb ::= COMMA params 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramsb ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcs ::= func funcs 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funcs ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func ::= typev IDE PARINIT par PARFIN funcb 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcb ::= KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funcb ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
