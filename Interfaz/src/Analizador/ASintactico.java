
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\003\002\000\002\011\012\000\002\005" +
    "\004\000\002\005\006\000\002\005\002\000\002\010\011" +
    "\000\002\006\013\000\002\007\004\000\002\007\003\000" +
    "\002\012\011\000\002\013\012\000\002\014\003\000\002" +
    "\014\002\000\002\004\004\000\002\015\004\000\002\016" +
    "\005\000\002\016\002\000\002\017\004\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\010\000" +
    "\002\020\002\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\043" +
    "\003\000\002\043\002\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\024\004\000\002\024\004\000\002\025" +
    "\003\000\002\025\002\000\002\026\004\000\002\027\006" +
    "\000\002\027\005\000\002\030\004\000\002\030\002\000" +
    "\002\036\003\000\002\036\003\000\002\033\003\000\002" +
    "\033\002\000\002\034\004\000\002\035\004\000\002\035" +
    "\005\000\002\035\003\000\002\035\002\000\002\031\004" +
    "\000\002\032\004\000\002\032\002\000\002\040\003\000" +
    "\002\040\004\000\002\037\010\000\002\041\005\000\002" +
    "\041\003\000\002\042\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\010\004\004\005\007\006\013\001\002\000" +
    "\012\021\uffca\022\uffca\026\uffca\031\016\001\002\000\004" +
    "\026\020\001\002\000\012\002\000\004\004\005\007\006" +
    "\013\001\002\000\012\021\uffca\022\uffca\026\uffca\031\016" +
    "\001\002\000\004\026\uffc3\001\002\000\012\002\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\001\002\000\004\002\014\001\002" +
    "\000\004\026\uffc4\001\002\000\004\002\001\001\002\000" +
    "\010\021\uffcc\022\uffcc\026\uffcc\001\002\000\010\021\uffcb" +
    "\022\uffcb\026\uffcb\001\002\000\012\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\001\002\000\004\020\021\001\002\000\010" +
    "\004\004\005\007\021\uffc1\001\002\000\004\021\033\001" +
    "\002\000\010\021\uffbc\022\025\026\026\001\002\000\004" +
    "\021\uffc2\001\002\000\006\004\004\005\007\001\002\000" +
    "\006\021\uffbd\022\030\001\002\000\004\021\uffc0\001\002" +
    "\000\006\004\004\005\007\001\002\000\004\021\uffbe\001" +
    "\002\000\004\021\uffbf\001\002\000\006\016\036\023\034" +
    "\001\002\000\012\002\uffb4\004\uffb4\005\uffb4\006\uffb4\001" +
    "\002\000\012\002\uffb6\004\uffb6\005\uffb6\006\uffb6\001\002" +
    "\000\040\003\066\004\004\005\007\007\050\010\070\011" +
    "\046\012\054\014\055\015\047\017\ufff4\020\051\025\057" +
    "\026\040\027\065\034\043\001\002\000\040\003\066\004" +
    "\004\005\007\007\050\010\070\011\046\012\054\014\055" +
    "\015\047\017\ufff4\020\051\025\057\026\040\027\065\034" +
    "\043\001\002\000\042\020\237\023\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\107\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002" +
    "\000\004\017\236\001\002\000\006\022\232\023\233\001" +
    "\002\000\004\026\231\001\002\000\004\023\230\001\002" +
    "\000\004\026\224\001\002\000\004\020\216\001\002\000" +
    "\004\020\206\001\002\000\014\020\051\025\057\026\077" +
    "\027\065\034\043\001\002\000\014\020\051\025\057\026" +
    "\077\027\065\034\043\001\002\000\040\003\066\004\004" +
    "\005\007\007\050\010\070\011\046\012\054\014\055\015" +
    "\047\017\ufff4\020\051\025\057\026\040\027\065\034\043" +
    "\001\002\000\040\003\066\004\004\005\007\007\050\010" +
    "\070\011\046\012\054\014\055\015\047\017\ufff4\020\051" +
    "\025\057\026\040\027\065\034\043\001\002\000\004\020" +
    "\165\001\002\000\004\020\153\001\002\000\012\021\uffe4" +
    "\022\uffe4\023\uffe4\033\150\001\002\000\044\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\001\002\000\040\003\066\004\004" +
    "\005\007\007\050\010\070\011\046\012\054\014\055\015" +
    "\047\017\ufff4\020\051\025\057\026\040\027\065\034\043" +
    "\001\002\000\040\003\066\004\004\005\007\007\050\010" +
    "\070\011\046\012\054\014\055\015\047\017\ufff4\020\051" +
    "\025\057\026\040\027\065\034\043\001\002\000\040\003" +
    "\066\004\004\005\007\007\050\010\070\011\046\012\054" +
    "\014\055\015\047\017\ufff4\020\051\025\057\026\040\027" +
    "\065\034\043\001\002\000\040\003\066\004\004\005\007" +
    "\007\050\010\070\011\046\012\054\014\055\015\047\017" +
    "\ufff4\020\051\025\057\026\040\027\065\034\043\001\002" +
    "\000\042\021\uffde\022\uffde\023\uffde\031\122\032\124\033" +
    "\uffde\035\125\036\123\037\120\040\115\041\113\042\116" +
    "\043\117\044\127\045\112\046\126\001\002\000\044\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\031\uffda\032\uffda\033\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\001\002\000\004\017\ufff5" +
    "\001\002\000\040\003\066\004\004\005\007\007\050\010" +
    "\070\011\046\012\054\014\055\015\047\017\ufff4\020\051" +
    "\025\057\026\040\027\065\034\043\001\002\000\004\020" +
    "\073\001\002\000\040\003\066\004\004\005\007\007\050" +
    "\010\070\011\046\012\054\014\055\015\047\017\ufff4\020" +
    "\051\025\057\026\040\027\065\034\043\001\002\000\004" +
    "\017\ufff9\001\002\000\010\004\004\005\007\026\074\001" +
    "\002\000\004\023\110\001\002\000\014\020\051\025\057" +
    "\026\077\027\065\034\043\001\002\000\014\020\uffec\025" +
    "\uffec\026\uffec\027\uffec\034\uffec\001\002\000\046\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\107\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002\000\014\020" +
    "\051\025\057\026\077\027\065\034\043\001\002\000\004" +
    "\021\102\001\002\000\004\016\103\001\002\000\040\003" +
    "\066\004\004\005\007\007\050\010\070\011\046\012\054" +
    "\014\055\015\047\017\ufff4\020\051\025\057\026\040\027" +
    "\065\034\043\001\002\000\004\017\105\001\002\000\040" +
    "\003\uffee\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\014\uffee\015\uffee\017\uffee\020\uffee\025\uffee\026\uffee" +
    "\027\uffee\034\uffee\001\002\000\044\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\001\002\000\044\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\001\002\000\014\020\uffed\025\uffed\026\uffed\027" +
    "\uffed\034\uffed\001\002\000\004\017\ufffb\001\002\000\014" +
    "\020\uffcf\025\uffcf\026\uffcf\027\uffcf\034\uffcf\001\002\000" +
    "\014\020\uffd4\025\uffd4\026\uffd4\027\uffd4\034\uffd4\001\002" +
    "\000\014\020\051\025\057\026\077\027\065\034\043\001" +
    "\002\000\014\020\uffd6\025\uffd6\026\uffd6\027\uffd6\034\uffd6" +
    "\001\002\000\014\020\uffd5\025\uffd5\026\uffd5\027\uffd5\034" +
    "\uffd5\001\002\000\014\020\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\034\uffd3\001\002\000\014\020\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\034\uffd1\001\002\000\012\021\uffe3\022\uffe3\023\uffe3" +
    "\033\uffe3\001\002\000\014\020\051\025\057\026\077\027" +
    "\065\034\043\001\002\000\014\020\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\034\uffd0\001\002\000\014\020\051\025\057\026" +
    "\077\027\065\034\043\001\002\000\014\020\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\034\uffd2\001\002\000\014\020\uffce\025" +
    "\uffce\026\uffce\027\uffce\034\uffce\001\002\000\014\020\051" +
    "\025\057\026\077\027\065\034\043\001\002\000\034\024" +
    "\uffde\031\122\032\124\035\125\036\123\037\120\040\115" +
    "\041\113\042\116\043\117\044\127\045\112\046\126\001" +
    "\002\000\004\024\132\001\002\000\014\020\051\025\057" +
    "\026\077\027\065\034\043\001\002\000\044\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\031\122\032\124\033\uffde\035\125" +
    "\036\123\037\120\040\115\041\113\042\116\043\117\044" +
    "\127\045\112\046\126\001\002\000\014\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\033\uffdf\001\002\000\044\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\031\122\032\124\033\uffde\035\125" +
    "\036\123\037\120\040\115\041\113\042\116\043\117\044" +
    "\127\045\112\046\126\001\002\000\014\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\033\uffe1\001\002\000\044\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\031\122\032\124\033\uffde\035\125" +
    "\036\123\037\120\040\115\041\113\042\116\043\117\044" +
    "\127\045\112\046\126\001\002\000\014\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\033\uffe2\001\002\000\044\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\031\122\032\124\033\uffde\035\125" +
    "\036\123\037\120\040\115\041\113\042\116\043\117\044" +
    "\127\045\112\046\126\001\002\000\014\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\033\uffe0\001\002\000\004\017\ufff8\001" +
    "\002\000\004\017\ufffe\001\002\000\004\017\ufffa\001\002" +
    "\000\004\017\uffff\001\002\000\010\021\uffe6\022\uffe6\023" +
    "\uffe6\001\002\000\014\020\051\025\057\026\077\027\065" +
    "\034\043\001\002\000\012\021\uffe4\022\uffe4\023\uffe4\033" +
    "\150\001\002\000\010\021\uffe5\022\uffe5\023\uffe5\001\002" +
    "\000\004\030\154\001\002\000\004\022\155\001\002\000" +
    "\014\020\051\025\057\026\077\027\065\034\043\001\002" +
    "\000\004\021\163\001\002\000\006\021\uffb9\022\160\001" +
    "\002\000\014\020\051\025\057\026\077\027\065\034\043" +
    "\001\002\000\004\021\uffbb\001\002\000\004\021\uffba\001" +
    "\002\000\004\023\164\001\002\000\040\003\uffeb\004\uffeb" +
    "\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\025\uffeb\026\uffeb\027\uffeb\034\uffeb" +
    "\001\002\000\014\020\051\025\057\026\077\027\065\034" +
    "\043\001\002\000\004\021\167\001\002\000\004\016\170" +
    "\001\002\000\040\003\066\004\004\005\007\007\050\010" +
    "\070\011\046\012\054\014\055\015\047\017\ufff4\020\051" +
    "\025\057\026\040\027\065\034\043\001\002\000\004\017" +
    "\172\001\002\000\042\003\ufff0\004\ufff0\005\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\173\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\025\ufff0\026\ufff0\027\ufff0\034\ufff0\001\002" +
    "\000\006\012\054\016\176\001\002\000\040\003\ufff3\004" +
    "\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\020\ufff3\025\ufff3\026\ufff3\027\ufff3\034" +
    "\ufff3\001\002\000\040\003\ufff2\004\ufff2\005\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\017\ufff2\020" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\034\ufff2\001\002\000\040" +
    "\003\066\004\004\005\007\007\050\010\070\011\046\012" +
    "\054\014\055\015\047\017\ufff4\020\051\025\057\026\040" +
    "\027\065\034\043\001\002\000\004\017\200\001\002\000" +
    "\040\003\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\034\ufff1\001\002\000\004\017\ufff6\001\002" +
    "\000\004\017\ufffd\001\002\000\004\021\204\001\002\000" +
    "\044\021\uffd9\022\uffd9\023\uffd9\024\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\001\002\000\004" +
    "\017\ufff7\001\002\000\004\030\207\001\002\000\004\022" +
    "\210\001\002\000\006\026\uffe8\047\211\001\002\000\004" +
    "\026\uffe9\001\002\000\004\026\213\001\002\000\004\021" +
    "\214\001\002\000\004\023\215\001\002\000\040\003\uffea" +
    "\004\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\025\uffea\026\uffea\027\uffea" +
    "\034\uffea\001\002\000\014\020\051\025\057\026\077\027" +
    "\065\034\043\001\002\000\004\021\220\001\002\000\004" +
    "\016\221\001\002\000\040\003\066\004\004\005\007\007" +
    "\050\010\070\011\046\012\054\014\055\015\047\017\ufff4" +
    "\020\051\025\057\026\040\027\065\034\043\001\002\000" +
    "\004\017\223\001\002\000\040\003\uffef\004\uffef\005\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\025\uffef\026\uffef\027\uffef\034\uffef\001\002" +
    "\000\010\022\uffc5\023\uffc5\035\226\001\002\000\006\022" +
    "\uffc7\023\uffc7\001\002\000\014\020\051\025\057\026\077" +
    "\027\065\034\043\001\002\000\006\022\uffc6\023\uffc6\001" +
    "\002\000\040\003\uffe7\004\uffe7\005\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\034\uffe7\001\002\000\044\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\001\002\000\004\026\234\001" +
    "\002\000\040\003\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\034\uffc9\001\002\000\010\022\uffc5" +
    "\023\uffc5\035\226\001\002\000\006\022\uffc8\023\uffc8\001" +
    "\002\000\012\002\uffb5\004\uffb5\005\uffb5\006\uffb5\001\002" +
    "\000\014\020\051\025\057\026\077\027\065\034\043\001" +
    "\002\000\004\021\241\001\002\000\004\023\242\001\002" +
    "\000\040\003\uffb3\004\uffb3\005\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\014\uffb3\015\uffb3\017\uffb3\020\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\034\uffb3\001\002\000\004\017\ufffc\001" +
    "\002\000\010\021\uffcd\022\uffcd\026\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\014\002\011\024\007\036\004\037\010\040" +
    "\005\001\001\000\004\025\243\001\001\000\002\001\001" +
    "\000\010\024\007\036\004\037\016\001\001\000\004\025" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\022\033\021\034\023\001\001\000\002\001" +
    "\001\000\004\035\026\001\001\000\002\001\001\000\006" +
    "\024\022\034\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\022\034\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\040\004\051\006\066" +
    "\010\061\011\057\012\070\013\062\015\043\017\055\021" +
    "\063\023\060\024\044\026\036\027\041\042\052\001\001" +
    "\000\040\003\242\004\051\006\066\010\061\011\057\012" +
    "\070\013\062\015\043\017\055\021\063\023\060\024\044" +
    "\026\036\027\041\042\052\001\001\000\004\043\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\204\015\043\017\055\021\063" +
    "\001\001\000\010\015\202\017\055\021\063\001\001\000" +
    "\040\003\201\004\051\006\066\010\061\011\057\012\070" +
    "\013\062\015\043\017\055\021\063\023\060\024\044\026" +
    "\036\027\041\042\052\001\001\000\040\003\200\004\051" +
    "\006\066\010\061\011\057\012\070\013\062\015\043\017" +
    "\055\021\063\023\060\024\044\026\036\027\041\042\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\146\001\001\000\002\001\001\000\040\003\145\004\051" +
    "\006\066\010\061\011\057\012\070\013\062\015\043\017" +
    "\055\021\063\023\060\024\044\026\036\027\041\042\052" +
    "\001\001\000\040\003\144\004\051\006\066\010\061\011" +
    "\057\012\070\013\062\015\043\017\055\021\063\023\060" +
    "\024\044\026\036\027\041\042\052\001\001\000\040\003" +
    "\143\004\051\006\066\010\061\011\057\012\070\013\062" +
    "\015\043\017\055\021\063\023\060\024\044\026\036\027" +
    "\041\042\052\001\001\000\040\003\142\004\051\006\066" +
    "\010\061\011\057\012\070\013\062\015\043\017\055\021" +
    "\063\023\060\024\044\026\036\027\041\042\052\001\001" +
    "\000\006\020\120\022\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\110\004\051\006\066\010\061" +
    "\011\057\012\070\013\062\015\043\017\055\021\063\023" +
    "\060\024\044\026\036\027\041\042\052\001\001\000\002" +
    "\001\001\000\040\003\071\004\051\006\066\010\061\011" +
    "\057\012\070\013\062\015\043\017\055\021\063\023\060" +
    "\024\044\026\036\027\041\042\052\001\001\000\002\001" +
    "\001\000\012\007\074\024\044\026\075\027\041\001\001" +
    "\000\002\001\001\000\012\004\077\015\043\017\055\021" +
    "\063\001\001\000\002\001\001\000\004\043\105\001\001" +
    "\000\010\015\100\017\055\021\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\103\004\051\006\066" +
    "\010\061\011\057\012\070\013\062\015\043\017\055\021" +
    "\063\023\060\024\044\026\036\027\041\042\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\136\001\001\000" +
    "\002\001\001\000\004\021\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\127\001\001\000\006\020" +
    "\130\022\113\001\001\000\002\001\001\000\004\021\132" +
    "\001\001\000\006\020\133\022\113\001\001\000\002\001" +
    "\001\000\006\020\135\022\113\001\001\000\002\001\001" +
    "\000\006\020\137\022\113\001\001\000\002\001\001\000" +
    "\006\020\141\022\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\150\021\063\001\001" +
    "\000\004\016\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\156\017\055\021\063" +
    "\031\155\001\001\000\002\001\001\000\004\032\160\001" +
    "\001\000\012\015\156\017\055\021\063\031\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\165\017\055\021\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\170\004" +
    "\051\006\066\010\061\011\057\012\070\013\062\015\043" +
    "\017\055\021\063\023\060\024\044\026\036\027\041\042" +
    "\052\001\001\000\002\001\001\000\004\005\173\001\001" +
    "\000\004\011\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\176\004\051\006\066\010\061\011\057" +
    "\012\070\013\062\015\043\017\055\021\063\023\060\024" +
    "\044\026\036\027\041\042\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\216\017\055\021" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\221\004\051\006\066\010\061\011\057\012\070\013" +
    "\062\015\043\017\055\021\063\023\060\024\044\026\036" +
    "\027\041\042\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\224\001\001\000\002\001\001\000\010" +
    "\015\226\017\055\021\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\156\017\055\021\063\031\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.err.println(err);
        errores.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.err.println(err);
        errores.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {


    Nodo arbol = new Nodo();
    int token = 0;
    int parNum = 0;


  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcs 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
        //arbol.crearArchivo();
        token++;
        TreeNode tn = new TreeNode("Inicio", null, token);
        tn.agregarHijo(f);
        //tn.fix();
        //tn.print();
        RESULT = tn;
    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(i);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              TreeNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode w = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(w);
    tn.agregarHijo(st);
    RESULT = tn;        

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= exp statement 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(e);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= declaration statement 
            {
              TreeNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(d);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for statement 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= asig statement 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(a);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= printf statement 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(p);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= scanf statement 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(s);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= RETURN exp 
            {
              TreeNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    token++;
    tn.agregarHijo(r, token);
    tn.agregarHijo(e);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= funccall statement 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= error 
            {
              TreeNode RESULT =null;
		
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    tn.agregarHijo("Error",token);
    RESULT = tn;
    System.err.println("No se esperaba ese token: ");
    System.err.println(RESULT);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t ::= ELSE if 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t ::= 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    token++;
    TreeNode tn = new TreeNode("While", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // forid ::= IDE SEMICOLON 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // forid ::= declaration 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printf ::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scanf ::= SCANF PARINIT CONSTSTR COMMA amp IDE PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
    token++;
    TreeNode tn = new TreeNode("Scanf", null, token);
    token++;
    tn.agregarHijo(cs, token);
    tn.agregarHijo(a);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("scanf",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // amp ::= AMP 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(a, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // amp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("amp",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= finalexpression SEMICOLON 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // finalexpression ::= ta arp 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Exp", null, token);
    tn.agregarHijo(t);
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arp ::= OPSUM ta arp 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ar = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(s, null, token);
    tn.agregarHijo(t);
    tn.agregarHijo(ar);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arp ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ta ::= fa tap 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("T", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tap ::= OPMULT fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tap ::= OPDIV fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tap ::= oprel fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode o = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o.getVal(), null, token);
    //tn.agregarHijo(o);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tap ::= OPCOND fa tap COLON fa tap 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(f1);
    tn.agregarHijo(t1);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fa ::= IDE increment 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode in = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(in);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fa ::= OPINC IDE 
            {
              TreeNode RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(in, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fa ::= NUM 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("Num", null, token);
    token++;
    tn.agregarHijo(n, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fa ::= CONSTCHAR 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ConstChar", null, token);
    token++;
    tn.agregarHijo(c, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fa ::= PARINIT finalexpression PARFIN 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = f;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // increment ::= OPINC 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // increment ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("increment",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // oprel ::= OPGRA 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // oprel ::= OPGRAEP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // oprel ::= OPLESS 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // oprel ::= OPLESSEQ 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // oprel ::= OPASIG 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // oprel ::= OPDIF 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // oprel ::= OPCOMP 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // oprel ::= AND 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // oprel ::= OR 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= INTEGER typeap 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(ty);
    RESULT =  tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= CHARACTER typeap 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode ty = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo",null, token);
    token++;
    tn.agregarHijo(ch, token);
    tn.agregarHijo(ty);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typeap ::= OPMULT 
            {
              TreeNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    RESULT = new TreeNode(o, null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeap ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typeap",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= decid SEMICOLON 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decid ::= decid COMMA IDE decasig 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decid ::= type IDE decasig 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decasig ::= OPASIG finalexpression 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decasig ::= 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typev ::= VOID 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(v, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typev ::= type 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT = t;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("typev",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par ::= paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    parNum++;
    /*TreeNode tn = new TreeNode("Parametros", null , parNum);
    tn.agregarHijo(p);*/    
    RESULT = p;


              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par ::= 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("par",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramst ::= type paramst2 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
        token++;
        TreeNode tn = new TreeNode("p", null, parNum);
        tn.agregarHijo(t);
        tn.agregarHijo(p);
        RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramst2 ::= COMMA paramst 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    RESULT =  p;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramst2 ::= IDE COMMA paramst 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("p", null, parNum);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramst2 ::= IDE 
            {
              TreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paramst2 ::= 
            {
              TreeNode RESULT =null;
		 
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramst2",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // params ::= finalexpression paramsb 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsb ::= COMMA params 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsb ::= 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcs ::= func 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		  
    token++;
    TreeNode tn = new TreeNode("Funciones", null, 0);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funcs ::= funcs func 
            {
              TreeNode RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode fs = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    TreeNode tn = new TreeNode("Funciones", null, 0);
    
    tn.agregarHijo(fs);
    tn.agregarHijo(f);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcs",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func ::= typev IDE PARINIT par PARFIN funcb 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		TreeNode fb = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
    token++;
    TreeNode tn = new TreeNode("Funcion",null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id =  new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    tn.agregarHijo(fb);
    RESULT = tn;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("func",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funcb ::= KEYINIT statement KEYFIN 
            {
              TreeNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
    RESULT = st;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funcb ::= SEMICOLON 
            {
              TreeNode RESULT =null;
		
    token++;
    RESULT = new TreeNode("#", null, token);

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcb",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funccall ::= IDE PARINIT params PARFIN SEMICOLON 
            {
              TreeNode RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funccall",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
