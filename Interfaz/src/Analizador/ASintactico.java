
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\002\000\002\013\012\000\002\006\004\000\002" +
    "\006\006\000\002\006\002\000\002\012\011\000\002\007" +
    "\013\000\002\010\004\000\002\010\003\000\002\014\011" +
    "\000\002\004\004\000\002\016\004\000\002\017\005\000" +
    "\002\017\002\000\002\020\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\002\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\005\000\002\030\004\000\002\030\003" +
    "\000\002\031\004\000\002\031\004\000\002\032\005\000" +
    "\002\032\003\000\002\034\004\000\002\035\004\000\002" +
    "\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\004\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\010\001\002\000\004\021\011\001\002\000" +
    "\004\016\012\001\002\000\030\004\036\005\020\010\037" +
    "\011\021\012\024\014\025\017\ufff8\020\022\025\027\026" +
    "\014\027\034\001\002\000\030\004\036\005\020\010\037" +
    "\011\021\012\024\014\025\017\ufff8\020\022\025\027\026" +
    "\014\027\034\001\002\000\036\021\uffe5\022\uffe5\023\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5\001\002\000\004" +
    "\017\162\001\002\000\004\026\147\001\002\000\004\023" +
    "\146\001\002\000\004\026\uffd8\001\002\000\004\020\140" +
    "\001\002\000\012\020\022\025\027\026\014\027\034\001" +
    "\002\000\030\004\036\005\020\010\037\011\021\012\024" +
    "\014\025\017\ufff8\020\022\025\027\026\014\027\034\001" +
    "\002\000\004\020\121\001\002\000\004\020\107\001\002" +
    "\000\012\021\uffeb\022\uffeb\023\uffeb\033\104\001\002\000" +
    "\036\021\uffe4\022\uffe4\023\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044" +
    "\uffe4\045\uffe4\001\002\000\030\004\036\005\020\010\037" +
    "\011\021\012\024\014\025\017\ufff8\020\022\025\027\026" +
    "\014\027\034\001\002\000\030\004\036\005\020\010\037" +
    "\011\021\012\024\014\025\017\ufff8\020\022\025\027\026" +
    "\014\027\034\001\002\000\030\004\036\005\020\010\037" +
    "\011\021\012\024\014\025\017\ufff8\020\022\025\027\026" +
    "\014\027\034\001\002\000\036\021\uffe6\022\uffe6\023\uffe6" +
    "\031\065\032\067\033\uffe6\034\071\035\066\037\061\040" +
    "\056\041\062\042\063\044\057\045\070\001\002\000\036" +
    "\021\uffe3\022\uffe3\023\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\001\002\000\030\004\036\005\020\010\037\011" +
    "\021\012\024\014\025\017\ufff8\020\022\025\027\026\014" +
    "\027\034\001\002\000\004\026\uffd9\001\002\000\004\020" +
    "\042\001\002\000\030\004\036\005\020\010\037\011\021" +
    "\012\024\014\025\017\ufff8\020\022\025\027\026\014\027" +
    "\034\001\002\000\004\017\ufff9\001\002\000\010\004\036" +
    "\005\020\026\043\001\002\000\004\023\054\001\002\000" +
    "\012\020\022\025\027\026\014\027\034\001\002\000\012" +
    "\020\ufff0\025\ufff0\026\ufff0\027\ufff0\001\002\000\012\020" +
    "\022\025\027\026\014\027\034\001\002\000\004\021\050" +
    "\001\002\000\004\016\051\001\002\000\030\004\036\005" +
    "\020\010\037\011\021\012\024\014\025\017\ufff8\020\022" +
    "\025\027\026\014\027\034\001\002\000\004\017\053\001" +
    "\002\000\030\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\017\ufff2\020\ufff2\025\ufff2\026\ufff2\027\ufff2\001" +
    "\002\000\012\020\ufff1\025\ufff1\026\ufff1\027\ufff1\001\002" +
    "\000\004\017\ufffb\001\002\000\012\020\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\001\002\000\012\020\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\001\002\000\012\020\022\025\027\026\014\027" +
    "\034\001\002\000\012\020\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\001\002\000\012\020\uffe0\025\uffe0\026\uffe0\027\uffe0\001" +
    "\002\000\012\020\uffde\025\uffde\026\uffde\027\uffde\001\002" +
    "\000\012\021\uffea\022\uffea\023\uffea\033\uffea\001\002\000" +
    "\012\020\022\025\027\026\014\027\034\001\002\000\012" +
    "\020\uffdc\025\uffdc\026\uffdc\027\uffdc\001\002\000\012\020" +
    "\022\025\027\026\014\027\034\001\002\000\012\020\uffda" +
    "\025\uffda\026\uffda\027\uffda\001\002\000\012\020\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\001\002\000\036\021\uffe6\022\uffe6" +
    "\023\uffe6\031\065\032\067\033\uffe6\034\071\035\066\037" +
    "\061\040\056\041\062\042\063\044\057\045\070\001\002" +
    "\000\012\021\uffe8\022\uffe8\023\uffe8\033\uffe8\001\002\000" +
    "\036\021\uffe6\022\uffe6\023\uffe6\031\065\032\067\033\uffe6" +
    "\034\071\035\066\037\061\040\056\041\062\042\063\044" +
    "\057\045\070\001\002\000\012\021\uffe9\022\uffe9\023\uffe9" +
    "\033\uffe9\001\002\000\036\021\uffe6\022\uffe6\023\uffe6\031" +
    "\065\032\067\033\uffe6\034\071\035\066\037\061\040\056" +
    "\041\062\042\063\044\057\045\070\001\002\000\012\021" +
    "\uffe7\022\uffe7\023\uffe7\033\uffe7\001\002\000\004\017\ufffe" +
    "\001\002\000\004\017\ufffa\001\002\000\004\017\uffff\001" +
    "\002\000\010\021\uffed\022\uffed\023\uffed\001\002\000\012" +
    "\020\022\025\027\026\014\027\034\001\002\000\012\021" +
    "\uffeb\022\uffeb\023\uffeb\033\104\001\002\000\010\021\uffec" +
    "\022\uffec\023\uffec\001\002\000\004\030\110\001\002\000" +
    "\004\022\111\001\002\000\004\026\112\001\002\000\006" +
    "\021\uffce\022\116\001\002\000\004\021\114\001\002\000" +
    "\004\023\115\001\002\000\030\004\uffef\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\017\uffef\020\uffef\025\uffef\026" +
    "\uffef\027\uffef\001\002\000\004\026\112\001\002\000\004" +
    "\021\uffd0\001\002\000\004\021\uffcf\001\002\000\012\020" +
    "\022\025\027\026\014\027\034\001\002\000\004\021\123" +
    "\001\002\000\004\016\124\001\002\000\030\004\036\005" +
    "\020\010\037\011\021\012\024\014\025\017\ufff8\020\022" +
    "\025\027\026\014\027\034\001\002\000\004\017\126\001" +
    "\002\000\032\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\127\014\ufff4\017\ufff4\020\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\001\002\000\006\012\024\016\132\001\002\000\030" +
    "\004\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\017" +
    "\ufff7\020\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002\000\030" +
    "\004\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\017" +
    "\ufff6\020\ufff6\025\ufff6\026\ufff6\027\ufff6\001\002\000\030" +
    "\004\036\005\020\010\037\011\021\012\024\014\025\017" +
    "\ufff8\020\022\025\027\026\014\027\034\001\002\000\004" +
    "\017\134\001\002\000\030\004\ufff5\005\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\017\ufff5\020\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\001\002\000\004\017\ufffd\001\002\000\004\021" +
    "\137\001\002\000\036\021\uffe2\022\uffe2\023\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\044\uffe2\045\uffe2\001\002\000\012\020\022" +
    "\025\027\026\014\027\034\001\002\000\004\021\142\001" +
    "\002\000\004\016\143\001\002\000\030\004\036\005\020" +
    "\010\037\011\021\012\024\014\025\017\ufff8\020\022\025" +
    "\027\026\014\027\034\001\002\000\004\017\145\001\002" +
    "\000\030\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\014" +
    "\ufff3\017\ufff3\020\ufff3\025\ufff3\026\ufff3\027\ufff3\001\002" +
    "\000\030\004\uffee\005\uffee\010\uffee\011\uffee\012\uffee\014" +
    "\uffee\017\uffee\020\uffee\025\uffee\026\uffee\027\uffee\001\002" +
    "\000\010\022\152\023\uffd5\034\154\001\002\000\004\023" +
    "\151\001\002\000\030\004\uffd7\005\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\014\uffd7\017\uffd7\020\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\001\002\000\004\026\147\001\002\000\004\023\uffd6" +
    "\001\002\000\012\020\022\025\027\026\014\027\034\001" +
    "\002\000\004\023\uffd3\001\002\000\006\022\157\023\uffd1" +
    "\001\002\000\004\026\147\001\002\000\004\023\uffd2\001" +
    "\002\000\004\023\uffd4\001\002\000\004\002\000\001\002" +
    "\000\004\017\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\014\004\022\007" +
    "\034\012\031\013\027\014\037\016\016\020\025\022\032" +
    "\024\030\025\015\026\012\001\001\000\032\003\162\004" +
    "\022\007\034\012\031\013\027\014\037\016\016\020\025" +
    "\022\032\024\030\025\015\026\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\135\020\025\022\032\001\001\000\032\003\134\004\022" +
    "\007\034\012\031\013\027\014\037\016\016\020\025\022" +
    "\032\024\030\025\015\026\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\102\001\001\000\002\001" +
    "\001\000\032\003\101\004\022\007\034\012\031\013\027" +
    "\014\037\016\016\020\025\022\032\024\030\025\015\026" +
    "\012\001\001\000\032\003\100\004\022\007\034\012\031" +
    "\013\027\014\037\016\016\020\025\022\032\024\030\025" +
    "\015\026\012\001\001\000\032\003\077\004\022\007\034" +
    "\012\031\013\027\014\037\016\016\020\025\022\032\024" +
    "\030\025\015\026\012\001\001\000\006\021\063\023\057" +
    "\001\001\000\002\001\001\000\032\003\054\004\022\007" +
    "\034\012\031\013\027\014\037\016\016\020\025\022\032" +
    "\024\030\025\015\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\040\004\022\007\034\012\031" +
    "\013\027\014\037\016\016\020\025\022\032\024\030\025" +
    "\015\026\012\001\001\000\002\001\001\000\010\010\043" +
    "\025\015\026\044\001\001\000\002\001\001\000\012\004" +
    "\045\016\016\020\025\022\032\001\001\000\002\001\001" +
    "\000\010\016\046\020\025\022\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\051\004\022\007\034" +
    "\012\031\013\027\014\037\016\016\020\025\022\032\024" +
    "\030\025\015\026\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\073\001\001\000\002\001\001\000\004" +
    "\022\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\072\023\057\001\001\000\002\001\001\000\006" +
    "\021\074\023\057\001\001\000\002\001\001\000\006\021" +
    "\076\023\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\104\022\032\001\001\000\004\017\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\112\001\001\000\004\035\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\121\020\025\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\124\004\022\007\034\012\031" +
    "\013\027\014\037\016\016\020\025\022\032\024\030\025" +
    "\015\026\012\001\001\000\002\001\001\000\004\006\127" +
    "\001\001\000\004\013\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\132\004\022\007\034\012\031" +
    "\013\027\014\037\016\016\020\025\022\032\024\030\025" +
    "\015\026\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\140\020\025\022\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\143\004\022\007\034\012" +
    "\031\013\027\014\037\016\016\020\025\022\032\024\030" +
    "\025\015\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\160\001\001\000" +
    "\002\001\001\000\012\016\155\020\025\022\032\032\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<String> errores = new ArrayList();
    
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {




  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INTEGER MAIN PARINIT PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= if statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= while statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= exp statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= declaration statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= asig statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= printf statement 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if ::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("if",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t ::= ELSE if 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t ::= ELSE KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // while ::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("while",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // for ::= FOR PARINIT forid exp finalexpression PARFIN KEYINIT statement KEYFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("for",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // forid ::= IDE SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // forid ::= declaration 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("forid",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // printf ::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("printf",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= finalexpression SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // finalexpression ::= ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("finalexpression",12, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arp ::= OPSUM ta arp 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arp ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arp",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ta ::= fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ta",14, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tap ::= OPMULT fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tap ::= OPDIV fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tap ::= oprel fa tap 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tap ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tap",15, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fa ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fa ::= NUM 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fa ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fa ::= PARINIT finalexpression PARFIN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("fa",16, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // oprel ::= OPGRA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // oprel ::= OPGRAEP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // oprel ::= OPLESS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oprel ::= OPLESSEQ 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // oprel ::= OPASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // oprel ::= OPCOMP 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // oprel ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // oprel ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("oprel",17, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= type decid SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decid ::= IDE decasig 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decid ::= IDE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decid",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decasig ::= COMMA decid 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decasig ::= OPASIG decright 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decasig",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decright ::= finalexpression COMMA decid 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decright",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decright ::= finalexpression 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decright",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // params ::= IDE paramsb 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsb ::= COMMA params 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsb ::= 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("paramsb",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
