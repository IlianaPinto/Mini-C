/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Analizador;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        bt_seleccionar = new javax.swing.JButton();
        bt_probar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        bt_guardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextErrores = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_cuadruplos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ta_codigo_final = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador Mini-C");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        bt_seleccionar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_seleccionar.setText("Seleccionar Archivo");
        bt_seleccionar.setName("bt_seleccionar"); // NOI18N
        bt_seleccionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_seleccionarMouseClicked(evt);
            }
        });

        bt_probar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_probar.setText("Probar");
        bt_probar.setName("bt_probar"); // NOI18N
        bt_probar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_probarMouseClicked(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        bt_guardar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_guardar.setText("Guardar");
        bt_guardar.setName("bt_guardar"); // NOI18N
        bt_guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_guardarMouseClicked(evt);
            }
        });

        TextErrores.setColumns(20);
        TextErrores.setRows(5);
        jScrollPane2.setViewportView(TextErrores);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Archivo: ");

        titulo.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        titulo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bt_seleccionar)
                        .addGap(18, 18, 18)
                        .addComponent(bt_guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                        .addComponent(bt_probar)
                        .addGap(25, 25, 25))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titulo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(titulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_seleccionar)
                    .addComponent(bt_probar)
                    .addComponent(bt_guardar))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Compilador", jPanel1);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        table_cuadruplos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Op", "Arg1", "Arg2", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_cuadruplos);

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cuadruplos:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cu√°druplos", jPanel2);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        ta_codigo_final.setColumns(20);
        ta_codigo_final.setRows(5);
        jScrollPane4.setViewportView(ta_codigo_final);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Codigo final", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_probarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_probarMouseClicked
        try {
            //File file = new File("C:\\Users\\HP\\Desktop\\Periodo actual\\Compi\\Mini-C\\Interfaz\\src\\Analizador\\prb.txt");
            Lexer lexer = new Lexer(new FileReader(fichero));
            ASintactico p = new ASintactico(lexer);
            //System.out.println("**************************************************");
            p.parse();
            System.out.println("**************************************************");
            this.TextErrores.setText("");
            ArrayList<String> lexi = lexer.errores;
            ArrayList<String> l = p.errores;

            //semantico
            tabla.clear();
            funciones.clear();
            decfunciones.clear();
            errores_semanticos.clear();
            TreeNode root = p.Tree;
            recorrer(root);

            int m = verificar_main();
            switch (m) {
                case 0:
                    System.out.println("No existe main");//*******
                    this.errores_semanticos.add("No existe main.");
                    break;
                case 1:
                    System.out.println("Bien");//*******
                    break;
                default:
                    System.out.println("Hay m√°s de 1 main");//*******
                    this.errores_semanticos.add("Hay m√°s de 1 main.");
                    break;
            }

            for (int i = 0; i < tabla.size(); i++) {
                System.out.println("Variable: Tipo = " + tabla.get(i).getTipo() + " , Id = " + tabla.get(i).getId() + " , Ambito = " + tabla.get(i).getAmbito() + " , Offset = " + tabla.get(i).getOffset());
            }
            for (int i = 0; i < funciones.size(); i++) {
                System.out.println("Funcion: Tipo = " + funciones.get(i).getTipo() + " , Id = " + funciones.get(i).getId());
                System.out.println("Parametros:");
                for (int j = 0; j < funciones.get(i).getParams().size(); j++) {
                    System.out.print((j + 1) + " Tipo = " + funciones.get(i).getParams().get(j).getTipo() + " Id = ");
                    System.out.println(funciones.get(i).getParams().get(j).getId() + " Ambito = " + funciones.get(i).getParams().get(j).getAmbito());
                }
            }
            for (int i = 0; i < this.decfunciones.size(); i++) {
                System.out.println("DECFUNC: " + this.decfunciones.get(i).getId());
                for (int j = 0; j < this.decfunciones.get(i).getParams().size(); j++) {
                    System.out.println(this.decfunciones.get(i).getParams().get(j).getTipo());
                }
            }
            //************
            if (l.isEmpty() && lexi.isEmpty() && errores_semanticos.isEmpty()) {
                this.TextErrores.append("Compilado sin errores!");
                //codigo intermedio
                this.cuadruplos.clear();
                this.cont_temp = 0;
                this.cont_etiq = 0;
                this.mensajes.clear();
                codigo_intermedio(root);
                System.out.println("*******CUADRUPLOS*******");

                DefaultTableModel model = (DefaultTableModel) table_cuadruplos.getModel();
                model.setRowCount(0);
                for (int i = 0; i < this.cuadruplos.size(); i++) {
                    model.addRow(this.cuadruplos.get(i).retorno_tabla());
                    System.out.println(this.cuadruplos.get(i).toString());
                }

                //codigo final
                codigo_final();
            }
            for (int i = 0; i < lexi.size(); i++) {
                this.TextErrores.append(lexi.get(i) + "\n");
            }
            for (int i = 0; i < l.size(); i++) {
                this.TextErrores.append(l.get(i) + "\n");
            }
            for (int i = 0; i < errores_semanticos.size(); i++) {
                this.TextErrores.append(errores_semanticos.get(i) + "\n");
            }
        } catch (Exception e) {
            System.out.println("ERROR");
            e.printStackTrace();
        }
    }//GEN-LAST:event_bt_probarMouseClicked

    private void bt_seleccionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_seleccionarMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            fichero = fileChooser.getSelectedFile();

            FileReader fr = null;
            BufferedReader bf = null;
            try {
                fr = new FileReader(fichero);
                bf = new BufferedReader(fr);
                String linea;
                this.TextArea.setText("");
                this.TextErrores.setText("");
                while ((linea = bf.readLine()) != null) {
                    this.TextArea.append(linea + "\n");
                }
                this.titulo.setText(fichero.getName());
            } catch (Exception e) {
            } finally {
                try {
                    fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_bt_seleccionarMouseClicked

    private void bt_guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_guardarMouseClicked

        FileWriter fichero2 = null;
        PrintWriter pw = null;
        try {
            fichero2 = new FileWriter(fichero.getAbsolutePath());
            pw = new PrintWriter(fichero2);
            pw.print(this.TextArea.getText());
            this.TextErrores.setText("");
            JOptionPane.showMessageDialog(this, "Archivo guardado");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado un archivo");
            //e.printStackTrace();
        } finally {
            try {
                if (null != fichero2) {
                    fichero2.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(this, "Ocurrio un error");
                //e2.printStackTrace();
            }
        }

    }//GEN-LAST:event_bt_guardarMouseClicked

    //Metodos
    //semantico
    public void recorrer(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            if (nodo.getVal().equals("Declaracion")) {
                String tipo = "";
                String id = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo += "*";
                        }
                    } else if (hijo.getVal().equals("*")) {
                        tipo += "*";
                    } else if (hijo.getVal().equals("ID")) {
                        id += hijo.getHijos().get(0).getVal();
                        if (verificar_variable(id)) {
                            //System.out.println("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                            this.errores_semanticos.add("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                        } else {
                            if (tipo.equals("char")) {
                                this.offset += 1;
                            } else {
                                int mod = 4 - (this.offset % 4);
                                if (mod == 4) {
                                    this.offset += 4;
                                } else {
                                    this.offset += 4 + mod;
                                }
                            }
                            this.tabla.add(new Variable(tipo, id, this.ambito_actual, this.offset));
                        }
                        if (tipo.contains("*")) {
                            tipo = tipo.substring(0, tipo.length() - 1);
                        }
                        id = "";
                    }
                }
            } else if (nodo.getVal().equals("Funcion")) {
                String tipo_f = "";
                String id_f = "";
                this.offset = 0;
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo_f = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().size() > 1) {
                            if (hijo.getHijos().get(1).getVal().equals("*")) {
                                tipo_f += "*";
                            }
                        }

                        this.tipo_actual = tipo_f;
                    } else if (hijo.getVal().equals("ID")) {
                        id_f += hijo.getHijos().get(0).getVal();
                        this.ambito_actual = id_f;
                        if (!id_f.equals("main")) {
                            this.offset = 8;
                        }
                    } else if (hijo.getVal().equals("p") || hijo.getVal().equals("#")) {
                        if (!"".equals(tipo_f)) {
                            ArrayList<Variable> v = parametros(hijo, new ArrayList<>());
                            Funcion func = (new Funcion(tipo_f, id_f));
                            func.agregar_params(v);

                            boolean verificar = false;
                            String ambito1 = "", id1 = "";
                            for (int i = 0; i < v.size() - 1; i++) {
                                for (int j = i + 1; j < v.size(); j++) {
                                    if (v.get(i).id.equals(v.get(j).id) && v.get(i).ambito.equals(v.get(j).ambito)) {
                                        verificar = true;
                                        ambito1 = v.get(i).ambito;
                                        id1 = v.get(i).id;
                                    }
                                }
                            }

                            if (verificar) {
                                System.out.println("Hay parametros que se llaman igual");
                            } else {
                                //System.out.println("No hay parametros que se llamen igual");
                            }

                            if (verificar_funcion(id_f)) {
                                if (!verificar) {
                                    this.funciones.add(func);
                                    for (Variable variable : v) {
                                        tabla.add(variable);
                                    }
                                } else {
                                    this.errores_semanticos.add("La variable " + id1 + " fue definida m√°s de una vez en la funci√≥n " + ambito1);
                                }

                            } else {
                                //System.out.println("La funcion " + id_f + " fue declarada m√°s de una vez.");
                                this.errores_semanticos.add("La funcion " + id_f + " fue declarada m√°s de una vez.");
                            }

                            tipo_f = "";
                            id_f = "";
                        }
                    } else {
                        recorrer(hijo);
                    }
                }
            } else if (nodo.getVal().equals("DecFuncion")) {
                String tipo_f = "";
                String id_f = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo_f = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo_f += "*";
                        }
                    } else if (hijo.getVal().equals("ID")) {
                        id_f += hijo.getHijos().get(0).getVal();
                        this.ambito_actual = id_f;
                    } else if (hijo.getVal().equals("p") || hijo.getVal().equals("#")) {
                        if (!"".equals(tipo_f)) {
                            ArrayList<Variable> v = parametros(hijo, new ArrayList<>());
                            Funcion func = (new Funcion(tipo_f, id_f));
                            func.agregar_params(v);
                            if (verificar_decfunc(id_f)) {
                                this.decfunciones.add(func);
                            } else {
                                //System.out.println("La funcion " + id_f + " fue definida m√°s de una vez.");
                                this.errores_semanticos.add("La funcion " + id_f + " fue definida m√°s de una vez.");
                            }

                            tipo_f = "";
                            id_f = "";
                        }
                    } else {
                        recorrer(hijo);
                    }
                }
            } else if (nodo.getVal().equals("Exp")) {
                this.variables.clear();
                this.constantes.clear();
                this.operadores.clear();
                variables_expresion(nodo);
                boolean ambitos = true;
                for (int i = 0; i < this.variables.size(); i++) {
                    if (!verificar_variables_exp(this.variables.get(i))) {
                        //System.out.println("La variable " + variables.get(i) + " No existe o no est√° en la funcion " + this.ambito_actual);
                        this.errores_semanticos.add("La variable " + variables.get(i) + " No existe o no est√° en la funcion " + this.ambito_actual);
                        ambitos = false;
                    }
                }
                boolean rel = false;
                if (this.operadores.size() > 0) {
                    String first = this.operadores.get(0);
                    if (!(first.equals("*") || first.equals("/") || first.equals("+") || first.equals("-"))) {
                        rel = true;
                    }
                }
                boolean type = false;
                if (rel) {
                    for (int i = 1; i < this.operadores.size(); i++) {
                        String j = this.operadores.get(i);
                        if (j.equals("*") || j.equals("/") || j.equals("+") || j.equals("-")) {
                            type = true;
                        }
                    }
                } else {
                    for (int i = 1; i < this.operadores.size(); i++) {
                        String j = this.operadores.get(i);
                        if (!(j.equals("*") || j.equals("/") || j.equals("+") || j.equals("-"))) {
                            type = true;
                        }
                    }
                }
                if (type) {
                    this.errores_semanticos.add("Expresi√≥n en la funci√≥n " + this.ambito_actual + " combina aritmeticas y booleanas");
                } else {
                    if (rel) {
                        nodo.setVal("ExpBool");
                    }
                }
                if (ambitos) {
                    ArrayList<Variable> tipos = new ArrayList<>();
                    for (int i = 0; i < this.variables.size(); i++) {
                        String v = this.variables.get(i);
                        boolean pointer = false;
                        boolean ampersant = false;
                        if (v.charAt(0) == '*') {
                            v = v.substring(1);
                            pointer = true;
                        }
                        if (v.charAt(0) == '&') {
                            v = v.substring(1);
                            ampersant = true;
                        }
                        boolean global = true;
                        for (int j = 0; j < this.tabla.size(); j++) {
                            if (v.equals(this.tabla.get(j).getId()) && (this.tabla.get(j).getAmbito().equals(this.ambito_actual))) {
                                global = false;
                                if (pointer) {
                                    if (this.tabla.get(j).getTipo().contains("*")) {
                                        Variable vai = new Variable(this.tabla.get(j).getTipo(), this.tabla.get(j).getId(), this.tabla.get(j).getAmbito());
                                        vai.setTipo(vai.getTipo().substring(0, vai.getTipo().length() - 1));
                                        tipos.add(vai);
                                    } else {
                                        //System.out.println("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                        this.errores_semanticos.add("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                    }
                                } else if (ampersant) {
                                    if (!this.tabla.get(j).getTipo().contains("*")) {
                                        Variable vai = new Variable(this.tabla.get(j).getTipo(), this.tabla.get(j).getId(), this.tabla.get(j).getAmbito());
                                        vai.setTipo(vai.getTipo() + "*");
                                        tipos.add(vai);
                                    } else {
                                        //System.out.println("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                        this.errores_semanticos.add("Est√° intentando usar & en una variable es pointer " + this.tabla.get(j).getId());
                                    }
                                } else {
                                    tipos.add(this.tabla.get(j));
                                }

                            }
                        }
                        if (global) {
                            for (int j = 0; j < this.tabla.size(); j++) {
                                if (v.equals(this.tabla.get(j).getId()) && (this.tabla.get(j).getAmbito().equals("1Global"))) {
                                    global = false;
                                    if (pointer) {
                                        if (this.tabla.get(j).getTipo().contains("*")) {
                                            Variable vai = new Variable(this.tabla.get(j).getTipo(), this.tabla.get(j).getId(), this.tabla.get(j).getAmbito());
                                            vai.setTipo(vai.getTipo().substring(0, vai.getTipo().length() - 1));
                                            tipos.add(vai);
                                        } else {
                                            //System.out.println("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                            this.errores_semanticos.add("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                        }
                                    } else if (ampersant) {
                                        if (!this.tabla.get(j).getTipo().contains("*")) {
                                            Variable vai = new Variable(this.tabla.get(j).getTipo(), this.tabla.get(j).getId(), this.tabla.get(j).getAmbito());
                                            vai.setTipo(vai.getTipo() + "*");
                                            tipos.add(vai);
                                        } else {
                                            //System.out.println("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                            this.errores_semanticos.add("Est√° intentando usar & en una variable es pointer " + this.tabla.get(j).getId());
                                        }
                                    } else {
                                        tipos.add(this.tabla.get(j));
                                    }

                                }
                            }
                        }
                    }
                    String tipo_1 = "";
                    if (tipos.size() > 0) {
                        tipo_1 = tipos.get(0).getTipo();
                    }

                    boolean tipos_iguales = true;
                    for (int i = 1; i < tipos.size(); i++) {
                        if (!tipos.get(i).getTipo().equals(tipo_1)) {
                            tipos_iguales = false;
                            //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " variable " + tipos.get(i).getId());
                            this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " variable " + tipos.get(i).getId());
                        }
                    }
                    if (!tipo_1.equals("")) {
                        for (int i = 0; i < this.constantes.size(); i++) {
                            if (!this.constantes.get(i).equals(tipo_1)) {
                                tipos_iguales = false;
                                //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                                this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                            }
                        }
                    } else {
                        if (this.constantes.size() > 0) {
                            tipo_1 = this.constantes.get(0);
                        }
                        for (int i = 1; i < this.constantes.size(); i++) {
                            if (!this.constantes.get(i).equals(tipo_1)) {
                                tipos_iguales = false;
                                //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                                this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                            }
                        }
                    }
                    if (tipo_1.contains("char") && !this.operadores.isEmpty()) {
                        this.errores_semanticos.add("No se pueden operar caracteres, funcion " + this.ambito_actual);
                    }
                    if (tipo_1.contains("*") && !this.operadores.isEmpty()) {
                        this.errores_semanticos.add("No se pueden operar punteros, funcion " + this.ambito_actual);
                    }
                    if (this.return_flag) {
                        if (!tipo_1.equals(this.tipo_actual)) {
                            //System.out.println("El tipo del return en la funcion " + this.ambito_actual + " no corresponde.");
                            this.errores_semanticos.add("El tipo del return en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.return_flag = false;
                    }
                    if (this.printf_flag) {
                        if (!tipo_1.equals(this.printf_tipo)) {
                            this.errores_semanticos.add("El tipo del printf en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.printf_flag = false;
                    }
                    if (this.asig_flag) {
                        if (!tipo_1.equals(this.asig_tipo)) {
                            this.errores_semanticos.add("El tipo de la asignacion en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.asig_flag = false;
                    }
                }

            } else if (nodo.getVal().equals("DecGlobal")) {
                String tipo = "";
                String id = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo += "*";
                        }
                    } else if (hijo.getVal().equals("*")) {
                        tipo += "*";
                    } else if (hijo.getVal().equals("ID")) {
                        id += hijo.getHijos().get(0).getVal();
                        if (verificar_variable_global(id)) {
                            //System.out.println("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                            this.errores_semanticos.add("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                        } else {
                            this.tabla.add(new Variable(tipo, id, "1Global"));
                        }
                        if (tipo.contains("*")) {
                            tipo = tipo.substring(0, tipo.length() - 1);
                        }
                        id = "";
                    }
                }
            } else if (nodo.getVal().equals("return")) {
                this.return_flag = true;
                recorrer(nodo.getHijos().get(0));
            } else if (nodo.getVal().equals("Printf")) {
                String cadena = nodo.getHijos().get(0).getVal();
                String acum = "";
                this.printf_tipo = "";
                int cont = 0;
                for (int i = 0; i < cadena.length(); i++) {
                    if (cadena.charAt(i) == '%') {
                        acum += '%';
                    } else if (cadena.charAt(i) == 'd' || cadena.charAt(i) == 'c') {
                        if (acum.length() > 0) {
                            cont++;
                            acum = "";
                            if (cadena.charAt(i) == 'd') {
                                this.printf_tipo = "int";
                            } else {
                                this.printf_tipo = "char";
                            }
                        }
                    }
                }
                if (cont > 1) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " espera m√°s parametros de los que requiere.");
                } else if (cont == 0 && !nodo.getHijos().get(1).getVal().equals("#")) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " contiene m√°s par√°metros de lo esperado.");
                } else if (cont == 1 && nodo.getHijos().get(1).getVal().equals("#")) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " no contiene el par√°metro esperado.");
                } else if (cont == 0 && nodo.getHijos().get(1).getVal().equals("#")) {

                } else {
                    this.printf_flag = true;
                    recorrer(nodo.getHijos().get(1));
                }
            } else if (nodo.getVal().equals("Scanf")) {
                String cadena = nodo.getHijos().get(0).getVal();
                String ampersant = nodo.getHijos().get(1).getVal();
                String id = nodo.getHijos().get(2).getHijos().get(0).getVal();
                String tipo_scan = "";
                if (cadena.equals("%d") || cadena.equals("%c")) {
                    if (cadena.equals("%d")) {
                        tipo_scan = "int";
                    } else {
                        tipo_scan = "char";
                    }
                    if (ampersant.equals("#")) {
                        tipo_scan += "*";
                    }
                    if (verificar_variable(id)) {
                        if (!tipo_scan.equals(tipo_var(id))) {
                            this.errores_semanticos.add("Los tipos en el scanf de la funcion " + this.ambito_actual + " no concuerdan");
                        }
                    } else {
                        if (verificar_variable_global(id)) {
                            if (!tipo_scan.equals(tipo_var(id))) {
                                this.errores_semanticos.add("Los tipos en el scanf de la funcion " + this.ambito_actual + " no concuerdan");
                            }
                        } else {
                            this.errores_semanticos.add("La variable " + id + " en el Scanf en la funcion " + this.ambito_actual + " no existe");
                        }
                    }
                } else {
                    this.errores_semanticos.add("Scanf en la funcion " + this.ambito_actual + " debe ser %d o %c");
                }
            } else if (nodo.getVal().equals("Asig")) {
                String variable = nodo.getHijos().get(0).getHijos().get(0).getVal();
                if (!verificar_variables_exp(variable)) {
                    this.errores_semanticos.add("La variable " + variable + " No existe o no est√° en la funcion " + this.ambito_actual);
                } else {
                    this.asig_flag = true;
                    this.asig_tipo = tipo_var(variable);
                    recorrer(nodo.getHijos().get(1));
                }
            } else {
                for (TreeNode hijo : nodo.getHijos()) {
                    recorrer(hijo);
                }
            }
        }
    }

    public ArrayList<Variable> parametros(TreeNode tn, ArrayList<Variable> arr) {
        if (!tn.getHijos().isEmpty()) {
            for (TreeNode hijo : tn.getHijos()) {
                if (hijo.getVal().equals("Tipo")) {
                    Variable v = new Variable(hijo.getHijos().get(0).getVal(), "", this.ambito_actual);
                    if (!"#".equals(hijo.getHijos().get(1).getVal())) {
                        v.setTipo(v.getTipo() + "*");
                    }
                    if (v.getTipo().equals("char")) {
                        this.offset += 1;
                    } else {
                        int mod = 4 - (this.offset % 4);
                        if (mod == 4) {
                            this.offset += 4;
                        } else {
                            this.offset += 4 + mod;
                        }
                    }
                    v.setOffset(this.offset);
                    arr.add(v);
                } else if (hijo.getVal().equals("ID")) {
                    arr.get(arr.size() - 1).setId(hijo.getHijos().get(0).getVal());
                } else if (hijo.getVal().equals("p")) {
                    return parametros(hijo, arr);
                }
            }
        }
        return arr;
    }

    public boolean verificar_variable(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (variable.equals(this.tabla.get(i).getId()) && this.ambito_actual.equals(this.tabla.get(i).getAmbito())) {
                ret = true;
            }
        }
        return ret;
    }

    public boolean verificar_variable_global(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (variable.equals(this.tabla.get(i).getId()) && ("1Global").equals(this.tabla.get(i).getAmbito())) {
                ret = true;
            }
        }
        for (int i = 0; i < this.funciones.size(); i++) {
            if (variable.equals(this.funciones.get(i).getId())) {
                ret = true;
            }
        }
        for (int i = 0; i < this.decfunciones.size(); i++) {
            if (variable.equals(this.decfunciones.get(i).getId())) {
                ret = true;
            }
        }
        return ret;
    }

    public boolean verificar_variables_exp(String v) {
        boolean ret = false;
        if (v.charAt(0) == '*' || v.charAt(0) == '&') {
            v = v.substring(1);
        }
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(v) && (this.tabla.get(i).getAmbito().equals(this.ambito_actual) || this.tabla.get(i).getAmbito().equals("1Global"))) {
                ret = true;
            }
        }
        return ret;
    }

    public void variables_expresion(TreeNode root) {
        for (TreeNode hijo : root.getHijos()) {
            if (hijo.getVal().equals("ID")) {
                if (hijo.getHijos().get(0).getVal().equals("*")) {
                    this.variables.add("*" + hijo.getHijos().get(1).getVal());
                } else if (hijo.getHijos().get(0).getVal().equals("&")) {
                    this.variables.add("&" + hijo.getHijos().get(1).getVal());
                } else {
                    this.variables.add(hijo.getHijos().get(0).getVal());
                }
            } else if (hijo.getVal().equals("#")) {
            } else if (hijo.getVal().equals("Num")) {
                this.constantes.add("int");
            } else if (hijo.getVal().equals("ConstChar")) {
                this.constantes.add("char");
            } else if (hijo.getVal().equals("Funccall")) {
                String f = hijo.getHijos().get(0).getHijos().get(0).getVal();
                boolean exist = false;
                for (int i = 0; i < this.funciones.size(); i++) {
                    if (f.equals(this.funciones.get(i).getId())) {
                        this.constantes.add(this.funciones.get(i).tipo);
                        exist = true;
                    }
                }
                if (!exist) {
                    //System.out.println("La funcion " + f + " no existe");
                    this.errores_semanticos.add("La funcion " + f + " no existe");
                }
                this.funccall.clear();
                this.funccall.add(new ArrayList());//cambie esto
                funcion(hijo.getHijos().get(1));
                if (this.funccall.get(0).isEmpty()) {//puse esto
                    this.funccall.clear();
                }
                ArrayList<String> argumentos = new ArrayList<>();
                for (int i = 0; i < this.funccall.size(); i++) {
                    String tipo = "";
                    boolean same = true;
                    for (int j = 0; j < this.funccall.get(i).size(); j++) {
                        if (j == 0) {
                            tipo = this.funccall.get(i).get(j);
                            if (!"int".equals(tipo) && !"char".equals(tipo)) {
                                tipo = tipo_var(tipo);
                            }
                        } else {
                            if (!this.funccall.get(i).get(j).equals("int") && !this.funccall.get(i).get(j).equals("char")) {
                                String val = tipo_var(this.funccall.get(i).get(j));
                                if (!val.equals(tipo)) {
                                    same = false;
                                }
                            }
                        }
                    }
                    if (same) {
                        argumentos.add(tipo);
                    } else {
                        argumentos.add("#");
                        //System.out.println("La expresi√≥n " + i + " No sirve");
                        this.errores_semanticos.add("La expresi√≥n " + i + " No sirve");
                    }
                }
                Funcion func = new Funcion("", "");
                for (int i = 0; i < this.funciones.size(); i++) {
                    if (f.equals(this.funciones.get(i).getId())) {
                        func = this.funciones.get(i);
                    }
                }
                boolean correct = true;
                if (func.getParams().size() == argumentos.size()) {
                    for (int i = 0; i < argumentos.size(); i++) {
                        if (!func.getParams().get(i).getTipo().equals(argumentos.get(i))) {
                            correct = false;
                        }
                    }
                } else {
                    correct = false;
                }
                if (!correct && exist) {
                    //System.out.println("Los parametros al llamado a al funci√≥n " + f + " son incorrectos.");
                    this.errores_semanticos.add("Los parametros al llamado a al funci√≥n " + f + " son incorrectos.");
                }

            } else {
                if (!(hijo.getVal().equals("Exp"))) {
                    this.operadores.add(hijo.getVal());
                }
                variables_expresion(hijo);
            }
        }
    }

    public void funcion(TreeNode root) {
        if (!root.getHijos().isEmpty()) {
            for (TreeNode hijo : root.getHijos()) {
                if (hijo.getVal().equals("par")) {//puse esto
                    this.funccall.add(new ArrayList<>());
                    funcion(hijo);
                } else if (hijo.getVal().equals("Num")) {
                    this.funccall.get(this.funccall.size() - 1).add("int");
                } else if (hijo.getVal().equals("ID")) {
                    this.funccall.get(this.funccall.size() - 1).add(hijo.getHijos().get(0).getVal());
                } else if (hijo.getVal().equals("ConstChar")) {
                    this.funccall.get(this.funccall.size() - 1).add("char");
                } else {
                    funcion(hijo);
                }
            }
        }
    }

    public int verificar_main() {
        int cont = 0;
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals("main")) {
                cont++;
            }
        }
        return cont;
    }

    public boolean verificar_funcion(String id) {
        boolean ret = true;
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals(id)) {
                ret = false;
            }
        }
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id) && this.tabla.get(i).getAmbito().equals("1Global")) {
                ret = false;
            }
        }
        return ret;
    }

    public boolean verificar_decfunc(String id) {
        boolean ret = true;
        for (int i = 0; i < this.decfunciones.size(); i++) {
            if (this.decfunciones.get(i).getId().equals(id)) {
                ret = false;
            }
        }
        //esto agregu√©
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id) && this.tabla.get(i).getAmbito().equals("1Global")) {
                ret = false;
            }
        }
        return ret;
    }

    public String tipo_var(String id) {
        String ret = "";
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id)) {
                ret = this.tabla.get(i).getTipo();
            }
        }
        return ret;
    }

    //Codigo intermedio
    public void codigo_intermedio(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            switch (nodo.getVal()) {
                case "Funcion":
                    String nombre = nodo.getHijos().get(1).getHijos().get(0).getVal();
                    this.cuadruplos.add(new Cuadruplo("Func", nombre, "", ""));
                    nodo.getHijos().forEach((hijo) -> {
                        codigo_intermedio(hijo);
                    });
                    this.cuadruplos.add(new Cuadruplo("END", "", "", ""));
                    break;
                case "Statement":
                    nodo.setSiguiente(nuevaEtiqueta());
                    nodo.getHijos().forEach((hijo) -> {
                        codigo_intermedio(hijo);
                        if (hijo.getVal().equals("IF") || hijo.getVal().equals("While") || hijo.getVal().equals("For")) {
                            this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getSiguiente(), "", ""));
                            nodo.setSiguiente(nuevaEtiqueta());
                        }
                    });
                    break;
                case "IF":
                    if (nodo.getHijos().get(2).getVal().equals("#")) {
                        nodo.getHijos().get(0).setVerdadero(nuevaEtiqueta());
                        nodo.getHijos().get(0).setFalso(nodo.padre.getSiguiente());
                        codigo_intermedio(nodo.getHijos().get(0));
                        this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getVerdadero(), "", ""));
                        codigo_intermedio(nodo.getHijos().get(1));
                    } else {
                        nodo.getHijos().get(0).setVerdadero(nuevaEtiqueta());
                        nodo.getHijos().get(0).setFalso(nuevaEtiqueta());
                        codigo_intermedio(nodo.getHijos().get(0));
                        this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getVerdadero(), "", ""));
                        codigo_intermedio(nodo.getHijos().get(1));
                        this.cuadruplos.add(new Cuadruplo("GOTO", nodo.padre.getSiguiente(), "", ""));
                        this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getFalso(), "", ""));
                        codigo_intermedio(nodo.getHijos().get(2));
                    }
                    break;
                case "While":
                    nodo.setComienzo(nuevaEtiqueta());
                    nodo.getHijos().get(0).setVerdadero(nuevaEtiqueta());
                    nodo.getHijos().get(0).setFalso(nodo.padre.getSiguiente());     //pasar etiquetas al hijo
                    this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getComienzo(), "", ""));    // crear etiqueta comienzo
                    codigo_intermedio(nodo.getHijos().get(0));
                    this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getVerdadero(), "", ""));    // crear etiqueta verdadera
                    codigo_intermedio(nodo.getHijos().get(1));
                    this.cuadruplos.add(new Cuadruplo("GOTO", nodo.getComienzo(), "", ""));
                    break;
                case "For":
                    nodo.setComienzo(nuevaEtiqueta());
                    codigo_intermedio(nodo.getHijos().get(0));
                    nodo.getHijos().get(1).setVerdadero(nuevaEtiqueta());
                    nodo.getHijos().get(1).setFalso(nodo.padre.getSiguiente());
                    this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getComienzo(), "", ""));
                    codigo_intermedio(nodo.getHijos().get(1));
                    String etiq_exp = nuevaEtiqueta();
                    this.cuadruplos.add(new Cuadruplo("ETIQ", etiq_exp, "", ""));
                    codigo_intermedio(nodo.getHijos().get(2));
                    this.cuadruplos.add(new Cuadruplo("GOTO", nodo.getComienzo(), "", ""));
                    this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(1).getVerdadero(), "", ""));
                    codigo_intermedio(nodo.getHijos().get(3));
                    this.cuadruplos.add(new Cuadruplo("GOTO", etiq_exp, "", ""));
                    break;
                case "Exp":
                    this.exp_intermedio.clear();
                    expresion_arreglo(nodo);
                    this.exp_intermedio.remove(this.exp_intermedio.size() - 1);
                    this.exp_intermedio.remove(0);
                    System.out.println("");
                    operacion();
                    break;
                case "ExpBool":
                    this.exp_bool.clear();
                    bool_arreglo(nodo);
                    this.exp_bool.remove(this.exp_bool.size() - 1);
                    this.exp_bool.remove(0);
                    TreeNode root = arbol_bool();
                    root.setVerdadero(nodo.getVerdadero());
                    root.setFalso(nodo.getFalso());
                    print_bool(root);
                    generar_expbool(root);
                    break;
                case "Scanf":
                    this.cuadruplos.add(new Cuadruplo("Scanf", nodo.getHijos().get(0).getVal(), nodo.getHijos().get(2).getHijos().get(0).getVal(), ""));
                    break;
                case "Printf":
                    if (nodo.getHijos().get(1).getVal().equals("#")) {
                        this.cuadruplos.add(new Cuadruplo("Print", nodo.getHijos().get(0).getVal(), "", ""));
                    } else {
                        this.int_print_flag = true;
                        this.int_print_value = nodo.getHijos().get(0).getVal();
                        codigo_intermedio(nodo.getHijos().get(1));
                    }
                    String primera = "";
                    String segunda = "";
                    if (nodo.getHijos().get(0).getVal().contains("%d") || nodo.getHijos().get(0).getVal().contains("%c")) {
                        int d = 0;
                        if (nodo.getHijos().get(0).getVal().contains("%d")) {
                            d = nodo.getHijos().get(0).getVal().indexOf("%d");
                        } else {
                            d = nodo.getHijos().get(0).getVal().indexOf("%c");
                        }

                        if (d + 2 > nodo.getHijos().get(0).getVal().length()) {
                            segunda = "";
                        } else {
                            segunda = nodo.getHijos().get(0).getVal().substring(d + 2, nodo.getHijos().get(0).getVal().length());
                        }
                        primera = nodo.getHijos().get(0).getVal().substring(0, d);
                    } else {
                        primera = nodo.getHijos().get(0).getVal();
                    }
                    boolean existe_p = false;
                    boolean existe_s = false;
                    for (int i = 0; i < this.mensajes.size(); i++) {
                        if (primera.equals(this.mensajes.get(i))) {
                            existe_p = true;
                        }
                        if (segunda.equals(this.mensajes.get(i))) {
                            existe_s = true;
                        }
                    }
                    if (!existe_p && !primera.equals("%d") && !primera.equals("")) {
                        this.mensajes.add(primera);
                    }
                    if (!existe_s && !segunda.isEmpty()) {
                        this.mensajes.add(segunda);
                    }
                    break;
                case "return":
                    this.int_ret_flag = true;
                    codigo_intermedio(nodo.getHijos().get(0));
                    break;
                case "Asig":
                    this.int_asig_flag = true;
                    this.int_asig_value = nodo.getHijos().get(0).getHijos().get(0).getVal();
                //codigo_intermedio(nodo.getHijos().get(1));
                default:
                    nodo.getHijos().forEach((hijo) -> {
                        codigo_intermedio(hijo);
                    });
            }
        }
    }

    public void expresion_arreglo(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            switch (nodo.getVal()) {
                case "ID":
                    if (nodo.getHijos().get(0).getVal().equals("*") || nodo.getHijos().get(0).getVal().equals("&")) {
                        this.exp_intermedio.add(nodo.getHijos().get(1).getVal());
                    } else if (nodo.getHijos().get(1).getVal().equals("++")) {
                        //this.exp_intermedio.add("(");
                        this.exp_intermedio.add(nodo.getHijos().get(0).getVal() + "++");
                        //this.exp_intermedio.add("+");
                        //this.exp_intermedio.add("1");
                        //this.exp_intermedio.add(")");
                    } else if (nodo.getHijos().get(1).getVal().equals("--")) {
                        //this.exp_intermedio.add("(");
                        this.exp_intermedio.add(nodo.getHijos().get(0).getVal() + "--");
                        //this.exp_intermedio.add("-");
                        //this.exp_intermedio.add("1");
                        //this.exp_intermedio.add(")");
                    } else {
                        this.exp_intermedio.add(nodo.getHijos().get(0).getVal());
                    }
                    break;
                case "Num":
                    this.exp_intermedio.add(nodo.getHijos().get(0).getVal());
                    break;
                case "ConstChar":
                    this.exp_intermedio.add(nodo.getHijos().get(0).getVal());
                    break;
                case "Exp":
                    this.exp_intermedio.add("(");
                    for (TreeNode hijo : nodo.getHijos()) {
                        expresion_arreglo(hijo);
                    }
                    this.exp_intermedio.add(")");
                    break;
                case "Funccall":
                    this.exp_intermedio.add("1f_" + nodo.getHijos().get(0).getHijos().get(0).getVal());
                    int size = this.exp_intermedio.size();
                    params_exp(nodo.getHijos().get(1));
                    if (size != this.exp_intermedio.size()) {
                        this.exp_intermedio.remove(this.exp_intermedio.size() - 1);
                    }
                    this.exp_intermedio.add("2f");
                    break;
                default:
                    if (!nodo.getVal().equals("#")) {
                        this.exp_intermedio.add(nodo.getVal());
                        for (TreeNode hijo : nodo.getHijos()) {
                            expresion_arreglo(hijo);
                        }
                    }
            }
        }

    }

    public void bool_arreglo(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            switch (nodo.getVal()) {
                case "ID":
                    if (nodo.getHijos().get(0).getVal().equals("*") || nodo.getHijos().get(0).getVal().equals("&")) {
                        this.exp_bool.add(nodo.getHijos().get(1).getVal());
                    } else {
                        this.exp_bool.add(nodo.getHijos().get(0).getVal());
                    }
                    break;
                case "Num":
                    this.exp_bool.add(nodo.getHijos().get(0).getVal());
                    break;
                case "ConstChar":
                    this.exp_bool.add(nodo.getHijos().get(0).getVal());
                    break;
                case "Exp":
                case "ExpBool":
                    this.exp_bool.add("(");
                    for (TreeNode hijo : nodo.getHijos()) {
                        bool_arreglo(hijo);
                    }
                    this.exp_bool.add(")");
                    break;
                default:
                    if (!nodo.getVal().equals("#")) {
                        this.exp_bool.add(nodo.getVal());
                        for (TreeNode hijo : nodo.getHijos()) {
                            bool_arreglo(hijo);
                        }
                    }
                    break;
            }
        }
    }

    public TreeNode arbol_bool() {
        int contadOR = 0;
        int cont = 0;
        TreeNode E = new TreeNode("E", null, ++cont);
        for (int i = 0; i < this.exp_bool.size(); i++) {
            switch (this.exp_bool.get(i)) {
                case "||":
                    if (contadOR == 0) {
                        agregar(E, new TreeNode("E", null, ++cont));
                        agregar(E, new TreeNode("E", null, ++cont));
                        agregar(E, new TreeNode("||", null, ++cont));
                        agregar(E, new TreeNode("E", null, ++cont));
                        contadOR++;
                    } else {
                        agregar(E, new TreeNode("E", null, ++cont));
                        agregar(E, new TreeNode("||", null, ++cont));
                        agregar(E, new TreeNode("E", null, ++cont));
                    }
                    break;
                case "&&":
                    if (contadOR == 0) {
                        agregar(E, new TreeNode("E", null, ++cont));
                        agregar(E, new TreeNode("&&", null, ++cont));
                        agregar(E, new TreeNode("E", null, ++cont));
                    } else {
                        agregar(E, new TreeNode("&&", null, ++cont));
                        agregar(E, new TreeNode("E", null, ++cont));
                    }
                    contadOR = 0;
                    break;
                default:
            }
        }
        int contV = 1;
        TreeNode a1 = new TreeNode("E", null, 0), a2 = new TreeNode("E", null, 0), a3;
        for (int i = 0; i < this.exp_bool.size(); i++) {
            if (!(this.exp_bool.get(i).equals("&&") || this.exp_bool.get(i).equals("||"))) {
                switch (contV) {
                    case 1:
                        a1 = new TreeNode(this.exp_bool.get(i), null, ++cont);
                        contV++;
                        break;
                    case 2:
                        a2 = new TreeNode(this.exp_bool.get(i), null, ++cont);
                        contV++;
                        break;
                    case 3:
                        a3 = new TreeNode(this.exp_bool.get(i), null, ++cont);
                        this.agrega = true;
                        agregar_hoja(E, a1, a2, a3);
                        contV = 1;
                        break;
                }
            }
        }
        return E;
    }

    public void agregar(TreeNode tn, TreeNode value) {
        TreeNode nodo = tn;
        switch (value.getVal()) {
            case "E":
                if (nodo.getHijos().isEmpty()) {
                    nodo.agregarHijo(value);
                } else {
                    switch (nodo.getHijos().size()) {
                        case 2:
                            nodo.agregarHijo(value);
                            break;
                        case 1:
                            agregar(nodo.getHijos().get(0), value);
                            break;
                        case 3:
                            agregar(nodo.getHijos().get(2), value);
                            break;
                        default:
                            break;
                    }
                }
                break;
            case "||":
                if (!nodo.getHijos().isEmpty()) {
                    if (nodo.getHijos().size() == 1) {
                        if (!nodo.getHijos().get(0).getHijos().isEmpty()) {
                            agregar(nodo.getHijos().get(0), value);
                        } else {
                            nodo.agregarHijo(value);
                        }
                    } else {
                        agregar(nodo.getHijos().get(2), value);
                    }
                }
                break;
            case "&&":
                if (nodo.getHijos().size() == 1) {
                    nodo.agregarHijo(value);
                } else {
                    agregar(nodo.getHijos().get(2), value);
                }
                break;
            default:
        }
    }

    public void agregar_hoja(TreeNode tn, TreeNode a1, TreeNode a2, TreeNode a3) {
        TreeNode nodo = tn;

        if (nodo.getHijos().isEmpty() && nodo.getVal().equals("E") && this.agrega) {
            nodo.agregarHijo(a1);
            nodo.agregarHijo(a2);
            nodo.agregarHijo(a3);
            this.agrega = false;
        } else {
            for (TreeNode hijo : nodo.getHijos()) {
                agregar_hoja(hijo, a1, a2, a3);
            }
        }
    }

    public void generar_expbool(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {

            if (!nodo.getHijos().isEmpty()) {
                if (nodo.getHijos().size() == 1) {
                    nodo.getHijos().get(0).setVerdadero(nodo.getVerdadero());
                    nodo.getHijos().get(0).setFalso(nodo.getFalso());
                    generar_expbool(nodo.getHijos().get(0));
                } else {
                    switch (nodo.getHijos().get(1).getVal()) {
                        case "&&":
                            nodo.getHijos().get(0).setVerdadero(nuevaEtiqueta());
                            nodo.getHijos().get(0).setFalso(nodo.getFalso());
                            generar_expbool(nodo.getHijos().get(0));

                            this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getVerdadero(), "", ""));
                            nodo.getHijos().get(2).setVerdadero(nodo.getVerdadero());
                            nodo.getHijos().get(2).setFalso(nodo.getFalso());

                            generar_expbool(nodo.getHijos().get(2));
                            break;
                        case "||":
                            nodo.getHijos().get(0).setVerdadero(nodo.getVerdadero());
                            nodo.getHijos().get(0).setFalso(nuevaEtiqueta());
                            generar_expbool(nodo.getHijos().get(0));

                            this.cuadruplos.add(new Cuadruplo("ETIQ", nodo.getHijos().get(0).getFalso(), "", ""));
                            nodo.getHijos().get(2).setVerdadero(nodo.getVerdadero());
                            nodo.getHijos().get(2).setFalso(nodo.getFalso());

                            generar_expbool(nodo.getHijos().get(2));
                            break;
                        default:
                            String operador = nodo.getHijos().get(1).getVal();
                            String arg1 = nodo.getHijos().get(0).getVal();
                            String arg2 = nodo.getHijos().get(2).getVal();
                            this.cuadruplos.add(new Cuadruplo("IF" + operador, arg1, arg2, nodo.getVerdadero()));
                            this.cuadruplos.add(new Cuadruplo("GOTO", nodo.getFalso(), "", ""));
                            break;
                    }
                }
            }
        }
    }

    public void print_bool(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            System.out.println("Nodo: " + nodo.getVal() + "" + nodo.id);
            for (TreeNode h : nodo.getHijos()) {
                System.out.println("    hijo: " + h.getVal() + "" + h.id);
            }
            for (TreeNode hijo : nodo.getHijos()) {
                print_bool(hijo);
            }
        }
    }

    public void operacion() {
        String acum = "";
        String func_name = "";
        Stack<String> s = new Stack();
        boolean isFunc = false;
        ArrayList<String> param = new ArrayList();
        for (int i = 0; i < this.exp_intermedio.size(); i++) {

            if (this.exp_intermedio.get(i).startsWith("1f_")) {
                isFunc = true;
                func_name = this.exp_intermedio.get(i).substring(3, this.exp_intermedio.get(i).length());

            }
            if (isFunc) {
                switch (this.exp_intermedio.get(i)) {
                    case ",":
                        String temporal = parametro_func(param);
                        param.clear();
                        this.cuadruplos.add(new Cuadruplo("param", temporal, "", ""));
                        break;
                    case "2f":
                        if (!param.isEmpty()) {
                            String temporal2 = parametro_func(param);
                            param.clear();
                            this.cuadruplos.add(new Cuadruplo("param", temporal2, "", ""));
                            this.cuadruplos.add(new Cuadruplo("call", func_name, "", ""));
                            String nuevoTemp = generarTemp();
                            if (!tipoFunc(func_name).contains("void")) {
                                this.cuadruplos.add(new Cuadruplo("=", "RET", "", nuevoTemp));
                            }
                            s.push(nuevoTemp);
                            isFunc = false;
                            func_name = "";
                        } else {
                            this.cuadruplos.add(new Cuadruplo("call", func_name, "", ""));
                            String nuevoTemp = generarTemp();
                            this.cuadruplos.add(new Cuadruplo("=", "RET", "", nuevoTemp));
                            s.push(nuevoTemp);
                            isFunc = false;
                            func_name = "";
                        }
                        break;
                    default:
                        if (!this.exp_intermedio.get(i).startsWith("1f_")) {
                            param.add(this.exp_intermedio.get(i));
                        }
                        break;
                }
            } else {
                if (this.exp_intermedio.get(i).equals("+") || this.exp_intermedio.get(i).equals("-")) {
                    if (s.size() >= 3) {
                        String op, arg1, arg2, res;
                        arg2 = s.pop();
                        op = s.pop();
                        arg1 = s.pop();
                        if (arg2.equals("(") || op.equals("(") || arg1.equals("(")) {
                            s.push(arg1);
                            s.push(op);
                            s.push(arg2);
                            s.push(this.exp_intermedio.get(i));
                        } else {
                            //
                            if (arg1.contains("++")) {
                                String temp = generarTemp();
                                arg1 = arg1.substring(0, arg1.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp));
                                this.cuadruplos.add(new Cuadruplo("=", temp, "", arg1));
                            } else if (arg1.contains("--")) {
                                String temp = generarTemp();
                                arg1 = arg1.substring(0, arg1.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp));
                                this.cuadruplos.add(new Cuadruplo("=", temp, "", arg1));
                            }
                            if (arg2.contains("++")) {
                                String temp = generarTemp();
                                arg2 = arg2.substring(0, arg2.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp));
                                this.cuadruplos.add(new Cuadruplo("=", temp, "", arg2));
                            } else if (arg2.contains("--")) {
                                String temp = generarTemp();
                                arg2 = arg2.substring(0, arg2.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("", arg2, "1", temp));
                                this.cuadruplos.add(new Cuadruplo("=", temp, "", arg2));
                            }
                            res = generarTemp();
                            s.push(res);
                            this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                            i--;
                        }
                    } else {
                        s.push(this.exp_intermedio.get(i));
                    }
                } else if (this.exp_intermedio.get(i).equals("*") || this.exp_intermedio.get(i).equals("/")) {
                    if (s.size() >= 3) {
                        String temp = s.pop();
                        if (s.peek().equals("+") || s.peek().equals("-")) {
                            s.push(temp);
                            s.push(this.exp_intermedio.get(i));
                        } else {
                            s.push(temp);
                            String op, arg1, arg2, res;
                            arg2 = s.pop();
                            op = s.pop();
                            arg1 = s.pop();
                            if (arg2.equals("(") || op.equals("(") || arg1.equals("(")) {
                                s.push(arg1);
                                s.push(op);
                                s.push(arg2);
                                s.push(this.exp_intermedio.get(i));
                            } else {
                                //
                                if (arg1.contains("++")) {
                                    String temp1 = generarTemp();
                                    arg1 = arg1.substring(0, arg1.length() - 2);
                                    this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                                } else if (arg1.contains("--")) {
                                    String temp1 = generarTemp();
                                    arg1 = arg1.substring(0, arg1.length() - 2);
                                    this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                                }
                                if (arg2.contains("++")) {
                                    String temp1 = generarTemp();
                                    arg2 = arg2.substring(0, arg2.length() - 2);
                                    this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                                } else if (arg2.contains("--")) {
                                    String temp1 = generarTemp();
                                    arg2 = arg2.substring(0, arg2.length() - 2);
                                    this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                                }
                                res = generarTemp();
                                s.push(res);
                                this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                                i--;
                            }
                        }
                    } else {
                        s.push(this.exp_intermedio.get(i));
                    }
                } else if (this.exp_intermedio.get(i).equals(")")) {
                    String temp = s.pop();
                    if (s.peek().equals("(")) {
                        s.pop();
                        s.push(temp);
                    } else {
                        s.push(temp);
                        String op, arg1, arg2, res;
                        arg2 = s.pop();
                        op = s.pop();
                        arg1 = s.pop();
                        //
                        if (arg1.contains("++")) {
                            String temp1 = generarTemp();
                            arg1 = arg1.substring(0, arg1.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                            this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                        } else if (arg1.contains("--")) {
                            String temp1 = generarTemp();
                            arg1 = arg1.substring(0, arg1.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                            this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                        }
                        if (arg2.contains("++")) {
                            String temp1 = generarTemp();
                            arg2 = arg2.substring(0, arg2.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                            this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                        } else if (arg2.contains("--")) {
                            String temp1 = generarTemp();
                            arg2 = arg2.substring(0, arg2.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                            this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                        }
                        res = generarTemp();
                        s.push(res);
                        this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                        i--;
                    }
                } else {
                    s.push(this.exp_intermedio.get(i));
                }
            }
        }
        while (s.size() > 1) {
            if (s.size() >= 3) {
                String op, arg1, arg2, res;

                arg2 = s.pop();
                op = s.pop();
                arg1 = s.pop();
                //
                if (arg1.contains("++")) {
                    String temp1 = generarTemp();
                    arg1 = arg1.substring(0, arg1.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                } else if (arg1.contains("--")) {
                    String temp1 = generarTemp();
                    arg1 = arg1.substring(0, arg1.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                }
                if (arg2.contains("++")) {
                    String temp1 = generarTemp();
                    arg2 = arg2.substring(0, arg2.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                } else if (arg2.contains("--")) {
                    String temp1 = generarTemp();
                    arg2 = arg2.substring(0, arg2.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                }
                res = generarTemp();
                s.push(res);
                this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
            }
        }
        //
        if (s.size() == 1) {
            if (s.peek().contains("++")) {
                String temp1 = generarTemp();
                String arg = s.pop();
                arg = arg.substring(0, arg.length() - 2);
                this.cuadruplos.add(new Cuadruplo("+", arg, "1", temp1));
                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg));
            } else if (s.peek().contains("--")) {
                String temp1 = generarTemp();
                String arg = s.pop();
                arg = arg.substring(0, arg.length() - 2);
                this.cuadruplos.add(new Cuadruplo("-", arg, "1", temp1));
                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg));
            }
        }
        if (this.int_asig_flag) {
            this.cuadruplos.add(new Cuadruplo("=", s.pop(), "", this.int_asig_value));
            this.int_asig_flag = false;
            this.int_asig_value = "";
        }
        if (this.int_ret_flag) {
            this.cuadruplos.add(new Cuadruplo("RET", s.pop(), "", ""));
            this.int_ret_flag = false;
        }
        if (this.int_print_flag) {
            this.cuadruplos.add(new Cuadruplo("Print", this.int_print_value, s.pop(), ""));
            this.int_print_flag = false;
            this.int_print_value = "";
        }
    }

    public String tipoFunc(String f) {
        String ret = "";
        for (int i = 0; i < this.funciones.size(); i++) {
            if (f.equals(this.funciones.get(i).getId())) {
                ret = this.funciones.get(i).getTipo();
            }
        }
        return ret;
    }

    public String parametro_func(ArrayList<String> array) {
        String acum = "";
        Stack<String> s = new Stack();
        for (int i = 0; i < array.size(); i++) {
            if (array.get(i).equals("+") || array.get(i).equals("-")) {
                if (s.size() >= 3) {
                    String op, arg1, arg2, res;
                    arg2 = s.pop();
                    op = s.pop();
                    arg1 = s.pop();
                    if (arg2.equals("(") || op.equals("(") || arg1.equals("(")) {
                        s.push(arg1);
                        s.push(op);
                        s.push(arg2);
                        s.push(array.get(i));
                    } else {
                        //
                        if (arg1.contains("++")) {
                            String temp = generarTemp();
                            arg1 = arg1.substring(0, arg1.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp));
                            this.cuadruplos.add(new Cuadruplo("=", temp, "", arg1));
                        } else if (arg1.contains("--")) {
                            String temp = generarTemp();
                            arg1 = arg1.substring(0, arg1.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp));
                            this.cuadruplos.add(new Cuadruplo("=", temp, "", arg1));
                        }
                        if (arg2.contains("++")) {
                            String temp = generarTemp();
                            arg2 = arg2.substring(0, arg2.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp));
                            this.cuadruplos.add(new Cuadruplo("=", temp, "", arg2));
                        } else if (arg2.contains("--")) {
                            String temp = generarTemp();
                            arg2 = arg2.substring(0, arg2.length() - 2);
                            this.cuadruplos.add(new Cuadruplo("", arg2, "1", temp));
                            this.cuadruplos.add(new Cuadruplo("=", temp, "", arg2));
                        }
                        res = generarTemp();
                        s.push(res);
                        this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                        i--;
                    }
                } else {
                    s.push(array.get(i));
                }
            } else if (array.get(i).equals("*") || array.get(i).equals("/")) {
                if (s.size() >= 3) {
                    String temp = s.pop();
                    if (s.peek().equals("+") || s.peek().equals("-")) {
                        s.push(temp);
                        s.push(array.get(i));
                    } else {
                        s.push(temp);
                        String op, arg1, arg2, res;
                        arg2 = s.pop();
                        op = s.pop();
                        arg1 = s.pop();
                        if (arg2.equals("(") || op.equals("(") || arg1.equals("(")) {
                            s.push(arg1);
                            s.push(op);
                            s.push(arg2);
                            s.push(array.get(i));
                        } else {
                            //
                            if (arg1.contains("++")) {
                                String temp1 = generarTemp();
                                arg1 = arg1.substring(0, arg1.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                            } else if (arg1.contains("--")) {
                                String temp1 = generarTemp();
                                arg1 = arg1.substring(0, arg1.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                            }
                            if (arg2.contains("++")) {
                                String temp1 = generarTemp();
                                arg2 = arg2.substring(0, arg2.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                            } else if (arg2.contains("--")) {
                                String temp1 = generarTemp();
                                arg2 = arg2.substring(0, arg2.length() - 2);
                                this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                            }
                            res = generarTemp();
                            s.push(res);
                            this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                            i--;
                        }
                    }
                } else {
                    s.push(array.get(i));
                }
            } else if (array.get(i).equals(")")) {
                String temp = s.pop();
                if (s.peek().equals("(")) {
                    s.pop();
                    s.push(temp);
                } else {
                    s.push(temp);
                    String op, arg1, arg2, res;
                    arg2 = s.pop();
                    op = s.pop();
                    arg1 = s.pop();
                    //
                    if (arg1.contains("++")) {
                        String temp1 = generarTemp();
                        arg1 = arg1.substring(0, arg1.length() - 2);
                        this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                        this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                    } else if (arg1.contains("--")) {
                        String temp1 = generarTemp();
                        arg1 = arg1.substring(0, arg1.length() - 2);
                        this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                        this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                    }
                    if (arg2.contains("++")) {
                        String temp1 = generarTemp();
                        arg2 = arg2.substring(0, arg2.length() - 2);
                        this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                        this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                    } else if (arg2.contains("--")) {
                        String temp1 = generarTemp();
                        arg2 = arg2.substring(0, arg2.length() - 2);
                        this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                        this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                    }
                    res = generarTemp();
                    s.push(res);
                    this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
                    i--;
                }
            } else {
                s.push(array.get(i));
            }
        }
        while (s.size() > 1) {
            if (s.size() >= 3) {
                String op, arg1, arg2, res;

                arg2 = s.pop();
                op = s.pop();
                arg1 = s.pop();
                //
                if (arg1.contains("++")) {
                    String temp1 = generarTemp();
                    arg1 = arg1.substring(0, arg1.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("+", arg1, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                } else if (arg1.contains("--")) {
                    String temp1 = generarTemp();
                    arg1 = arg1.substring(0, arg1.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("-", arg1, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg1));
                }
                if (arg2.contains("++")) {
                    String temp1 = generarTemp();
                    arg2 = arg2.substring(0, arg2.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("+", arg2, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                } else if (arg2.contains("--")) {
                    String temp1 = generarTemp();
                    arg2 = arg2.substring(0, arg2.length() - 2);
                    this.cuadruplos.add(new Cuadruplo("-", arg2, "1", temp1));
                    this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg2));
                }
                res = generarTemp();
                s.push(res);
                this.cuadruplos.add(new Cuadruplo(op, arg1, arg2, res));
            }
        }
        //
        if (s.size() == 1) {
            if (s.peek().contains("++")) {
                String temp1 = generarTemp();
                String arg = s.pop();
                arg = arg.substring(0, arg.length() - 2);
                this.cuadruplos.add(new Cuadruplo("+", arg, "1", temp1));
                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg));
            } else if (s.peek().contains("--")) {
                String temp1 = generarTemp();
                String arg = s.pop();
                arg = arg.substring(0, arg.length() - 2);
                this.cuadruplos.add(new Cuadruplo("-", arg, "1", temp1));
                this.cuadruplos.add(new Cuadruplo("=", temp1, "", arg));
            }
        }
        return s.pop();
    }

    public void params_exp(TreeNode tn) {
        if (!tn.getHijos().isEmpty()) {
            for (TreeNode hijo : tn.getHijos()) {
                switch (hijo.getVal()) {
                    case "Exp":
                        if (!hijo.padre.getVal().equals("par")) {
                            this.exp_intermedio.add("(");
                        }
                        params_exp(hijo);
                        if (hijo.padre.getVal().equals("par")) {
                            this.exp_intermedio.add(",");
                        } else {
                            this.exp_intermedio.add(")");
                        }

                        break;
                    case "ID":
                        if (hijo.getHijos().get(0).getVal().equals("*") || hijo.getHijos().get(0).getVal().equals("&")) {
                            this.exp_intermedio.add(hijo.getHijos().get(1).getVal());
                        } else if (hijo.getHijos().get(1).getVal().equals("++")) {
                            this.exp_intermedio.add(hijo.getHijos().get(0).getVal() + "++");
                        } else if (hijo.getHijos().get(1).getVal().equals("--")) {
                            this.exp_intermedio.add(hijo.getHijos().get(0).getVal() + "--");
                        } else {
                            this.exp_intermedio.add(hijo.getHijos().get(0).getVal());
                        }
                        break;
                    case "Num":
                        this.exp_intermedio.add(hijo.getHijos().get(0).getVal());
                        break;
                    case "ConstChar":
                        this.exp_intermedio.add(hijo.getHijos().get(0).getVal());
                        break;
                    case "par":
                        params_exp(hijo);
                        break;
                    default:
                        if (!hijo.getVal().equals("#")) {
                            this.exp_intermedio.add(hijo.getVal());
                            params_exp(hijo);
                        }
                }
            }
        }
    }

    public String generarTemp() {
        this.cont_temp++;
        return "#t" + this.cont_temp;
    }

    public String nuevaEtiqueta() {
        this.cont_etiq++;
        return "etiq" + this.cont_etiq;
    }

    //Codigo final
    public void codigo_final() {
        ArrayList<Temporal> temporales = new ArrayList();
        ArrayList<Temporal> parametros = new ArrayList();
        int arg = 0;
        int contA = 0;
        int contP = 0;
        for (int i = 0; i < 10; i++) {
            temporales.add(new Temporal(i, "", false));
        }
        this.ta_codigo_final.setText("");
        String code = "";
        code += ".data\n";
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getAmbito().equals("1Global")) {
                if (this.tabla.get(i).getTipo().equals("char")) {
                    code += "_" + this.tabla.get(i).getId() + ":      .byte 0\n";
                } else {
                    code += "_" + this.tabla.get(i).getId() + ":      .word 0\n";
                }
            }
        }
        for (int i = 0; i < this.mensajes.size(); i++) {
            code += "_msg" + (i + 1) + ":     .asciiz \"" + this.mensajes.get(i) + "\"\n";
        }
        code += "   .text\n"
                + "   .globl main\n";
        //recorrer
        for (Cuadruplo cuad : this.cuadruplos) {
            switch (cuad.getOperador()) {
                case "Func":
                    this.ambito_final = cuad.getArgumento1();
                    parametros.clear();
                    if (cuad.getArgumento1().equals("main")) {
                        code += "main:\n";
                        code += "       move $fp, $sp\n";
                    } else {
                        int params = contParamF();
                        int c4 = 0;
                        int contPila = 0;
                        code += "_" + cuad.getArgumento1() + ":\n";
                        for (int i = 0; i < this.tabla.size(); i++) {
                            if (this.tabla.get(i).getAmbito().equals(this.ambito_final)) {
                                if (c4 >= 4 && c4 < params) {
                                    if (this.tabla.get(i).getTipo().equals("char")) {
                                        contPila++;
                                        code += "       lb $s" + c4 + ", -" + contPila + "($sp)\n";
                                    } else {
                                        contPila += 4;
                                        code += "       lw $s" + c4 + ", -" + contPila + "($sp)\n";
                                    }
                                }
                                c4++;
                            }
                        }
                        code += "       sw $fp, -4($sp)\n"
                                + "       sw $ra, -8($sp)\n";
                        int finalP = 0;
                        int cont = 0;
                        for (int i = 0; i < this.tabla.size(); i++) { //Imprimir parametros
                            if (this.tabla.get(i).getAmbito().equals(this.ambito_final)) {
                                if (cont < params) {
                                    if (this.tabla.get(i).getTipo().equals("char")) {
                                        code += "       sb $s" + cont + ", -" + this.tabla.get(i).getOffset() + "($sp)\n";
                                    } else {
                                        code += "       sw $s" + cont + ", -" + this.tabla.get(i).getOffset() + "($sp)\n";
                                    }
                                    parametros.add(new Temporal(cont, this.tabla.get(i).getId(), true, this.tabla.get(i).getTipo()));
                                    cont++;
                                }
                                finalP = this.tabla.get(i).getOffset();
                            }
                        }
                        code += "       move $fp, $sp\n"
                                + "       sub $sp, $sp, " + finalP + "\n";
                        for (int i = 0; i < params; i++) {
                            if (i < 4) {
                                code += "       move $s" + i + ", $a" + i + "\n";
                            }
                        }
                    }
                    break;
                case "RET":
                    if (!this.ambito_final.equals("main")) {
                        if (cuad.getArgumento1().contains("'") || cuad.getArgumento1().matches("[0-9]+")) {
                            code += "       li $v0, " + cuad.getArgumento1() + "\n";
                        } else if (cuad.getArgumento1().contains("#t")) {
                            int tempRet = 0;
                            for (int i = 0; i < temporales.size(); i++) {
                                if (temporales.get(i).isVivo() && temporales.get(i).getActivado().equals(cuad.getArgumento1())) {
                                    tempRet = i;
                                }
                            }
                            temporales.get(tempRet).setVivo(false);
                            temporales.get(tempRet).setActivado("");
                            code += "       move $v0, $t" + tempRet + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento1())) {
                                if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                    code += "       move $v0, $s" + whatParam(parametros, cuad.getArgumento1()) + "\n";
                                } else {
                                    if (isCharF(cuad.getArgumento1())) {
                                        code += "       lb $v0, -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    } else {
                                        code += "       lw $v0, -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                }
                            } else {
                                code += "       lw $v0, _" + cuad.getArgumento1() + "\n";
                            }
                        }
                        code += "       b _fin_" + this.ambito_final + "\n";
                    }
                    break;
                case "param":
                    if (cuad.getArgumento1().contains("'") || cuad.getArgumento1().matches("[0-9]+")) {
                        if (arg >= 4) {
                            int tempm = 0;
                            for (int i = 0; i < temporales.size(); i++) {
                                if (!temporales.get(i).isVivo()) {
                                    tempm = i;
                                    break;
                                }
                            }
                            code += "       li $t" + tempm + ", " + cuad.getArgumento1() + "\n";
                            if (cuad.getArgumento1().contains("'")) {
                                contA += 1;
                                code += "       sb $t" + tempm + ", -" + contA + "($sp)\n";
                            } else {
                                contA += 4;
                                code += "       sw $t" + tempm + ", -" + contA + "($sp)\n";
                            }
                        } else {
                            code += "       li $a" + arg + ", " + cuad.getArgumento1() + "\n";
                        }
                    } else if (cuad.getArgumento1().contains("#t")) {
                        int rt = 0;
                        for (int i = 0; i < temporales.size(); i++) {
                            if (temporales.get(i).isVivo() && temporales.get(i).getActivado().equals(cuad.getArgumento1())) {
                                rt = i;
                            }
                        }
                        if (arg >= 4) {
                            contA += 4;
                            code += "       sw $t" + rt + ", -" + contA + "($sp)\n";
                        } else {
                            code += "       move $a" + arg + ", $t" + rt + "\n";
                        }
                        temporales.get(rt).setVivo(false);
                        temporales.get(rt).setActivado("");
                    } else {
                        if (isLocal(cuad.getArgumento1())) {
                            int par = whatParam(parametros, cuad.getArgumento1());
                            if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                if (arg >= 4) {
                                    if (parametros.get(par).getTipo().equals("char")) {
                                        contA += 1;
                                        code += "       sb $s" + par + ", -" + contA + "($sp)\n";
                                    } else {
                                        contA += 4;
                                        code += "       sw $s" + par + ", -" + contA + "($sp)\n";
                                    }

                                } else {
                                    code += "       move $a" + arg + ", $s" + par + "\n";
                                }
                            } else {
                                int t = 0;
                                for (int i = 0; i < temporales.size(); i++) {
                                    if (!temporales.get(i).isVivo()) {
                                        t = i;
                                        break;
                                    }
                                }
                                if (isCharF(cuad.getArgumento1())) {
                                    if (arg >= 4) {
                                        contA += 1;
                                        code += "       lb $t" + t + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                        code += "       sb $t" + t + ", -" + contA + "($sp)\n";
                                    } else {
                                        code += "       lb $a" + arg + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                } else {
                                    if (arg >= 4) {
                                        contA += 4;
                                        code += "       lw $t" + t + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                        code += "       sw $t" + t + ", -" + contA + "($sp)\n";
                                    } else {
                                        code += "       lw $a" + arg + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                }
                            }
                        } else {
                            if (arg >= 4) {
                                int t = 0;
                                for (int i = 0; i < temporales.size(); i++) {
                                    if (!temporales.get(i).isVivo()) {
                                        t = i;
                                        break;
                                    }
                                }
                                if (isCharFG(cuad.getArgumento1())) {
                                    contA += 1;
                                    code += "       lb $t" + t + ", _" + cuad.getArgumento1() + "\n";
                                    code += "       sb $t" + t + ", -" + contA + "($sp)\n";
                                } else {
                                    contA += 4;
                                    code += "       lw $t" + t + ", _" + cuad.getArgumento1() + "\n";
                                    code += "       sw $t" + t + ", -" + contA + "($sp)\n";
                                }
                            } else {
                                code += "       lw $a" + arg + ", _" + cuad.getArgumento1() + "\n";
                            }
                        }
                    }
                    arg++;
                    break;
                case "call":
                    int contadorVivos = 0;
                    for (int i = 0; i < parametros.size(); i++) {
                        if (parametros.get(i).isVivo()) {
                            contadorVivos += 4;
                            code += "       sw $t" + i + ",-" + contadorVivos + "($sp)\n";
                        }
                    }
                    if (contadorVivos > 0) {
                        code += "       sub $sp, $sp, " + contadorVivos + "\n";
                    }
                    code += "       jal _" + cuad.getArgumento1() + "\n";
                    for (int i = parametros.size() - 1; i >= 0; i--) {
                        if (parametros.get(i).isVivo()) {
                            code += "       lw $t" + i + ",0($sp)\n"
                                    + "       add $sp,$sp,4\n";
                        }
                    }
                    arg = 0;
                    contA = 0;
                    break;
                case "END":
                    if (this.ambito_final.equals("main")) {
                        code += "       li $v0,10\n"
                                + "       syscall\n";
                    } else {
                        code += "_fin_" + this.ambito_final + ":\n"
                                + "       move $sp, $fp\n"
                                + "       lw $fp, -4($sp)\n"
                                + "       lw $ra, -8($sp)\n";
                        int contE = 0;
                        int paramsE = contParamF();
                        for (int i = 0; i < this.tabla.size(); i++) { //Imprimir parametros
                            if (this.tabla.get(i).getAmbito().equals(this.ambito_final)) {
                                if (contE < paramsE) {
                                    if (this.tabla.get(i).getTipo().equals("char")) {
                                        code += "       lb $s" + contE + ", -" + this.tabla.get(i).getOffset() + "($sp)\n";
                                    } else {
                                        code += "       lw $s" + contE + ", -" + this.tabla.get(i).getOffset() + "($sp)\n";
                                    }
                                    contE++;
                                }
                            }
                        }
                        code += "       jr $ra\n";
                    }
                    break;
                case "Scanf":
                    if (cuad.getArgumento1().equals("%d")) {
                        if (isLocal(cuad.getArgumento2())) {
                            if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getArgumento2());
                                code += "       li $v0, 5\n"
                                        + "       syscall\n"
                                        + "       move $s" + par + ", $v0\n";
                            } else {
                                code += "       li $v0, 5\n"
                                        + "       syscall\n"
                                        + "       sw $v0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                            }
                        } else {
                            code += "       li $v0, 5\n"
                                    + "       syscall\n"
                                    + "       sw $v0, _" + cuad.getArgumento2() + "\n";
                        }
                    } else {
                        if (isLocal(cuad.getArgumento2())) {
                            if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getArgumento2());
                                code += "       li $v0, 12\n"
                                        + "       syscall\n"
                                        + "       move $s" + par + ", $v0\n";
                            } else {
                                code += "       li $v0, 12\n"
                                        + "       syscall\n"
                                        + "       sb $v0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                            }
                        } else {
                            code += "       li $v0, 12\n"
                                    + "       syscall\n"
                                    + "       sb $v0, _" + cuad.getArgumento2() + "\n";
                        }
                    }
                    break;
                case "Print":
                    int valor = 0;
                    for (int i = 0; i < this.mensajes.size(); i++) {
                        if (cuad.getArgumento1().equals(this.mensajes.get(i))) {
                            valor = i + 1;
                        }
                    }
                    if (!cuad.getArgumento2().isEmpty()) {//debemos verificar si es numero
                        if (cuad.getArgumento1().contains("%d") || cuad.getArgumento1().contains("%c")) {
                            int d = 0;
                            String primera = "";
                            String segunda = "";
                            if (cuad.getArgumento1().contains("%d")) {
                                d = cuad.getArgumento1().indexOf("%d");
                            } else {
                                d = cuad.getArgumento1().indexOf("%c");
                            }

                            if (d + 2 > cuad.getArgumento1().length()) {
                                segunda = "";
                            } else {
                                segunda = cuad.getArgumento1().substring(d + 2, cuad.getArgumento1().length());
                            }
                            primera = cuad.getArgumento1().substring(0, d);
                            if (d == 0) {
                                if (cuad.getArgumento2().matches("[0-9]+")) {
                                    code += "       li $v0, 1\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else if (cuad.getArgumento2().contains("'")) {
                                    code += "       li $v0, 11\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else {
                                    if (isLocal(cuad.getArgumento2())) {
                                        if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                            int par = whatParam(parametros, cuad.getArgumento2());
                                            if (parametros.get(par).getTipo().contains("char")) {
                                                code += "       li $v0, 11\n"
                                                        + "       move $a0, $s" + par + "\n"
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       move $a0, $s" + par + "\n"
                                                        + "       syscall\n";
                                            }
                                        } else {
                                            if (isCharF(cuad.getArgumento2())) {
                                                code += "       li $v0, 11\n"
                                                        + "       lb $a0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n"
                                                        + "       syscall\n";
                                            } else {
                                                if (isPointerF(cuad.getArgumento2())) {/////
                                                    int t = 0;
                                                    for (int i = 0; i < temporales.size(); i++) {
                                                        if (!temporales.get(i).isVivo()) {
                                                            t = i;
                                                            break;
                                                        }
                                                    }
                                                    code += "       lw $t" + t + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, 0($t" + t + ")($fp)\n"
                                                            + "       syscall\n";
                                                } else {
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n"
                                                            + "       syscall\n";
                                                }
                                            }
                                        }
                                    } else {
                                        if (isCharF(cuad.getArgumento2())) {
                                            code += "       li $v0, 11\n"
                                                    + "       lb $a0, _" + cuad.getArgumento2() + "\n"
                                                    + "       syscall\n";
                                        } else {
                                            if (isPointerF(cuad.getArgumento2())) {////////
                                                int t = 0;
                                                for (int i = 0; i < temporales.size(); i++) {
                                                    if (!temporales.get(i).isVivo()) {
                                                        t = i;
                                                        break;
                                                    }
                                                }
                                                code += "       lw $t" + t + ", _" + getOffsetF(cuad.getArgumento2()) + "\n";
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, 0($t" + t + ")\n"
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, _" + cuad.getArgumento2() + "\n"
                                                        + "       syscall\n";
                                            }
                                        }
                                    }
                                }
                                if (!segunda.isEmpty()) {
                                    int msg = 0;
                                    for (int i = 0; i < this.mensajes.size(); i++) {
                                        if (this.mensajes.get(i).equals(segunda)) {
                                            msg = i;
                                        }
                                    }
                                    code += "       li $v0, 4\n"
                                            + "       la $a0, _msg" + (msg + 1) + "\n"
                                            + "       syscall\n";
                                }

                            } else if (d == cuad.getArgumento1().length() - 2) {
                                if (!primera.isEmpty()) {
                                    int msg = 0;
                                    for (int i = 0; i < this.mensajes.size(); i++) {
                                        if (this.mensajes.get(i).equals(primera)) {
                                            msg = i;
                                        }
                                    }
                                    code += "       li $v0, 4\n"
                                            + "       la $a0, _msg" + (msg + 1) + "\n"
                                            + "       syscall\n";
                                }
                                if (cuad.getArgumento2().matches("[0-9]+")) {
                                    code += "       li $v0, 1\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else if (cuad.getArgumento2().contains("'")) {
                                    code += "       li $v0, 11\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else {
                                    if (isLocal(cuad.getArgumento2())) {
                                        if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                            int par = whatParam(parametros, cuad.getArgumento2());
                                            if (parametros.get(par).getTipo().contains("char")) {
                                                code += "       li $v0, 11\n"
                                                        + "       move $a0, $s" + par + "\n"
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       move $a0, $s" + par + "\n"
                                                        + "       syscall\n";
                                            }

                                        } else {
                                            if (isCharF(cuad.getArgumento2())) {
                                                code += "       li $v0, 11\n"
                                                        + "       lb $a0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n"
                                                        + "       syscall\n";
                                            } else {
                                                if (isPointerF(cuad.getArgumento2())) {////////
                                                    int t = 0;
                                                    for (int i = 0; i < temporales.size(); i++) {
                                                        if (!temporales.get(i).isVivo()) {
                                                            t = i;
                                                            break;
                                                        }
                                                    }
                                                    code += "       lw $t" + t + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, 0($t" + t + ")\n"
                                                            + "       syscall\n";
                                                } else {
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, -" + cuad.getArgumento2() + "($fp)\n"
                                                            + "       syscall\n";
                                                }
                                            }
                                        }
                                    } else {
                                        if (isCharF(cuad.getArgumento2())) {
                                            code += "       li $v0, 11\n"
                                                    + "       lb $a0, _" + cuad.getArgumento2() + "\n"
                                                    + "       syscall\n";
                                        } else {
                                            if (isPointerF(cuad.getArgumento2())) {////////
                                                int t = 0;
                                                for (int i = 0; i < temporales.size(); i++) {
                                                    if (!temporales.get(i).isVivo()) {
                                                        t = i;
                                                        break;
                                                    }
                                                }
                                                code += "       lw $t" + t + ", _" + getOffsetF(cuad.getArgumento2()) + "\n";
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, 0($t" + t + ")\n"
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, _" + cuad.getArgumento2() + "\n"
                                                        + "       syscall\n";
                                            }
                                        }
                                    }
                                }
                            } else {
                                int msg = 0;
                                for (int i = 0; i < this.mensajes.size(); i++) {
                                    if (this.mensajes.get(i).equals(primera)) {
                                        msg = i;
                                    }
                                }
                                code += "       li $v0, 4\n"
                                        + "       la $a0, _msg" + (msg + 1) + "\n"
                                        + "       syscall\n";
                                if (cuad.getArgumento2().matches("[0-9]+")) {
                                    code += "       li $v0, 1\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else if (cuad.getArgumento2().contains("'")) {
                                    code += "       li $v0, 11\n"
                                            + "       li $a0, " + cuad.getArgumento2() + "\n"
                                            + "       syscall\n";
                                } else {
                                    if (isLocal(cuad.getArgumento2())) {
                                        if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                            int par = whatParam(parametros, cuad.getArgumento2());
                                            if (parametros.get(par).getTipo().contains("char")) {
                                                code += "       li $v0, 11\n"
                                                        + "       move $a0, $s" + par + "\n"//******
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       move $a0, $s" + par + "\n"//******
                                                        + "       syscall\n";
                                            }
                                        } else {
                                            if (isCharF(cuad.getArgumento2())) {
                                                code += "       li $v0, 11\n"
                                                        + "       lb $a0, -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n"
                                                        + "       syscall\n";
                                            } else {
                                                if (isPointerF(cuad.getArgumento2())) {////////
                                                    int t = 0;
                                                    for (int i = 0; i < temporales.size(); i++) {
                                                        if (!temporales.get(i).isVivo()) {
                                                            t = i;
                                                            break;
                                                        }
                                                    }
                                                    code += "       lw $t" + t + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, 0($t" + t + ")\n"
                                                            + "       syscall\n";
                                                } else {
                                                    code += "       li $v0, 1\n"
                                                            + "       lw $a0, -" + cuad.getArgumento2() + "($fp)\n"
                                                            + "       syscall\n";
                                                }
                                            }
                                        }
                                    } else {
                                        if (isCharF(cuad.getArgumento2())) {
                                            code += "       li $v0, 11\n"
                                                    + "       lb $a0, _" + cuad.getArgumento2() + "\n"
                                                    + "       syscall\n";
                                        } else {
                                            if (isPointerF(cuad.getArgumento2())) {////////
                                                int t = 0;
                                                for (int i = 0; i < temporales.size(); i++) {
                                                    if (!temporales.get(i).isVivo()) {
                                                        t = i;
                                                        break;
                                                    }
                                                }
                                                code += "       lw $t" + t + ", _" + getOffsetF(cuad.getArgumento2()) + "\n";
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, 0($t" + t + ")\n"
                                                        + "       syscall\n";
                                            } else {
                                                code += "       li $v0, 1\n"
                                                        + "       lw $a0, _" + cuad.getArgumento2() + "\n"
                                                        + "       syscall\n";
                                            }
                                        }
                                    }
                                }
                                int msg2 = 0;
                                for (int i = 0; i < this.mensajes.size(); i++) {
                                    if (this.mensajes.get(i).equals(segunda)) {
                                        msg2 = i;
                                    }
                                }
                                code += "       li $v0, 4\n"
                                        + "       la $a0, _msg" + (msg2 + 1) + "\n"
                                        + "       syscall\n";
                            }
                        }
                    } else {
                        code += "       li $v0, 4\n"
                                + "       la $a0, _msg" + valor + "\n"
                                + "       syscall\n";
                    }
                    break;
                case "ETIQ":
                    code += "_" + cuad.getArgumento1() + ":\n";
                    break;
                case "GOTO":
                    code += "       b _" + cuad.getArgumento1() + "\n";
                    break;
                case "*":
                case "+":
                case "-":
                case "/":
                    String numero = "[0-9]+";
                    int t1 = 0;
                    int t2 = 0;
                    if (cuad.getArgumento1().contains("#t") && cuad.getArgumento2().contains("#t")) {
                        for (int i = 0; i < 10; i++) {
                            if (cuad.getArgumento1().equals(temporales.get(i).activado)) {
                                t1 = i;
                            }
                            if (cuad.getArgumento2().equals(temporales.get(i).activado)) {
                                t2 = i;
                            }
                        }
                    } else if (cuad.getArgumento1().contains("#t")) {
                        boolean chosen = false;
                        for (int i = 0; i < 10; i++) {
                            if (cuad.getArgumento1().equals(temporales.get(i).activado)) {
                                t1 = i;
                            }
                            if (!temporales.get(i).isVivo() && !chosen) {
                                t2 = i;
                                temporales.get(i).setVivo(true);
                                chosen = true;
                            }
                        }
                        if (cuad.getArgumento2().matches(numero)) {
                            code += "       li $t" + t2 + ", " + cuad.getArgumento2() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento2())) {
                                if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento2());
                                    code += "       move $t" + t2 + ", $s" + par + "\n";
                                } else {
                                    if (isPointerF(cuad.getArgumento2())) {
                                        code += "       lw $t" + t2 + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                        code += "       lw $t" + t2 + ", 0($t" + t2 + ")\n";
                                    } else {
                                        code += "       lw $t" + t2 + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                    }
                                }
                            } else {
                                if (isPointerF(cuad.getArgumento2())) {
                                    code += "       lw $t" + t2 + ", _" + cuad.getArgumento2() + "\n";
                                    code += "       lw $t" + t2 + ", 0($t" + t2 + ")\n";
                                } else {
                                    code += "       lw $t" + t2 + ", _" + cuad.getArgumento2() + "\n";
                                }
                            }

                        }
                    } else if (cuad.getArgumento2().contains("#t")) {
                        boolean chosen = false;
                        for (int i = 0; i < 10; i++) {
                            if (cuad.getArgumento2().equals(temporales.get(i).activado)) {
                                t2 = i;
                            }
                            if (!temporales.get(i).isVivo() && !chosen) {
                                t1 = i;
                                temporales.get(i).setVivo(true);
                                chosen = true;
                            }
                        }
                        if (cuad.getArgumento1().matches(numero)) {
                            code += "       li $t" + t1 + ", " + cuad.getArgumento1() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento1())) {
                                if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento1());
                                    code += "       move $t" + t1 + ", $s" + par + "\n";
                                } else {
                                    if (isPointerF(cuad.getArgumento1())) {
                                        code += "       lw $t" + t1 + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                        code += "       lw $t" + t1 + ", 0($t" + t1 + ")\n";
                                    } else {
                                        code += "       lw $t" + t1 + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                }
                            } else {
                                if (isPointerF(cuad.getArgumento1())) {
                                    code += "       lw $t" + t1 + ", _" + cuad.getArgumento1() + "\n";
                                    code += "       lw $t" + t1 + ", 0($t" + t1 + ")\n";
                                } else {
                                    code += "       lw $t" + t1 + ", _" + cuad.getArgumento1() + "\n";
                                }
                            }
                        }

                    } else {
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t1 = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t2 = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        if (cuad.getArgumento1().matches(numero)) {
                            code += "       li $t" + t1 + ", " + cuad.getArgumento1() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento1())) {
                                if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento1());
                                    code += "       move $t" + t1 + ", $s" + par + "\n";
                                } else {
                                    if (isPointerF(cuad.getArgumento1())) {
                                        code += "       lw $t" + t1 + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                        code += "       lw $t" + t1 + ", 0($t" + t1 + ")\n";
                                    } else {
                                        code += "       lw $t" + t1 + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                }
                            } else {
                                if (isPointerF(cuad.getArgumento1())) {
                                    code += "       lw $t" + t1 + ", _" + cuad.getArgumento1() + "\n";
                                    code += "       lw $t" + t1 + ", 0($t" + t1 + ")\n";
                                } else {
                                    code += "       lw $t" + t1 + ", _" + cuad.getArgumento1() + "\n";
                                }
                            }
                        }
                        if (cuad.getArgumento2().matches(numero)) {
                            code += "       li $t" + t2 + ", " + cuad.getArgumento2() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento2())) {
                                if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento2());
                                    code += "       move $t" + t2 + ", $s" + par + "\n";
                                } else {
                                    if (isPointerF(cuad.getArgumento2())) {
                                        code += "       lw $t" + t2 + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                        code += "       lw $t" + t2 + ", 0($t" + t2 + ")\n";
                                    } else {
                                        code += "       lw $t" + t2 + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                    }
                                }
                            } else {
                                if (isPointerF(cuad.getArgumento2())) {
                                    code += "       lw $t" + t2 + ", _" + cuad.getArgumento2() + "\n";
                                    code += "       lw $t" + t2 + ", 0($t" + t2 + ")\n";
                                } else {
                                    code += "       lw $t" + t2 + ", _" + cuad.getArgumento2() + "\n";
                                }

                            }
                        }
                    }
                    int t3 = 0;
                    for (int i = 0; i < 10; i++) {
                        if (!temporales.get(i).isVivo()) {
                            t3 = i;
                            temporales.get(i).setVivo(true);
                            temporales.get(i).setActivado(cuad.getResultado());
                            break;
                        }
                    }
                    if (cuad.getOperador().equals("+")) {
                        code += "       add $t" + t3 + ", $t" + t1 + ", $t" + t2 + "\n";
                    } else if (cuad.getOperador().equals("-")) {
                        code += "       sub $t" + t3 + ", $t" + t1 + ", $t" + t2 + "\n";
                    } else if (cuad.getOperador().equals("*")) {
                        code += "       mul $t" + t3 + ", $t" + t1 + ", $t" + t2 + "\n";
                    } else if (cuad.getOperador().equals("/")) {
                        code += "       div $t" + t3 + ", $t" + t1 + ", $t" + t2 + "\n";
                    }
                    temporales.get(t1).setVivo(false);
                    temporales.get(t1).setActivado("");
                    temporales.get(t2).setVivo(false);
                    temporales.get(t2).setActivado("");
                    break;
                case "=":
                    String num = "[0-9]+";
                    boolean did = false;
                    int asig = 0;
                    int ntemp = 0;
                    for (int i = 0; i < 10; i++) {
                        if (temporales.get(i).isVivo() && temporales.get(i).getActivado().equals(cuad.getArgumento1())) {
                            asig = i;
                            did = true;
                        }
                    }
                    for (int i = 0; i < 10; i++) {
                        if (!temporales.get(i).isVivo()) {
                            ntemp = i;
                            break;
                        }
                    }
                    if (did) {
                        if (isLocal(cuad.getResultado())) {
                            if (isParam(cuad.getResultado(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getResultado());
                                code += "       move $s" + par + ", $t" + asig + "\n";
                            } else {
                                if (isCharF(cuad.getResultado())) {
                                    code += "       sb $t" + asig + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                                } else {
                                    code += "       sw $t" + asig + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                                }
                            }
                        } else {
                            if (isCharF(cuad.getResultado())) {
                                code += "       sb $t" + asig + ", _" + cuad.getResultado() + "\n";
                            } else {
                                code += "       sw $t" + asig + ", _" + cuad.getResultado() + "\n";
                            }
                        }
                        temporales.get(asig).setVivo(false);
                        temporales.get(asig).setActivado("");
                    } else if (cuad.getArgumento1().matches(num)) {
                        code += "       li $t" + ntemp + ", " + cuad.getArgumento1() + "\n";
                        if (isLocal(cuad.getResultado())) {
                            if (isParam(cuad.getResultado(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getResultado());
                                code += "       move $s" + par + ", $t" + ntemp + "\n";
                            } else {
                                code += "       sw $t" + ntemp + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                            }
                        } else {
                            code += "       sw $t" + ntemp + ", _" + cuad.getResultado() + "\n";
                        }
                    } else if (cuad.getArgumento1().contains("'")) {
                        code += "       li $t" + ntemp + ", " + cuad.getArgumento1() + "\n";
                        if (isLocal(cuad.getResultado())) {
                            if (isParam(cuad.getResultado(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getResultado());
                                code += "       move $s" + par + ", $t" + ntemp + "\n";
                            } else {
                                code += "       sb $t" + ntemp + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                            }
                        } else {
                            code += "       sb $t" + ntemp + ", _" + cuad.getResultado() + "\n";
                        }
                    } else if (cuad.getArgumento1().equals("RET")) {
                        code += "       move $t" + ntemp + ", $v0\n";
                        temporales.get(ntemp).setVivo(true);
                        temporales.get(ntemp).setActivado(cuad.getResultado());
                    } else {
                        if (isLocal(cuad.getArgumento1())) {
                            if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getArgumento1());
                                code += "       move $t" + ntemp + ", $s" + par + "\n";
                            } else {
                                if (isCharF(cuad.getArgumento1()) && !isPointerF(cuad.getResultado())) {
                                    code += "       lb $t" + ntemp + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                } else {
                                    if (isPointerF(cuad.getResultado()) && !isPointerF(cuad.getArgumento1())) {//////////
                                        code += "       la $t" + ntemp + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    } else {
                                        code += "       lw $t" + ntemp + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }
                                }
                            }
                        } else {
                            if (isCharF(cuad.getArgumento1()) && !isPointerF(cuad.getResultado())) {
                                code += "       lb $t" + ntemp + ", _" + cuad.getArgumento1() + "\n";
                            } else {
                                if (isPointerF(cuad.getResultado()) && !isPointerF(cuad.getArgumento1())) {
                                    code += "       la $t" + ntemp + ", _" + cuad.getArgumento1() + "\n";//////
                                } else {
                                    code += "       lw $t" + ntemp + ", _" + cuad.getArgumento1() + "\n";
                                }
                            }
                        }
                        if (isLocal(cuad.getResultado())) {
                            if (isParam(cuad.getResultado(), this.ambito_final)) {
                                int par = whatParam(parametros, cuad.getResultado());
                                code += "       move $s" + par + ", $t" + ntemp + "\n";
                            } else {
                                if (isCharF(cuad.getResultado()) && !isPointerF(cuad.getArgumento1())) {
                                    code += "       sb $t" + ntemp + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                                } else {
                                    int t = 0;
                                    for (int i = 0; i < temporales.size(); i++) {
                                        if (!temporales.get(i).isVivo()) {
                                            t = i;
                                            break;
                                        }
                                    }
                                    if (isPointerF(cuad.getArgumento1()) && !isPointerF(cuad.getResultado())) {////////
                                        code += "       lw $t" + t + ", 0($t" + ntemp + ")\n";
                                        code += "       sw $t" + t + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                                    } else {
                                        code += "       sw $t" + ntemp + ", -" + getOffsetF(cuad.getResultado()) + "($fp)\n";
                                    }
                                }
                            }
                        } else {
                            if (isCharF(cuad.getResultado()) && !isPointerF(cuad.getArgumento1())) {
                                code += "       sb $t" + ntemp + ", _" + cuad.getResultado() + "\n";
                            } else {
                                int t = 0;
                                for (int i = 0; i < temporales.size(); i++) {
                                    if (!temporales.get(i).isVivo()) {
                                        t = i;
                                        break;
                                    }
                                }
                                if (isPointerF(cuad.getArgumento1()) && !isPointerF(cuad.getResultado())) {////////
                                    code += "       lw $t" + t + ", 0($t" + ntemp + ")\n";
                                    code += "       sw $t" + t + ", _" + cuad.getResultado() + "\n";
                                } else {
                                    code += "       sw $t" + ntemp + ", _" + cuad.getResultado() + "\n";
                                }
                            }
                        }
                    }
                    break;
                default:
                    if (cuad.getOperador().contains("IF")) {
                        String op = cuad.getOperador().substring(2, cuad.getOperador().length());
                        int t_izq = 0;
                        int t_der = 0;
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t_izq = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        for (int i = 0; i < 10; i++) {
                            if (!temporales.get(i).isVivo()) {
                                t_der = i;
                                temporales.get(i).setVivo(true);
                                break;
                            }
                        }
                        if (cuad.getArgumento1().matches("[0-9]+")) {
                            code += "       li $t" + t_izq + ", " + cuad.getArgumento1() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento1())) {
                                if (isParam(cuad.getArgumento1(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento1());
                                    code += "       move $t" + t_izq + ", $s" + par + "\n";
                                } else {
                                    if(isPointerF(cuad.getArgumento1())){
                                        code += "       lw $t" + t_izq + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                        code += "       lw $t" + t_izq + ", 0($t" + t_izq + ")\n";
                                    }else{
                                        code += "       lw $t" + t_izq + ", -" + getOffsetF(cuad.getArgumento1()) + "($fp)\n";
                                    }                                    
                                }
                            } else {
                                if(isPointerF(code)){
                                    code += "       lw $t" + t_izq + ", _" + cuad.getArgumento1() + "\n";
                                    code += "       lw $t" + t_izq + ", 0($f" + t_izq + ")\n";
                                }else{
                                    code += "       lw $t" + t_izq + ", _" + cuad.getArgumento1() + "\n";
                                }                                
                            }
                        }
                        if (cuad.getArgumento2().matches("[0-9]+")) {
                            code += "       li $t" + t_der + ", " + cuad.getArgumento2() + "\n";
                        } else {
                            if (isLocal(cuad.getArgumento2())) {
                                if (isParam(cuad.getArgumento2(), this.ambito_final)) {
                                    int par = whatParam(parametros, cuad.getArgumento2());
                                    code += "       move $t" + t_der + ", $s" + par + "\n";
                                } else {
                                    if (isPointerF(cuad.getArgumento2())) {
                                        code += "       lw $t" + t_der + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                        code += "       lw $t" + t_der + ", 0($t" + t_der + ")\n";
                                    } else {
                                        code += "       lw $t" + t_der + ", -" + getOffsetF(cuad.getArgumento2()) + "($fp)\n";
                                    }
                                    
                                }
                            } else {
                                if (isPointerF(cuad.getArgumento2())) {
                                    code += "       lw $t" + t_der + ", _" + cuad.getArgumento2() + "\n";
                                    code += "       lw $t" + t_der + ", 0($t" + t_der + ")\n";
                                } else {
                                    code += "       lw $t" + t_der + ", _" + cuad.getArgumento2() + "\n";
                                }                                
                            }
                        }
                        switch (op) {
                            case ">":
                                code += "       bgt $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            case "<":
                                code += "       blt $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            case ">=":
                                code += "       bge $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            case "<=":
                                code += "       ble $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            case "==":
                                code += "       beq $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            case "!=":
                                code += "       bne $t" + t_izq + ", $t" + t_der + ", _" + cuad.getResultado() + "\n";
                                break;
                            default:
                                code += "       nada\n";
                        }
                        temporales.get(t_izq).setVivo(false);
                        temporales.get(t_der).setVivo(false);
                    }
            }
        }
        this.ta_codigo_final.append(code);
        guardar_codigoF();
    }

    public boolean isLocal(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals(this.ambito_final)) {
                ret = true;
            }
        }
        return ret;
    }

    public int contParamF() {
        int ret = 0;
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals(this.ambito_final)) {
                ret = this.funciones.get(i).getParams().size();
            }
        }
        return ret;
    }

    public boolean isParam(String variable, String ambito) {
        boolean res = false;
        ArrayList<Variable> params = new ArrayList();
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals(ambito)) {
                params = this.funciones.get(i).getParams();
            }
        }
        for (int i = 0; i < params.size(); i++) {
            if (params.get(i).getId().equals(variable)) {
                res = true;
            }
        }
        return res;
    }

    public int getOffsetF(String variable) {
        int off = 0;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (variable.equals(this.tabla.get(i).getId()) && this.ambito_final.equals(this.tabla.get(i).getAmbito())) {
                off = this.tabla.get(i).getOffset();
            }
        }
        return off;
    }

    public boolean isCharF(String variable) {
        int j = 0;
        boolean res = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals(this.ambito_actual)) {
                if (this.tabla.get(i).getTipo().equals("char")) {
                    res = true;
                    j++;
                }
            }
        }
        if (j == 0) {
            for (int i = 0; i < this.tabla.size(); i++) {
                if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals("1Global")) {
                    if (this.tabla.get(i).getTipo().equals("char")) {
                        res = true;
                        j++;
                    }
                }
            }
        }
        return res;
    }

    public boolean isCharFG(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals("1Global")) {
                if (this.tabla.get(i).getTipo().equals("char")) {
                    ret = true;
                }
            }
        }
        return ret;
    }

    public boolean isPointerF(String variable) {
        int j = 0;
        boolean res = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals(this.ambito_actual)) {
                if (this.tabla.get(i).getTipo().contains("*")) {
                    res = true;
                    j++;
                }
            }
        }
        if (j == 0) {
            for (int i = 0; i < this.tabla.size(); i++) {
                if (this.tabla.get(i).getId().equals(variable) && this.tabla.get(i).getAmbito().equals("1Global")) {
                    if (this.tabla.get(i).getTipo().contains("*")) {
                        res = true;
                        j++;
                    }
                }
            }
        }
        return res;
    }

    public int whatParam(ArrayList<Temporal> arr, String valor) {
        int ret = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i).getActivado().equals(valor)) {
                ret = i;
            }
        }
        return ret;
    }

    public void guardar_codigoF() {
        FileWriter fichero2 = null;
        PrintWriter pw = null;
        try {
            fichero2 = new FileWriter("./MIPS.asm");
            pw = new PrintWriter(fichero2);
            pw.print(this.ta_codigo_final.getText());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero2) {
                    fichero2.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(this, "Ocurrio un error");
                //e2.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextArea;
    private javax.swing.JTextArea TextErrores;
    private javax.swing.JButton bt_guardar;
    private javax.swing.JButton bt_probar;
    private javax.swing.JButton bt_seleccionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea ta_codigo_final;
    private javax.swing.JTable table_cuadruplos;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
    File fichero;
    ArrayList<String> errores_semanticos = new ArrayList();
    ArrayList<Variable> tabla = new ArrayList();
    ArrayList<Funcion> funciones = new ArrayList();
    ArrayList<Funcion> decfunciones = new ArrayList();
    ArrayList<String> variables = new ArrayList();
    ArrayList<String> constantes = new ArrayList();
    ArrayList<String> operadores = new ArrayList();
    ArrayList<ArrayList<String>> funccall = new ArrayList();
    String ambito_actual = "";
    String tipo_actual = "";
    String asig_tipo = "";
    boolean return_flag = false;
    boolean printf_flag = false;
    boolean asig_flag = false;
    String printf_tipo = "";
    int offset = 0;
    //Intermedio
    ArrayList<Cuadruplo> cuadruplos = new ArrayList();
    ArrayList<String> exp_intermedio = new ArrayList();
    ArrayList<String> exp_bool = new ArrayList();
    int cont_temp = 0;
    int cont_etiq = 0;
    boolean int_asig_flag = false;
    boolean int_ret_flag = false;
    boolean int_print_flag = false;
    boolean agrega = true;
    String int_asig_value = "";
    String int_print_value = "";
    //Final
    String ambito_final = "";
    ArrayList<String> mensajes = new ArrayList();
}
