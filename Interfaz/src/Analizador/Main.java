/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Analizador;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        bt_seleccionar = new javax.swing.JButton();
        bt_probar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        bt_guardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextErrores = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador Mini-C");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        bt_seleccionar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_seleccionar.setText("Seleccionar Archivo");
        bt_seleccionar.setName("bt_seleccionar"); // NOI18N
        bt_seleccionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_seleccionarMouseClicked(evt);
            }
        });

        bt_probar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_probar.setText("Probar");
        bt_probar.setName("bt_probar"); // NOI18N
        bt_probar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_probarMouseClicked(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        bt_guardar.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        bt_guardar.setText("Guardar");
        bt_guardar.setName("bt_guardar"); // NOI18N
        bt_guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_guardarMouseClicked(evt);
            }
        });

        TextErrores.setColumns(20);
        TextErrores.setRows(5);
        jScrollPane2.setViewportView(TextErrores);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Archivo: ");

        titulo.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        titulo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bt_seleccionar)
                        .addGap(18, 18, 18)
                        .addComponent(bt_guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                        .addComponent(bt_probar)
                        .addGap(25, 25, 25))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titulo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(titulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_seleccionar)
                    .addComponent(bt_probar)
                    .addComponent(bt_guardar))
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab1", jPanel1);
        jTabbedPane1.addTab("tab2", jTabbedPane2);
        jTabbedPane1.addTab("tab3", jTabbedPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_probarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_probarMouseClicked
        try {
            //File file = new File("C:\\Users\\HP\\Desktop\\Periodo actual\\Compi\\Mini-C\\Interfaz\\src\\Analizador\\prb.txt");
            Lexer lexer = new Lexer(new FileReader(fichero));
            ASintactico p = new ASintactico(lexer);
            System.out.println("**************************************************");
            p.parse();
            System.out.println("**************************************************");
            this.TextErrores.setText("");
            ArrayList<String> lexi = lexer.errores;
            ArrayList<String> l = p.errores;

            //semantico
            tabla.clear();
            funciones.clear();
            decfunciones.clear();
            errores_semanticos.clear();
            recorrer(p.Tree);

            int m = verificar_main();
            switch (m) {
                case 0:
                    System.out.println("No existe main");//*******
                    break;
                case 1:
                    System.out.println("Bien");//*******
                    break;
                default:
                    System.out.println("Hay m√°s de 1 main");//*******
                    break;
            }

            for (int i = 0; i < tabla.size(); i++) {
                System.out.println("Variable: Tipo = " + tabla.get(i).getTipo() + " , Id = " + tabla.get(i).getId() + " , Ambito = " + tabla.get(i).getAmbito());
            }
            for (int i = 0; i < funciones.size(); i++) {
                System.out.println("Funcion: Tipo = " + funciones.get(i).getTipo() + " , Id = " + funciones.get(i).getId());
                System.out.println("Parametros:");
                for (int j = 0; j < funciones.get(i).getParams().size(); j++) {
                    System.out.print((j + 1) + " Tipo = " + funciones.get(i).getParams().get(j).getTipo() + " Id = ");
                    System.out.println(funciones.get(i).getParams().get(j).getId() + " Ambito = " + funciones.get(i).getParams().get(j).getAmbito());
                }
            }
            for (int i = 0; i < this.decfunciones.size(); i++) {
                System.out.println("DECFUNC: " + this.decfunciones.get(i).getId());
                for (int j = 0; j < this.decfunciones.get(i).getParams().size(); j++) {
                    System.out.println(this.decfunciones.get(i).getParams().get(j).getTipo());
                }
            }
            //************
            if (l.isEmpty() && lexi.isEmpty() && errores_semanticos.isEmpty()) {
                this.TextErrores.append("Compilado sin errores!");
                //codigo intermedio

            }
            for (int i = 0; i < lexi.size(); i++) {
                this.TextErrores.append(lexi.get(i) + "\n");
            }
            for (int i = 0; i < l.size(); i++) {
                this.TextErrores.append(l.get(i) + "\n");
            }
            for (int i = 0; i < errores_semanticos.size(); i++) {
                this.TextErrores.append(errores_semanticos.get(i) + "\n");
            }
        } catch (Exception e) {
            System.out.println("ERROR");
            e.printStackTrace();
        }
    }//GEN-LAST:event_bt_probarMouseClicked

    private void bt_seleccionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_seleccionarMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            fichero = fileChooser.getSelectedFile();

            FileReader fr = null;
            BufferedReader bf = null;
            try {
                fr = new FileReader(fichero);
                bf = new BufferedReader(fr);
                String linea;
                this.TextArea.setText("");
                this.TextErrores.setText("");
                while ((linea = bf.readLine()) != null) {
                    this.TextArea.append(linea + "\n");
                }
                this.titulo.setText(fichero.getName());
            } catch (Exception e) {
            } finally {
                try {
                    fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_bt_seleccionarMouseClicked

    private void bt_guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_guardarMouseClicked

        FileWriter fichero2 = null;
        PrintWriter pw = null;
        try {
            fichero2 = new FileWriter(fichero.getAbsolutePath());
            pw = new PrintWriter(fichero2);
            pw.print(this.TextArea.getText());
            this.TextErrores.setText("");
            JOptionPane.showMessageDialog(this, "Archivo guardado");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado un archivo");
            //e.printStackTrace();
        } finally {
            try {
                if (null != fichero2) {
                    fichero2.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(this, "Ocurrio un error");
                //e2.printStackTrace();
            }
        }

    }//GEN-LAST:event_bt_guardarMouseClicked

    //Metodos
    //semantico
    public void recorrer(TreeNode tn) {
        TreeNode nodo = tn;
        if (nodo != null) {
            if (nodo.getVal().equals("Declaracion")) {
                String tipo = "";
                String id = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo += "*";
                        }
                    } else if (hijo.getVal().equals("*")) {
                        tipo += "*";
                    } else if (hijo.getVal().equals("ID")) {
                        id += hijo.getHijos().get(0).getVal();
                        if (verificar_variable(id)) {
                            //System.out.println("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                            this.errores_semanticos.add("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                        } else {
                            this.tabla.add(new Variable(tipo, id, this.ambito_actual));
                        }
                        if (tipo.contains("*")) {
                            tipo = tipo.substring(0, tipo.length() - 1);
                        }
                        id = "";
                    }
                }
            } else if (nodo.getVal().equals("Funcion")) {
                String tipo_f = "";
                String id_f = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo_f = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().size() > 1) {
                            if (hijo.getHijos().get(1).getVal().equals("*")) {
                                tipo_f += "*";
                            }
                        }

                        this.tipo_actual = tipo_f;
                    } else if (hijo.getVal().equals("ID")) {
                        id_f += hijo.getHijos().get(0).getVal();
                        this.ambito_actual = id_f;
                    } else if (hijo.getVal().equals("p") || hijo.getVal().equals("#")) {
                        if (!"".equals(tipo_f)) {
                            ArrayList<Variable> v = parametros(hijo, new ArrayList<>());
                            Funcion func = (new Funcion(tipo_f, id_f));
                            func.agregar_params(v);

                            boolean verificar = false;
                            String ambito1 = "", id1 = "";
                            for (int i = 0; i < v.size() - 1; i++) {
                                for (int j = i + 1; j < v.size(); j++) {
                                    if (v.get(i).id.equals(v.get(j).id) && v.get(i).ambito.equals(v.get(j).ambito)) {
                                        verificar = true;
                                        ambito1 = v.get(i).ambito;
                                        id1 = v.get(i).id;
                                    }
                                }
                            }

                            if (verificar) {
                                System.out.println("Hay parametros que se llaman igual");
                            } else {
                                System.out.println("No hay parametros que se llamen igual");
                            }

                            if (verificar_funcion(id_f)) {
                                if (!verificar) {
                                    this.funciones.add(func);
                                    for (Variable variable : v) {
                                        tabla.add(variable);
                                    }
                                } else {
                                    this.errores_semanticos.add("La variable "+id1+" fue definida m√°s de una vez en la funci√≥n "+ambito1);
                                }

                            } else {
                                //System.out.println("La funcion " + id_f + " fue declarada m√°s de una vez.");
                                this.errores_semanticos.add("La funcion " + id_f + " fue declarada m√°s de una vez.");
                            }

                            tipo_f = "";
                            id_f = "";
                        }
                    } else {
                        recorrer(hijo);
                    }
                }
            } else if (nodo.getVal().equals("DecFuncion")) {
                String tipo_f = "";
                String id_f = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo_f = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo_f += "*";
                        }
                    } else if (hijo.getVal().equals("ID")) {
                        id_f += hijo.getHijos().get(0).getVal();
                        this.ambito_actual = id_f;
                    } else if (hijo.getVal().equals("p") || hijo.getVal().equals("#")) {
                        if (!"".equals(tipo_f)) {
                            ArrayList<Variable> v = parametros(hijo, new ArrayList<>());
                            Funcion func = (new Funcion(tipo_f, id_f));
                            func.agregar_params(v);
                            if (verificar_decfunc(id_f)) {
                                this.decfunciones.add(func);
                            } else {
                                //System.out.println("La funcion " + id_f + " fue definida m√°s de una vez.");
                                this.errores_semanticos.add("La funcion " + id_f + " fue definida m√°s de una vez.");
                            }

                            tipo_f = "";
                            id_f = "";
                        }
                    } else {
                        recorrer(hijo);
                    }
                }
            } else if (nodo.getVal().equals("Exp")) {
                this.variables.clear();
                this.constantes.clear();
                variables_expresion(nodo);
                boolean ambitos = true;
                for (int i = 0; i < this.variables.size(); i++) {
                    if (!verificar_variables_exp(this.variables.get(i))) {
                        //System.out.println("La variable " + variables.get(i) + " No existe o no est√° en la funcion " + this.ambito_actual);
                        this.errores_semanticos.add("La variable " + variables.get(i) + " No existe o no est√° en la funcion " + this.ambito_actual);
                        ambitos = false;
                    }
                }
                if (ambitos) {
                    ArrayList<Variable> tipos = new ArrayList<>();
                    for (int i = 0; i < this.variables.size(); i++) {
                        String v = this.variables.get(i);
                        boolean pointer = false;
                        if (v.charAt(0) == '*') {
                            v = v.substring(1);
                            pointer = true;
                        }
                        for (int j = 0; j < this.tabla.size(); j++) {
                            if (v.equals(this.tabla.get(j).getId()) && (this.tabla.get(j).getAmbito().equals(this.ambito_actual) || this.tabla.get(j).getAmbito().equals("1Global"))) {
                                if (pointer) {
                                    if (this.tabla.get(j).getTipo().contains("*")) {
                                        Variable vai = new Variable(this.tabla.get(j).getTipo(), this.tabla.get(j).getId(), this.tabla.get(j).getAmbito());
                                        vai.setTipo(vai.getTipo().substring(0, vai.getTipo().length() - 1));
                                        tipos.add(vai);
                                    } else {
                                        //System.out.println("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                        this.errores_semanticos.add("Est√° intentando usar * en una variable que no es pointer " + this.tabla.get(j).getId());
                                    }
                                } else {
                                    tipos.add(this.tabla.get(j));
                                }

                            }
                        }
                    }
                    String tipo_1 = "";
                    if (tipos.size() > 0) {
                        tipo_1 = tipos.get(0).getTipo();
                    }

                    boolean tipos_iguales = true;
                    for (int i = 1; i < tipos.size(); i++) {
                        if (!tipos.get(i).getTipo().equals(tipo_1)) {
                            tipos_iguales = false;
                            //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " variable " + tipos.get(i).getId());
                            this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " variable " + tipos.get(i).getId());
                        }
                    }
                    if (!tipo_1.equals("")) {
                        for (int i = 0; i < this.constantes.size(); i++) {
                            if (!this.constantes.get(i).equals(tipo_1)) {
                                tipos_iguales = false;
                                //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                                this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                            }
                        }
                    } else {
                        if (this.constantes.size() > 0) {
                            tipo_1 = this.constantes.get(0);
                        }
                        for (int i = 1; i < this.constantes.size(); i++) {
                            if (!this.constantes.get(i).equals(tipo_1)) {
                                tipos_iguales = false;
                                //System.out.println("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                                this.errores_semanticos.add("Error de tipos: Funcion " + this.ambito_actual + " constante " + this.constantes.get(i));
                            }
                        }
                    }
                    if (this.return_flag) {
                        if (!tipo_1.equals(this.tipo_actual)) {
                            //System.out.println("El tipo del return en la funcion " + this.ambito_actual + " no corresponde.");
                            this.errores_semanticos.add("El tipo del return en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.return_flag = false;
                    }
                    if (this.printf_flag) {
                        if (!tipo_1.equals(this.printf_tipo)) {
                            this.errores_semanticos.add("El tipo del printf en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.printf_flag = false;
                    }
                    if (this.asig_flag) {
                        System.out.println("TIPOOOO = " + this.asig_tipo);
                        if (!tipo_1.equals(this.asig_tipo)) {
                            this.errores_semanticos.add("El tipo de la asignacion en la funcion " + this.ambito_actual + " no corresponde.");
                        }
                        this.asig_flag = false;
                    }
                }

            } else if (nodo.getVal().equals("DecGlobal")) {
                String tipo = "";
                String id = "";
                for (TreeNode hijo : nodo.getHijos()) {
                    if (hijo.getVal().equals("Tipo")) {
                        tipo = hijo.getHijos().get(0).getVal();
                        if (hijo.getHijos().get(1).getVal().equals("*")) {
                            tipo += "*";
                        }
                    } else if (hijo.getVal().equals("*")) {
                        tipo += "*";
                    } else if (hijo.getVal().equals("ID")) {
                        id += hijo.getHijos().get(0).getVal();
                        if (verificar_variable_global(id)) {
                            //System.out.println("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                            this.errores_semanticos.add("Error Sem√°ntico: La variable '" + id + "' ha sido declarada m√°s de una vez");
                        }
                        this.tabla.add(new Variable(tipo, id, "1Global"));
                        if (tipo.contains("*")) {
                            tipo = tipo.substring(0, tipo.length() - 1);
                        }
                        id = "";
                    }
                }
            } else if (nodo.getVal().equals("return")) {
                this.return_flag = true;
                recorrer(nodo.getHijos().get(0));
            } else if (nodo.getVal().equals("Printf")) {
                String cadena = nodo.getHijos().get(0).getVal();
                String acum = "";
                this.printf_tipo = "";
                int cont = 0;
                for (int i = 0; i < cadena.length(); i++) {
                    if (cadena.charAt(i) == '%') {
                        acum += '%';
                    } else if (cadena.charAt(i) == 'd' || cadena.charAt(i) == 'c') {
                        if (acum.length() > 0) {
                            cont++;
                            acum = "";
                            if (cadena.charAt(i) == 'd') {
                                this.printf_tipo = "int";
                            } else {
                                this.printf_tipo = "char";
                            }
                        }
                    }
                }
                if (cont > 1) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " espera m√°s parametros de los que requiere.");
                } else if (cont == 0 && !nodo.getHijos().get(1).getVal().equals("#")) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " contiene m√°s par√°metros de lo esperado.");
                } else if (cont == 1 && nodo.getHijos().get(1).getVal().equals("#")) {
                    this.errores_semanticos.add("Printf en la funcion " + this.ambito_actual + " no contiene el par√°metro esperado.");
                } else {
                    this.printf_flag = true;
                    recorrer(nodo.getHijos().get(1));
                }
            } else if (nodo.getVal().equals("Scanf")) {
                String cadena = nodo.getHijos().get(0).getVal();
                String ampersant = nodo.getHijos().get(1).getVal();
                String id = nodo.getHijos().get(2).getHijos().get(0).getVal();
                String tipo_scan = "";
                if (cadena.equals("%d") || cadena.equals("%c")) {
                    if (cadena.equals("%d")) {
                        tipo_scan = "int";
                    } else {
                        tipo_scan = "char";
                    }
                    if (ampersant.equals("#")) {
                        tipo_scan += "*";
                    }
                    if (verificar_variable(id)) {
                        System.out.println("TIPO DE " + id + " " + tipo_var(id));
                        System.out.println("Tipo DE scanf" + tipo_scan);
                        if (!tipo_scan.equals(tipo_var(id))) {
                            this.errores_semanticos.add("Los tipos en el scanf de la funcion " + this.ambito_actual + " no concuerdan");
                        }
                    } else {
                        this.errores_semanticos.add("La variable " + id + " en el Scanf en la funcion " + this.ambito_actual + " no existe");
                    }
                } else {
                    this.errores_semanticos.add("Scanf en la funcion " + this.ambito_actual + " debe ser %d o %c");
                }
            } else if (nodo.getVal().equals("Asig")) {
                String variable = nodo.getHijos().get(0).getHijos().get(0).getVal();
                if (!verificar_variables_exp(variable)) {
                    this.errores_semanticos.add("La variable " + variable + " No existe o no est√° en la funcion " + this.ambito_actual);
                } else {
                    this.asig_flag = true;
                    this.asig_tipo = tipo_var(variable);
                    recorrer(nodo.getHijos().get(1));
                }
            } else {
                for (TreeNode hijo : nodo.getHijos()) {
                    recorrer(hijo);
                }
            }
        }
    }

    public ArrayList<Variable> parametros(TreeNode tn, ArrayList<Variable> arr) {
        if (!tn.getHijos().isEmpty()) {
            for (TreeNode hijo : tn.getHijos()) {
                if (hijo.getVal().equals("Tipo")) {
                    Variable v = new Variable(hijo.getHijos().get(0).getVal(), "", this.ambito_actual);
                    if (!"#".equals(hijo.getHijos().get(1).getVal())) {
                        v.setTipo(v.getTipo() + "*");
                    }
                    arr.add(v);
                } else if (hijo.getVal().equals("ID")) {
                    arr.get(arr.size() - 1).setId(hijo.getHijos().get(0).getVal());
                } else if (hijo.getVal().equals("p")) {
                    return parametros(hijo, arr);
                }
            }
        }
        return arr;
    }

    public boolean verificar_variable(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (variable.equals(this.tabla.get(i).getId()) && this.ambito_actual.equals(this.tabla.get(i).getAmbito())) {
                ret = true;
            }
        }
        return ret;
    }

    public boolean verificar_variable_global(String variable) {
        boolean ret = false;
        for (int i = 0; i < this.tabla.size(); i++) {
            if (variable.equals(this.tabla.get(i).getId()) && ("1Global").equals(this.tabla.get(i).getAmbito())) {
                ret = true;
            }
        }
        for (int i = 0; i < this.funciones.size(); i++) {
            if (variable.equals(this.funciones.get(i).getId())) {
                ret = true;
            }
        }
        for (int i = 0; i < this.decfunciones.size(); i++) {
            if (variable.equals(this.decfunciones.get(i).getId())) {
                ret = true;
            }
        }
        return ret;
    }

    public boolean verificar_variables_exp(String v) {
        boolean ret = false;
        if (v.charAt(0) == '*') {
            v = v.substring(1);
        }
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(v) && (this.tabla.get(i).getAmbito().equals(this.ambito_actual) || this.tabla.get(i).getAmbito().equals("1Global"))) {
                ret = true;
            }
        }
        return ret;
    }

    public void variables_expresion(TreeNode root) {
        for (TreeNode hijo : root.getHijos()) {
            if (hijo.getVal().equals("ID")) {
                if (hijo.getHijos().get(0).getVal().equals("*")) {
                    this.variables.add("*" + hijo.getHijos().get(1).getVal());
                } else if (hijo.getHijos().get(0).getVal().equals("&")) {
                    this.variables.add(hijo.getHijos().get(1).getVal());
                } else {
                    this.variables.add(hijo.getHijos().get(0).getVal());
                }
            } else if (hijo.getVal().equals("#")) {
            } else if (hijo.getVal().equals("Num")) {
                this.constantes.add("int");
            } else if (hijo.getVal().equals("ConstChar")) {
                this.constantes.add("char");
            } else if (hijo.getVal().equals("Funccall")) {
                String f = hijo.getHijos().get(0).getHijos().get(0).getVal();
                boolean exist = false;
                for (int i = 0; i < this.funciones.size(); i++) {
                    if (f.equals(this.funciones.get(i).getId())) {
                        this.constantes.add(this.funciones.get(i).tipo);
                        exist = true;
                    }
                }
                if (!exist) {
                    //System.out.println("La funcion " + f + " no existe");
                    this.errores_semanticos.add("La funcion " + f + " no existe");
                }
                this.funccall.clear();
                funcion(hijo.getHijos().get(1));

                ArrayList<String> argumentos = new ArrayList<>();
                for (int i = 0; i < this.funccall.size(); i++) {
                    String tipo = "";
                    boolean same = true;
                    for (int j = 0; j < this.funccall.get(i).size(); j++) {
                        if (j == 0) {
                            tipo = this.funccall.get(i).get(j);
                            if (!"int".equals(tipo) && !"char".equals(tipo)) {
                                tipo = tipo_var(tipo);
                            }
                        } else {
                            if (!this.funccall.get(i).get(j).equals("int") && !this.funccall.get(i).get(j).equals("char")) {
                                String val = tipo_var(this.funccall.get(i).get(j));
                                if (!val.equals(tipo)) {
                                    same = false;
                                }
                            }
                        }
                    }
                    if (same) {
                        argumentos.add(tipo);
                    } else {
                        argumentos.add("#");
                        //System.out.println("La expresi√≥n " + i + " No sirve");
                        this.errores_semanticos.add("La expresi√≥n " + i + " No sirve");
                    }
                }
                Funcion func = new Funcion("", "");
                for (int i = 0; i < this.funciones.size(); i++) {
                    if (f.equals(this.funciones.get(i).getId())) {
                        func = this.funciones.get(i);
                    }
                }
                boolean correct = true;
                if (func.getParams().size() == argumentos.size()) {
                    for (int i = 0; i < argumentos.size(); i++) {
                        if (!func.getParams().get(i).getTipo().equals(argumentos.get(i))) {
                            correct = false;
                        }
                    }
                } else {
                    correct = false;
                }
                if (!correct && exist) {
                    //System.out.println("Los parametros al llamado a al funci√≥n " + f + " son incorrectos.");
                    this.errores_semanticos.add("Los parametros al llamado a al funci√≥n " + f + " son incorrectos.");
                }

            } else {
                variables_expresion(hijo);
            }
        }
    }

    public void funcion(TreeNode root) {
        if (!root.getHijos().isEmpty()) {
            for (TreeNode hijo : root.getHijos()) {
                if (hijo.getVal().equals("Exp")) {
                    this.funccall.add(new ArrayList<>());
                    funcion(hijo);
                } else if (hijo.getVal().equals("Num")) {
                    this.funccall.get(this.funccall.size() - 1).add("int");
                } else if (hijo.getVal().equals("ID")) {
                    this.funccall.get(this.funccall.size() - 1).add(hijo.getHijos().get(0).getVal());
                } else if (hijo.getVal().equals("ConstChar")) {
                    this.funccall.get(this.funccall.size() - 1).add("char");
                } else {
                    funcion(hijo);
                }
            }
        }
    }

    public int verificar_main() {
        int cont = 0;
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals("main")) {
                cont++;
            }
        }
        return cont;
    }

    public boolean verificar_funcion(String id) {
        boolean ret = true;
        for (int i = 0; i < this.funciones.size(); i++) {
            if (this.funciones.get(i).getId().equals(id)) {
                ret = false;
            }
        }
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id) && this.tabla.get(i).getAmbito().equals("1Global")) {
                ret = false;
            }
        }
        return ret;
    }

    public boolean verificar_decfunc(String id) {
        boolean ret = true;
        for (int i = 0; i < this.decfunciones.size(); i++) {
            if (this.decfunciones.get(i).getId().equals(id)) {
                ret = false;
            }
        }
        //esto agregu√©
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id) && this.tabla.get(i).getAmbito().equals("1Global")) {
                ret = false;
            }
        }
        return ret;
    }

    public String tipo_var(String id) {
        String ret = "";
        for (int i = 0; i < this.tabla.size(); i++) {
            if (this.tabla.get(i).getId().equals(id)) {
                ret = this.tabla.get(i).getTipo();
            }
        }
        return ret;
    }

    //Codigo intermedio
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextArea;
    private javax.swing.JTextArea TextErrores;
    private javax.swing.JButton bt_guardar;
    private javax.swing.JButton bt_probar;
    private javax.swing.JButton bt_seleccionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
    File fichero;
    ArrayList<String> errores_semanticos = new ArrayList();
    ArrayList<Variable> tabla = new ArrayList();
    ArrayList<Funcion> funciones = new ArrayList();
    ArrayList<Funcion> decfunciones = new ArrayList();
    ArrayList<String> variables = new ArrayList();
    ArrayList<String> constantes = new ArrayList();
    ArrayList<ArrayList<String>> funccall = new ArrayList();
    String ambito_actual = "";
    String tipo_actual = "";
    String asig_tipo = "";
    boolean return_flag = false;
    boolean printf_flag = false;
    boolean asig_flag = false;
    String printf_tipo = "";
    //Intermedio
    ArrayList<Cuadruplo> cuadruplos = new ArrayList();
}
