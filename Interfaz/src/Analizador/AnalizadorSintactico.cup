package Analizador;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

//***************Codigo del parser*******************
parser code 
{:
    ArrayList<String> errores = new ArrayList();
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }
:}

//**************Acciones gramaticales************
action code 
{:

:}

//***************Declaraciones*****************
//terminales
terminal        INTEGER, CHARACTER, VOID, RETURN, FOR, WHILE, IF, ELSE, PRINTF, SCANF,
                KEYINIT, KEYFIN, PARINIT, PARFIN, COMMA, SEMICOLON, COLON, NUM, IDE, CONSTCHAR,
                CONSTSTR, OPMULT, OPDIV, OPSUM, OPINC, OPASIG, OPCOMP, OPDIF, OPGRA, OPLESS,OPGRAEP,
                OPLESSEQ, OPCOND, AND, OR, AMP;

non terminal    INICIO, statement, exp, t, for, forid, while, if, printf, scanf, amp,
                finalexpression, arp, ta, tap, fa, oprel, asig, type, typeap, declaration,
                decid, decasig, params, paramsb, par, paramst, paramst2, typev,
                func, funcs, funcb, funccall, increment;

start with INICIO;

INICIO::= funcs;

//sentencias
statement::= if statement |
             while statement |
             exp statement | 
             declaration statement |
             for statement |
             asig statement |
             printf statement |
             scanf | 
             RETURN exp |
             funccall statement | ;

//if
if::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t;

t::= ELSE if | ELSE KEYINIT statement KEYFIN | ;

//while
while::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN;

//for
for::= FOR PARINIT forid  exp finalexpression PARFIN KEYINIT statement KEYFIN;

forid::= IDE SEMICOLON | declaration;

//printf
printf::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON;

//scanf
scanf::= SCANF PARINIT CONSTSTR COMMA amp IDE PARFIN SEMICOLON;

amp::= AMP | ;

//expresiones aritméticas y booleanas
exp::= finalexpression SEMICOLON;

finalexpression::= ta arp;

arp::= OPSUM ta arp | ;

ta::= fa tap;

tap::= OPMULT fa tap | OPDIV fa tap | oprel fa tap | OPCOND fa tap COLON fa tap | ;

fa::= IDE increment| OPINC IDE| NUM | CONSTCHAR | PARINIT finalexpression PARFIN;

increment::= OPINC | ;

oprel::= OPGRA | OPGRAEP | OPLESS | OPLESSEQ | OPASIG | OPDIF | OPCOMP | AND | OR;

//Asignaciones 
type::= INTEGER typeap | CHARACTER typeap;

typeap::= OPMULT | ;

//Declaraciones
/*declaration::= type decid SEMICOLON;

decid::= IDE decasig | IDE;

decasig::= COMMA decid | OPASIG decright;

decright::= finalexpression COMMA decid| finalexpression;*/
declaration::= decid SEMICOLON;

decid::= decid COMMA IDE decasig | type IDE decasig;

decasig::= OPASIG finalexpression | ;

//Parámetros
typev::= VOID | type ;

par::= paramst | ;

paramst::= type paramst2;

paramst2::= COMMA paramst | IDE COMMA paramst | IDE | ;

params::= finalexpression paramsb;

paramsb::= COMMA params | ;

//Funciones
funcs::= func funcs | ;

func::= typev IDE PARINIT par PARFIN funcb; 

funcb::= KEYINIT statement KEYFIN | SEMICOLON;

//Funccall
funccall::= IDE PARINIT params PARFIN SEMICOLON;



