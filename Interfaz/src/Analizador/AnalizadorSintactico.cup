package Analizador;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

//***************Codigo del parser*******************
parser code 
{:
    ArrayList<String> errores = new ArrayList();
    
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }
:}

//**************Acciones gramaticales************
action code 
{:

:}

//***************Declaraciones*****************
//terminales
terminal        INTEGER, CHARACTER, STRING, MAIN, FOR, WHILE, IF, ELSE, PRINTF, SCANF, KEYINIT,
                KEYFIN, PARINIT, PARFIN, COMMA, SEMICOLON, COLON, NUM, IDE, CONSTCHAR,
                CONSTSTR, OPMULT, OPDIV, OPSUM, OPASIG, OPCOMP, OPDIF, OPGRA, OPLESS,OPGRAEP,
                OPLESSEQ, OPCOND;

non terminal    INICIO, statement, exp, sp, t, for, while, if, printf, scanf, boolexp, aritmeticexp, arp, ta, tap, fa;

start with INICIO;

INICIO::= INTEGER MAIN PARINIT PARFIN KEYINIT statement KEYFIN;

statement::= if | ;

if::= IF PARINIT exp PARFIN KEYINIT statement KEYFIN t;

t::= ELSE if | ELSE KEYINIT statement KEYFIN | ;

exp::= aritmeticexp;

aritmeticexp::= ta arp;

arp::= OPSUM ta arp | OPLESS ta arp | ;

ta::= fa tap;

tap::= OPMULT fa tap | OPDIV fa tap | ;

fa::= IDE | NUM | PARINIT aritmeticexp PARFIN;


