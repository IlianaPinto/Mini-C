package Analizador;
import java_cup.runtime.*;
import java.util.ArrayList;

//***************Codigo del parser*******************
parser code 
{:
    ArrayList<String> errores = new ArrayList();
    
    @Override
    public void syntax_error(Symbol s){
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "Error sintáctico: Se esperaba el token }";
        } else {
            err = "Error sintáctico: " +  " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }

        System.err.println(err);
        errores.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value != null ? s.value.toString() : getToken(s.sym);
        int fila = s.right;
        int columna = s.left;
        String err = "";
        if(lex.equals("EOF")){
            err = "";
        }else{
            err = "Error sintáctico, pánico: " + " fila: " + fila + " columna: " + columna + ", No se esperaba el token: " + lex;
        }
        System.err.println(err);
        errores.add(err);
    }

    public String getToken(int id){
        String value = Sym.terminalNames[id];
        switch(id){
            case Sym.KEYINIT:
                return "{";
            case Sym.KEYFIN:
                return "}";
            case Sym.PARINIT:
                return "(";
            case Sym.PARFIN:
                return ")";
            default:
                return value;
        }
    }   
:}

//**************Acciones gramaticales************
action code 
{:
    Nodo arbol = new Nodo();
    int token = 0;
    int parNum = 0;

:}

//***************Declaraciones*****************
//terminales
terminal String         INTEGER, CHARACTER, VOID, RETURN, FOR, WHILE, IF, ELSE, PRINTF, SCANF,
                        KEYINIT, KEYFIN, PARINIT, PARFIN, COMMA, SEMICOLON, COLON, NUM, IDE, CONSTCHAR,
                        CONSTSTR, OPMULT, OPDIV, OPSUM, OPINC, OPASIG, OPCOMP, OPDIF, OPGRA, OPLESS,OPGRAEP,
                        OPLESSEQ, OPCOND, AND, OR, AMP;

non terminal TreeNode   INICIO, statement, exp, t, for, forid, while, if, printf, printfp, scanf, amp,
                        finalexpression, arp, ta, tap, fa, oprel, asig, type, typeap, declaration,
                        decid, decasig, params, paramsb, par, paramst, paramst2, typev,
                        func, funcs, funcb, funccall, increment, paramsI;

precedence nonassoc ELSE;

start with INICIO;

INICIO::= funcs:f
    {: 
        //arbol.crearArchivo();
        token++;
        TreeNode tn = new TreeNode("Inicio", null, token);
        tn.agregarHijo(f);
        /*for(TreeNode h : f.getHijos()){
            tn.agregarHijo(h);
        }*/
        tn.print();
        tn.escribirArchivo("}");
        for(int i = 0; i < errores.size(); i++){
            System.out.println("Error: " + errores.get(i));
        }
        RESULT = tn;
    :};

//sentencias
statement::= if:i statement:st
{: 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(i);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} |
while:w statement:st
{: 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(w);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;        
:} |
exp:e statement:st
{: 
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(e);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} | 
declaration:d statement:st 
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(d);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} |
for:f statement:st
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} |
asig:a statement:st
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(a);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} |
printf:p statement:st 
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(p);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} |
scanf:s statement:st
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(s);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:} | 
RETURN:r exp:e 
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    token++;
    tn.agregarHijo(r, token);
    tn.agregarHijo(e);
    RESULT = tn;
:} |
funccall:f statement:st 
{:
    token++;
    TreeNode tn = new TreeNode("Statement", null, token);
    tn.agregarHijo(f);
    //tn.agregarHijo(st);
    for(TreeNode h : st.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:}
| error statement:st 
{:
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    tn.agregarHijo(st);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);
:}
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:}
;

//if
if::= IF PARINIT finalexpression:f PARFIN KEYINIT statement:s KEYFIN t:t1 
{:
    token++;
    TreeNode tn = new TreeNode("IF", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(s);
    tn.agregarHijo(t1);
    RESULT = tn;
:};

t::= ELSE if:i
{:
    token++;
    TreeNode tn = new TreeNode("Else", null, token);
    tn.agregarHijo(i);
    RESULT = tn;
:}
| ELSE KEYINIT statement:st KEYFIN 
{:
    token++;
    TreeNode tn = new TreeNode("Else", null, token);
    tn.agregarHijo(st);
    RESULT = tn;
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

//while
while::= WHILE PARINIT finalexpression:f PARFIN KEYINIT statement:st KEYFIN
{:
    token++;
    TreeNode tn = new TreeNode("While", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(st);
    RESULT = tn;
:};

//for
for::= FOR PARINIT forid:f exp:e finalexpression:fe PARFIN KEYINIT statement:st KEYFIN 
{:
    token++;
    TreeNode tn = new TreeNode("For", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(e);
    tn.agregarHijo(fe);
    tn.agregarHijo(st);
    RESULT = tn;
:};

forid::= IDE:i SEMICOLON 
{:
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;
:} 
| declaration:d
{:
    RESULT = d;
:};

//printf
printf::= PRINTF PARINIT CONSTSTR:c printfp:pf PARFIN SEMICOLON
{:
    token++;
    TreeNode tn = new TreeNode("Printf", null, token);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(pf);
    RESULT = tn;
:};

printfp::= COMMA finalexpression:f
{:
    RESULT = f;
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:} ;

//scanf
scanf::= SCANF PARINIT CONSTSTR:cs COMMA amp:a IDE:i PARFIN SEMICOLON 
{:
    token++;
    TreeNode tn = new TreeNode("Scanf", null, token);
    token++;
    tn.agregarHijo(cs, token);
    tn.agregarHijo(a);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    RESULT = tn;
:};

amp::= AMP:a 
{:
    token++;
    RESULT = new TreeNode(a, null, token);
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

//expresiones aritméticas y booleanas
exp::= finalexpression:f SEMICOLON
{:
    RESULT = f;
:};

finalexpression::= ta:t arp:ar
{:
    token++;
    TreeNode tn = new TreeNode("Exp", null, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;
:};

arp::= OPSUM:s ta:t arp:ar 
{:
    token++;
    TreeNode tn = new TreeNode(s, null, token);
    //token++;
    //tn.agregarHijo(s, token);
    //tn.agregarHijo(t);
    for(TreeNode h : t.getHijos()){
        tn.agregarHijo(h);
    }
    tn.agregarHijo(ar);
    RESULT = tn;
:}
 | 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

ta::= fa:f tap:t 
{:
    token++;
    TreeNode tn = new TreeNode("T", null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;
:};

tap::= OPMULT:o fa:f tap:t 
{:
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;
:} 
| OPDIV:o fa:f tap:t 
{:
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;
:}
| oprel:o fa:f tap:t 
{:
    token++;
    TreeNode tn = new TreeNode(o.getVal(), null, token);
    //tn.agregarHijo(o);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    RESULT = tn;
:} 
| OPCOND:o fa:f tap:t COLON:c fa:f1 tap:t1 
{:
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    tn.agregarHijo(f);
    tn.agregarHijo(t);
    token++;
    tn.agregarHijo(c, token);
    tn.agregarHijo(f1);
    tn.agregarHijo(t1);
    RESULT = tn;
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

fa::= IDE:i increment:in
{:
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(in);
    RESULT = tn;
:} 
| OPINC:in IDE:i
{:
    token++;
    TreeNode tn = new TreeNode("Id", null, token);
    token++;
    tn.agregarHijo(in, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;
:}
| NUM:n
{:
    token++;
    TreeNode tn = new TreeNode("Num", null, token);
    token++;
    tn.agregarHijo(n, token);
    RESULT = tn;
:} 
| CONSTCHAR:c
{:
    token++;
    TreeNode tn = new TreeNode("ConstChar", null, token);
    token++;
    tn.agregarHijo(c, token);
    RESULT = tn;
:} 
| PARINIT finalexpression:f PARFIN 
{:
    RESULT = f;
:};

increment::= OPINC:o
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} | 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:} ;

oprel::= OPGRA:o
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| OPGRAEP:o
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| OPLESS:o
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| OPLESSEQ:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:}
| OPASIG:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| OPDIF:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:}
| OPCOMP:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:}
| AND:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| OR:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:};

//Asignaciones 
type::= INTEGER:i typeap:ty
{:
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(i, token);
    tn.agregarHijo(ty);
    RESULT =  tn;
:}
| CHARACTER:ch typeap:ty
{: 
    token++;
    TreeNode tn =  new TreeNode("Tipo",null, token);
    token++;
    tn.agregarHijo(ch, token);
    tn.agregarHijo(ty);
    RESULT = tn;
:}
;

typeap::= OPMULT:o 
{:
    token++;
    RESULT = new TreeNode(o, null, token);
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:} ;

declaration::= decid:d SEMICOLON 
{:
    token++;
    TreeNode tn = new TreeNode("Declaracion", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    RESULT = tn;
:};

decid::= decid:d COMMA IDE:i decasig:de
{:
    token++;
    TreeNode tn = new TreeNode("Dec", null, token);
    //tn.agregarHijo(d);
    for(TreeNode h : d.getHijos()){
        tn.agregarHijo(h);
    }
    //
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(de);
    RESULT = tn;
:} 
| type:t IDE:i decasig:d 
{:
    token++;
    TreeNode tn = new TreeNode("D", null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(d);
    RESULT = tn;
:};

decasig::= OPASIG:o finalexpression:f 
{:
    token++;
    TreeNode tn = new TreeNode(o, null, token);
    //token++;
    //tn.agregarHijo(o, token);
    tn.agregarHijo(f);
    RESULT = tn;
:} 
| 
{: 
    token++;
    RESULT = new TreeNode("#", null, token);
:} ;

//Parámetros
typev::= VOID:v
{: 
    token++;
    TreeNode tn =  new TreeNode("Tipo", null, token);
    token++;
    tn.agregarHijo(v, token);
    RESULT = tn;
:} 
| type:t 
{:  
    RESULT = t;
:}
;

par::= paramst:p
{: 
    parNum++;
    RESULT = p;

:} 
|  
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

paramst::= type:t paramst2:p
{:  
        token++;
        TreeNode tn = new TreeNode("p", null, parNum);
        tn.agregarHijo(t);
        tn.agregarHijo(p);
        RESULT = tn;
:}
;

paramst2::= COMMA paramst:p
{:  
    RESULT =  p;
:} 
| IDE:i COMMA paramst:p 
{:
    TreeNode tn = new TreeNode("p", null, parNum);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;
:} 
| IDE:i
{:
    token++;
    TreeNode tn = new TreeNode("ID", null, token);
    token++;
    tn.agregarHijo(i, token);
    RESULT = tn;
:}
| 
{: 
    token++;
    RESULT = new TreeNode("#", null, token);
:}
;

paramsI::= params:p
{:
    parNum++;
    RESULT = p;
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

params::= finalexpression:f paramsb:p 
{:
    token++;
    TreeNode tn = new TreeNode("par", null, parNum);
    tn.agregarHijo(f);
    tn.agregarHijo(p);
    RESULT = tn;
:};

paramsb::= COMMA params:p 
{:
    RESULT = p;
:} 
| 
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

//Funciones
funcs::= func:f
{:  
    token++;
    TreeNode tn = new TreeNode("Funciones", null, 0);
    tn.agregarHijo(f);
    RESULT = tn;
:}
| funcs:fs func:f
{:
    TreeNode tn = new TreeNode("Funciones", null, 0);
    
    tn.agregarHijo(fs);
    tn.agregarHijo(f);
    RESULT = tn;
:}
 ;

func::= typev:t IDE:i PARINIT:pi par:p PARFIN:pf funcb:fb
{: 
    token++;
    TreeNode tn = new TreeNode("Funcion",null, token);
    tn.agregarHijo(t);
    token++;
    TreeNode id =  new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    tn.agregarHijo(fb);
    RESULT = tn;
:}
|error
{:
    token++;
    TreeNode tn = new TreeNode("Statement",null,token);
    token++;
    tn.agregarHijo("Error",token);
    RESULT = tn;
    System.err.println("No se esperaba ese token");
    System.err.println(RESULT);
:}; 

funcb::= KEYINIT statement:st KEYFIN
{:
    RESULT = st;
:}
 | SEMICOLON
{:
    token++;
    RESULT = new TreeNode("#", null, token);
:};

//Funccall
funccall::= IDE:i PARINIT paramsI:p PARFIN SEMICOLON 
{:
    token++;
    TreeNode tn = new TreeNode("Funccall", null, token);
    token++;
    TreeNode id = new TreeNode("ID", null, token);
    token++;
    id.agregarHijo(i, token);
    tn.agregarHijo(id);
    tn.agregarHijo(p);
    RESULT = tn;
:};
