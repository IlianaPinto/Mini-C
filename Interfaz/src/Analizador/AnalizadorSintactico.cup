package Analizador;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

//***************Codigo del parser*******************
parser code 
{:
    ArrayList<String> errores = new ArrayList();
    
    public void syntax_error(Symbol s){
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lex = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String err = "Error sintáctico, pánico: " + lex + " fila: " + fila + " columna: " + columna;

        System.out.println(err);
        errores.add(err);
    }
:}

//**************Acciones gramaticales************
action code 
{:

:}

//***************Declaraciones*****************
//terminales
terminal        INTEGER, CHARACTER, STRING, MAIN, FOR, WHILE, IF, ELSE, PRINTF, SCANF, KEYINIT,
                KEYFIN, PARINIT, PARFIN, COMMA, SEMICOLON, COLON, NUM, IDE, CONSTCHAR,
                CONSTSTR, OPMULT, OPDIV, OPSUM, OPASIG, OPCOMP, OPDIF, OPGRA, OPLESS,OPGRAEP,
                OPLESSEQ, OPCOND, AND, OR;

non terminal    INICIO, statement, exp, sp, t, for, forid, expfor, while, if, printf, scanf,
                finalexpression, arp, ta, tap, fa, oprel, asig, type, declaration,
                dectype, decid, decasig, decright, decrightp, params, paramsb;

start with INICIO;

INICIO::= INTEGER MAIN PARINIT PARFIN KEYINIT statement KEYFIN;

//sentencias
statement::= if statement |
             while statement |
             exp statement | 
             declaration statement |
             for statement |
             asig statement |
             printf statement | ;

//if
if::= IF PARINIT finalexpression PARFIN KEYINIT statement KEYFIN t;

t::= ELSE if | ELSE KEYINIT statement KEYFIN | ;

//while
while::= WHILE PARINIT finalexpression PARFIN KEYINIT statement KEYFIN;

//for
for::= FOR PARINIT forid  exp finalexpression PARFIN KEYINIT statement KEYFIN;

forid::=   IDE SEMICOLON | declaration;

//printf
printf::= PRINTF PARINIT CONSTSTR COMMA params PARFIN SEMICOLON;

//expresiones aritméticas
exp::= finalexpression SEMICOLON;

finalexpression::= ta arp;

arp::= OPSUM ta arp | ;

ta::= fa tap;

tap::= OPMULT fa tap | OPDIV fa tap | oprel fa tap | ;

fa::= IDE | NUM | CONSTCHAR | PARINIT finalexpression PARFIN;

oprel::= OPGRA | OPGRAEP | OPLESS | OPLESSEQ | OPASIG | OPCOMP | AND | OR;


//Asignaciones 

type::= INTEGER | CHARACTER;

//Declaraciones
declaration::= type decid SEMICOLON ;

decid::= IDE decasig | IDE;

decasig::= COMMA decid | OPASIG decright;

decright::= finalexpression COMMA decid| finalexpression;

//Parámetros
params::= IDE paramsb;

paramsb::= COMMA params | ;




